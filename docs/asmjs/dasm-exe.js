// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
    Module.finishedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
      var PACKAGE_PATH;
      if (typeof window === 'object') {
        PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
      } else if (typeof location !== 'undefined') {
        // worker
        PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
      } else {
        throw 'using preloaded data can only be done on a web page or in a web worker';
      }
      var PACKAGE_NAME = './dasm-exe.data';
      var REMOTE_PACKAGE_BASE = 'dasm-exe.data';
      if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
        Module['locateFile'] = Module['locateFilePackage'];
        err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
      }
      var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
    
      var REMOTE_PACKAGE_SIZE = metadata['remote_package_size'];
      var PACKAGE_UUID = metadata['package_uuid'];
    
      function fetchRemotePackage(packageName, packageSize, callback, errback) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', packageName, true);
        xhr.responseType = 'arraybuffer';
        xhr.onprogress = function(event) {
          var url = packageName;
          var size = packageSize;
          if (event.total) size = event.total;
          if (event.loaded) {
            if (!xhr.addedTotal) {
              xhr.addedTotal = true;
              if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
              Module.dataFileDownloads[url] = {
                loaded: event.loaded,
                total: size
              };
            } else {
              Module.dataFileDownloads[url].loaded = event.loaded;
            }
            var total = 0;
            var loaded = 0;
            var num = 0;
            for (var download in Module.dataFileDownloads) {
            var data = Module.dataFileDownloads[download];
              total += data.total;
              loaded += data.loaded;
              num++;
            }
            total = Math.ceil(total * Module.expectedDataFileDownloads/num);
            if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
          } else if (!Module.dataFileDownloads) {
            if (Module['setStatus']) Module['setStatus']('Downloading data...');
          }
        };
        xhr.onerror = function(event) {
          throw new Error("NetworkError for: " + packageName);
        }
        xhr.onload = function(event) {
          if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            var packageData = xhr.response;
            callback(packageData);
          } else {
            throw new Error(xhr.statusText + " : " + xhr.responseURL);
          }
        };
        xhr.send(null);
      };

      function handleError(error) {
        console.error('package error:', error);
      };
    
        var fetchedCallback = null;
        var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

        if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
          if (fetchedCallback) {
            fetchedCallback(data);
            fetchedCallback = null;
          } else {
            fetched = data;
          }
        }, handleError);
      
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  Module['FS_createPath']('/', 'examples', true, true);

      function DataRequest(start, end, audio) {
        this.start = start;
        this.end = end;
        this.audio = audio;
      }
      DataRequest.prototype = {
        requests: {},
        open: function(mode, name) {
          this.name = name;
          this.requests[name] = this;
          Module['addRunDependency']('fp ' + this.name);
        },
        send: function() {},
        onload: function() {
          var byteArray = this.byteArray.subarray(this.start, this.end);
          this.finish(byteArray);
        },
        finish: function(byteArray) {
          var that = this;
  
          Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
          Module['removeRunDependency']('fp ' + that.name);
  
          this.requests[this.name] = null;
        }
      };
  
          var files = metadata['files'];
          for (var i = 0; i < files.length; ++i) {
            new DataRequest(files[i]['start'], files[i]['end'], files[i]['audio']).open('GET', files[i]['filename']);
          }
  
    
      function processPackageData(arrayBuffer) {
        Module.finishedDataFileDownloads++;
        assert(arrayBuffer, 'Loading data file failed.');
        assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
        var byteArray = new Uint8Array(arrayBuffer);
        var curr;
        
          // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
          // (we may be allocating before malloc is ready, during startup).
          var ptr = Module['getMemory'](byteArray.length);
          Module['HEAPU8'].set(byteArray, ptr);
          DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
    
            var files = metadata['files'];
            for (var i = 0; i < files.length; ++i) {
              DataRequest.prototype.requests[files[i].filename].onload();
            }
                Module['removeRunDependency']('datafile_./dasm-exe.data');

      };
      Module['addRunDependency']('datafile_./dasm-exe.data');
    
      if (!Module.preloadResults) Module.preloadResults = {};
    
        Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
        if (fetched) {
          processPackageData(fetched);
          fetched = null;
        } else {
          fetchedCallback = processPackageData;
        }
      
    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": [{"start": 0, "audio": 0, "end": 17795, "filename": "/examples/calculator.asm"}, {"start": 17795, "audio": 0, "end": 18058, "filename": "/examples/noise.asm"}, {"start": 18058, "audio": 0, "end": 18246, "filename": "/examples/selfmodify.asm"}, {"start": 18246, "audio": 0, "end": 27543, "filename": "/examples/demoscene.asm"}, {"start": 27543, "audio": 0, "end": 29232, "filename": "/examples/screenpatterns.asm"}, {"start": 29232, "audio": 0, "end": 33002, "filename": "/examples/gameoflife.asm"}, {"start": 33002, "audio": 0, "end": 33219, "filename": "/examples/disco.asm"}, {"start": 33219, "audio": 0, "end": 33624, "filename": "/examples/sierpinski.asm"}, {"start": 33624, "audio": 0, "end": 36109, "filename": "/examples/rle.asm"}, {"start": 36109, "audio": 0, "end": 36500, "filename": "/examples/colors.asm"}, {"start": 36500, "audio": 0, "end": 40497, "filename": "/examples/zookeeper.asm"}, {"start": 40497, "audio": 0, "end": 47755, "filename": "/examples/compo-May07-1st.asm"}, {"start": 47755, "audio": 0, "end": 49680, "filename": "/examples/splashscreen.asm"}, {"start": 49680, "audio": 0, "end": 51965, "filename": "/examples/byterun.asm"}, {"start": 51965, "audio": 0, "end": 52296, "filename": "/examples/random.asm"}, {"start": 52296, "audio": 0, "end": 52759, "filename": "/examples/triangles.asm"}, {"start": 52759, "audio": 0, "end": 55880, "filename": "/examples/softsprites.asm"}, {"start": 55880, "audio": 0, "end": 62270, "filename": "/examples/compo-May07-3rd.asm"}, {"start": 62270, "audio": 0, "end": 64507, "filename": "/examples/compo-May07-2nd.asm"}, {"start": 64507, "audio": 0, "end": 64955, "filename": "/examples/starfield2d.asm"}, {"start": 64955, "audio": 0, "end": 66129, "filename": "/examples/backandforth.asm"}, {"start": 66129, "audio": 0, "end": 66877, "filename": "/examples/alive.asm"}, {"start": 66877, "audio": 0, "end": 70257, "filename": "/examples/spacer.asm"}, {"start": 70257, "audio": 0, "end": 73134, "filename": "/examples/fullscreenlogo.asm"}, {"start": 73134, "audio": 0, "end": 110502, "filename": "/examples/adventure.asm"}, {"start": 110502, "audio": 0, "end": 111736, "filename": "/examples/rorshach.asm"}, {"start": 111736, "audio": 0, "end": 120408, "filename": "/examples/skier.asm"}, {"start": 120408, "audio": 0, "end": 123948, "filename": "/bios.asm"}], "remote_package_size": 123948, "package_uuid": "3c39dc63-2175-4844-9406-691ba814144e"});
  
  })();
  


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }


  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}






// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.


// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
var
WebAssembly = {
  Memory: function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 98 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.exit;
 var fimport$1 = env.__lock;
 var fimport$2 = env.__unlock;
 var fimport$3 = env.__syscall5;
 var fimport$4 = env.fd_close;
 var fimport$5 = env.__syscall221;
 var fimport$6 = env.__syscall54;
 var fimport$7 = env.fd_read;
 var fimport$8 = env.fd_write;
 var fimport$9 = env._embind_register_void;
 var fimport$10 = env._embind_register_bool;
 var fimport$11 = env._embind_register_std_string;
 var fimport$12 = env._embind_register_std_wstring;
 var fimport$13 = env._embind_register_emval;
 var fimport$14 = env._embind_register_integer;
 var fimport$15 = env._embind_register_float;
 var fimport$16 = env._embind_register_memory_view;
 var fimport$17 = env.emscripten_resize_heap;
 var fimport$18 = env.emscripten_memcpy_big;
 var fimport$19 = env.__handle_stack_overflow;
 var fimport$20 = env.setTempRet0;
 var fimport$21 = env.fd_seek;
 var global$0 = 5330400;
 var global$1 = 87508;
 var global$2 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  return 87520 | 0;
 }
 
 function $1() {
  $369();
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $8_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $3(1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $3($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $96_1 = 0, $18_1 = 0, $92_1 = 0, $135_1 = 0, $134_1 = 0, $25_1 = 0, $103_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $134_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $134_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   if (!((HEAP32[(69296 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$3
   }
   $18_1 = 69296;
   $25_1 = $398(HEAP32[(12536 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($18_1 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $25_1;
   label$4 : {
    if (!((HEAP32[($18_1 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    $4(2383 | 0);
   }
   HEAP8[(HEAP32[(69296 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 0] = 0;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = ($147(HEAP32[(69296 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0) + ($147(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0;
  label$5 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) > (HEAP32[(12536 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   label$6 : {
    label$7 : {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < ((HEAP32[(12536 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
      break label$7
     }
     $92_1 = (HEAP32[(12536 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) << 1 | 0;
     break label$6;
    }
    $92_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   }
   $96_1 = 69296;
   HEAP32[($4_1 + 4 | 0) >> 2] = $92_1;
   $103_1 = $400(HEAP32[($96_1 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($96_1 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $103_1;
   label$8 : {
    if (!((HEAP32[($96_1 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$8
    }
    $4(2428 | 0);
   }
   HEAP32[(12536 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  $141(HEAP32[(69296 + ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$9 : {
   $135_1 = $4_1 + 16 | 0;
   if ($135_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $135_1;
  }
  return;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $6_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $197(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$0(1 | 0);
  abort();
 }
 
 function $5($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $11_1 = 0, $20_1 = 0, $81_1 = 0, $80_1 = 0, $25_1 = 0, $77_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $80_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $80_1;
  }
  $6_1 = 69312;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = 24;
  HEAP32[($4_1 + 4 | 0) >> 2] = ((HEAPU8[(0 + 70350 | 0) >> 0] | 0) << $11_1 | 0) >> $11_1 | 0 ? $6_1 : $6_1 + 519 | 0;
  $405(69312 | 0, 0 | 0, 1038 | 0) | 0;
  $20_1 = 24;
  HEAP8[(0 + 70350 | 0) >> 0] = 1 - (((HEAPU8[(0 + 70350 | 0) >> 0] | 0) << $20_1 | 0) >> $20_1 | 0) | 0;
  $25_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $213($25_1 | 0, 2050 | 0, $4_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & 1 | 0)) {
     break label$4
    }
    $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2057 | 0) | 0;
    break label$3;
   }
   $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2063 | 0) | 0;
  }
  label$5 : {
   label$6 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & 8 | 0)) {
     break label$6
    }
    $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2069 | 0) | 0;
    break label$5;
   }
   $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2074 | 0) | 0;
  }
  label$7 : {
   label$8 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & 32 | 0)) {
     break label$8
    }
    $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2079 | 0) | 0;
    break label$7;
   }
   $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2074 | 0) | 0;
  }
  label$9 : {
   label$10 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & 80 | 0)) {
     break label$10
    }
    $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2084 | 0) | 0;
    break label$9;
   }
   $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2086 | 0) | 0;
  }
  label$11 : {
   label$12 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & 64 | 0)) {
     break label$12
    }
    $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2088 | 0) | 0;
    break label$11;
   }
   $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2086 | 0) | 0;
  }
  label$13 : {
   label$14 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & 16 | 0)) {
     break label$14
    }
    $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2090 | 0) | 0;
    break label$13;
   }
   $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2086 | 0) | 0;
  }
  label$15 : {
   label$16 : {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & 80 | 0)) {
     break label$16
    }
    $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2092 | 0) | 0;
    break label$15;
   }
   $141(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, 2086 | 0) | 0;
  }
  $77_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  label$17 : {
   $81_1 = $4_1 + 16 | 0;
   if ($81_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $81_1;
  }
  return $77_1 | 0;
 }
 
 function $6() {
  var $2_1 = 0, $12_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(0 + 83320 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    $12_1 = 1;
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] = ((HEAPU8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 16 | 0 | 1 | 0;
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 29 | 0) >> 0] = $12_1;
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 28 | 0) >> 0] = $12_1;
    HEAP8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 9 | 0) >> 0] = $12_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $7() {
  var $2_1 = 0, $6_1 = 0, $16_1 = 0, $30_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP16[($2_1 + 10 | 0) >> 1] = 0;
  label$1 : {
   label$2 : while (1) {
    $6_1 = 16;
    if (!((((HEAPU16[($2_1 + 10 | 0) >> 1] | 0) << $6_1 | 0) >> $6_1 | 0 | 0) < (1024 | 0) & 1 | 0)) {
     break label$1
    }
    $16_1 = 16;
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(75120 + ((((HEAPU16[($2_1 + 10 | 0) >> 1] | 0) << $16_1 | 0) >> $16_1 | 0) << 2 | 0) | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      $30_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      HEAP8[($30_1 + 12 | 0) >> 0] = ((HEAPU8[($30_1 + 12 | 0) >> 0] | 0) & 255 | 0) & -5 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
      continue label$4;
     };
    }
    HEAP16[($2_1 + 10 | 0) >> 1] = (HEAPU16[($2_1 + 10 | 0) >> 1] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $22_1 = 0, $25_1 = 0, $29_1 = 0, $52_1 = 0, $62_1 = 0, $65_1 = 0, $71_1 = 0, $85_1 = 0, $103_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(0 + 84880 | 0) >> 2] = -1;
  HEAP32[(0 + 70352 | 0) >> 2] = 0;
  $11_1 = 24;
  label$1 : {
   label$2 : {
    if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $11_1 | 0) >> $11_1 | 0 | 0) == (46 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : while (1) {
    $22_1 = 24;
    $25_1 = 0;
    label$4 : {
     if (!(((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $22_1 | 0) >> $22_1 | 0)) {
      break label$4
     }
     $29_1 = 24;
     $25_1 = (((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $29_1 | 0) >> $29_1 | 0 | 0) != (46 | 0);
    }
    label$5 : {
     if (!($25_1 & 1 | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    }
    break label$3;
   };
   if (!(((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   $52_1 = 0;
   HEAP8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] = $52_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($52_1 + 70352 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $62_1 = (HEAP8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0 | 32 | 0) + -48 | 0;
   label$6 : {
    if ($62_1 >>> 0 > 74 >>> 0) {
     break label$6
    }
    label$7 : {
     switch ($62_1 | 0) {
     default:
      $65_1 = 0;
      HEAP32[($65_1 + 84880 | 0) >> 2] = $65_1;
      $71_1 = (HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 32 | 0) + -110 | 0;
      label$13 : {
       if ($71_1 >>> 0 > 11 >>> 0) {
        break label$13
       }
       label$14 : {
        switch ($71_1 | 0) {
        case 10:
         HEAP32[(0 + 84880 | 0) >> 2] = 13;
         break label$13;
        case 11:
         HEAP32[(0 + 84880 | 0) >> 2] = 14;
         break label$13;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
         break label$13;
        default:
         break label$14;
        };
       }
       HEAP32[(0 + 84880 | 0) >> 2] = 12;
      }
      break label$1;
     case 50:
     case 52:
     case 74:
      $85_1 = (HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 32 | 0) + -98 | 0;
      label$17 : {
       label$18 : {
        if ($85_1 >>> 0 > 23 >>> 0) {
         break label$18
        }
        label$19 : {
         switch ($85_1 | 0) {
         case 22:
          HEAP32[(0 + 84880 | 0) >> 2] = 4;
          break label$17;
         case 23:
          HEAP32[(0 + 84880 | 0) >> 2] = 5;
          break label$17;
         case 7:
          HEAP32[(0 + 84880 | 0) >> 2] = 15;
          break label$17;
         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
         case 8:
         case 9:
         case 10:
         case 11:
         case 12:
         case 13:
         case 14:
         case 15:
         case 16:
         case 17:
         case 18:
         case 19:
         case 20:
         case 21:
          break label$18;
         default:
          break label$19;
         };
        }
        HEAP32[(0 + 84880 | 0) >> 2] = 16;
        break label$17;
       }
       HEAP32[(0 + 84880 | 0) >> 2] = 3;
      }
      break label$1;
     case 49:
     case 53:
     case 71:
      $103_1 = (HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 32 | 0) + -120 | 0;
      label$23 : {
       label$24 : {
        if ($103_1 >>> 0 > 1 >>> 0) {
         break label$24
        }
        label$25 : {
         switch ($103_1 | 0) {
         default:
          HEAP32[(0 + 84880 | 0) >> 2] = 7;
          break label$23;
         case 1:
          break label$25;
         };
        }
        HEAP32[(0 + 84880 | 0) >> 2] = 8;
        break label$23;
       }
       HEAP32[(0 + 84880 | 0) >> 2] = 6;
      }
      break label$1;
     case 60:
      HEAP32[(0 + 84880 | 0) >> 2] = 19;
      break label$1;
     case 66:
      HEAP32[(0 + 84880 | 0) >> 2] = 9;
      break label$1;
     case 1:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
     case 10:
     case 11:
     case 12:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 23:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 31:
     case 32:
     case 33:
     case 34:
     case 35:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 46:
     case 47:
     case 48:
     case 51:
     case 54:
     case 55:
     case 56:
     case 58:
     case 59:
     case 61:
     case 62:
     case 63:
     case 64:
     case 65:
     case 67:
     case 68:
     case 70:
     case 72:
     case 73:
      break label$6;
     case 69:
      break label$7;
     };
    }
    HEAP32[(0 + 84880 | 0) >> 2] = 20;
    break label$1;
   }
  }
  return;
 }
 
 function $9($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $20_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $7_1;
  label$3 : {
   if (!(($7_1 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
   $399(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   $20_1 = $4_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  return;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $84_1 = 0, $5_1 = 0, $11_1 = 0, $27_1 = 0, $43_1 = 0, $59_1 = 0, $81_1 = 0, $91_1 = 0, $104_1 = 0, $118_1 = 0, $146_1 = 0, $151_1 = 0, $155_1 = 0, $163_1 = 0, $183_1 = 0, $192_1 = 0, $197_1 = 0, $205_1 = 0, $208_1 = 0, $214_1 = 0, $240_1 = 0, $245_1 = 0, $249_1 = 0, $262_1 = 0, $294_1 = 0, $309_1 = 0, $337_1 = 0, $342_1 = 0, $351_1 = 0, $350_1 = 0, $145_1 = 0, $150_1 = 0, $191_1 = 0, $196_1 = 0, $239_1 = 0, $244_1 = 0, $336_1 = 0, $341_1 = 0, $347_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $350_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $350_1;
  }
  $5_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[$3_1 >> 2] = $5_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 1;
  label$3 : {
   label$4 : while (1) {
    $11_1 = 24;
    if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $11_1 | 0) >> $11_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $27_1 = 24;
  label$5 : {
   label$6 : {
    if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $27_1 | 0) >> $27_1 | 0 | 0) == (94 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    label$7 : {
     label$8 : while (1) {
      $43_1 = 24;
      if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $43_1 | 0) >> $43_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    break label$5;
   }
   $59_1 = 24;
   label$9 : {
    label$10 : {
     if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $59_1 | 0) >> $59_1 | 0 | 0) == (35 | 0) & 1 | 0)) {
      break label$10
     }
     HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = 32;
     break label$9;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = 0;
   }
  }
  HEAP32[(0 + 83344 | 0) >> 2] = 84368 + (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0;
  label$11 : while (1) {
   $81_1 = 24;
   $84_1 = 0;
   label$12 : {
    if (!(((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $81_1 | 0) >> $81_1 | 0)) {
     break label$12
    }
    $91_1 = 24;
    $84_1 = 0;
    if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $91_1 | 0) >> $91_1 | 0 | 0) != (32 | 0) & 1 | 0)) {
     break label$12
    }
    $104_1 = 24;
    $84_1 = (((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $104_1 | 0) >> $104_1 | 0 | 0) != (61 | 0);
   }
   label$13 : {
    if (!($84_1 & 1 | 0)) {
     break label$13
    }
    $118_1 = 24;
    label$14 : {
     if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $118_1 | 0) >> $118_1 | 0 | 0) == (58 | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     break label$13;
    }
    label$15 : {
     if (!(((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) == (128 | 0) & 1 | 0)) {
      break label$15
     }
     HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = 32;
    }
    $145_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $146_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $146_1 + 1 | 0;
    $150_1 = HEAPU8[($145_1 + $146_1 | 0) >> 0] | 0;
    $151_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $151_1 + 1 | 0;
    HEAP8[($151_1 + 84368 | 0) >> 0] = $150_1;
    continue label$11;
   }
   break label$11;
  };
  $155_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $155_1 + 1 | 0;
  HEAP8[($155_1 + 84368 | 0) >> 0] = 0;
  label$16 : {
   label$17 : while (1) {
    $163_1 = 24;
    if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $163_1 | 0) >> $163_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
     break label$16
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$17;
   };
  }
  HEAP32[(0 + 83348 | 0) >> 2] = 84368 + (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0;
  $183_1 = 24;
  label$18 : {
   label$19 : {
    if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $183_1 | 0) >> $183_1 | 0 | 0) == (61 | 0) & 1 | 0)) {
     break label$19
    }
    $191_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $192_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $192_1 + 1 | 0;
    $196_1 = HEAPU8[($191_1 + $192_1 | 0) >> 0] | 0;
    $197_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $197_1 + 1 | 0;
    HEAP8[($197_1 + 84368 | 0) >> 0] = $196_1;
    break label$18;
   }
   label$20 : while (1) {
    $205_1 = 24;
    $208_1 = 0;
    label$21 : {
     if (!(((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $205_1 | 0) >> $205_1 | 0)) {
      break label$21
     }
     $214_1 = 24;
     $208_1 = (((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $214_1 | 0) >> $214_1 | 0 | 0) != (32 | 0);
    }
    label$22 : {
     if (!($208_1 & 1 | 0)) {
      break label$22
     }
     label$23 : {
      if (!(((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) == (128 | 0) & 1 | 0)) {
       break label$23
      }
      HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = 32;
     }
     $239_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     $240_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = $240_1 + 1 | 0;
     $244_1 = HEAPU8[($239_1 + $240_1 | 0) >> 0] | 0;
     $245_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $245_1 + 1 | 0;
     HEAP8[($245_1 + 84368 | 0) >> 0] = $244_1;
     continue label$20;
    }
    break label$20;
   };
  }
  $249_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $249_1 + 1 | 0;
  HEAP8[($249_1 + 84368 | 0) >> 0] = 0;
  $8(HEAP32[(0 + 83348 | 0) >> 2] | 0 | 0);
  HEAP32[$3_1 >> 2] = $11(HEAP32[(0 + 83348 | 0) >> 2] | 0 | 0) | 0;
  label$24 : {
   label$25 : while (1) {
    $262_1 = 24;
    if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $262_1 | 0) >> $262_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
     break label$24
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$25;
   };
  }
  HEAP32[(0 + 83352 | 0) >> 2] = 84368 + (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0;
  label$26 : {
   label$27 : while (1) {
    if (!(((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$26
    }
    $294_1 = 24;
    label$28 : {
     if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $294_1 | 0) >> $294_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$28
     }
     label$29 : {
      label$30 : while (1) {
       $309_1 = 24;
       if (!((((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0) << $309_1 | 0) >> $309_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
        break label$29
       }
       HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
       continue label$30;
      };
     }
    }
    label$31 : {
     if (!(((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) == (128 | 0) & 1 | 0)) {
      break label$31
     }
     HEAP8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = 32;
    }
    $336_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $337_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $337_1 + 1 | 0;
    $341_1 = HEAPU8[($336_1 + $337_1 | 0) >> 0] | 0;
    $342_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $342_1 + 1 | 0;
    HEAP8[($342_1 + 84368 | 0) >> 0] = $341_1;
    continue label$27;
   };
  }
  HEAP8[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 84368 | 0) >> 0] = 0;
  $347_1 = HEAP32[$3_1 >> 2] | 0;
  label$32 : {
   $351_1 = $3_1 + 16 | 0;
   if ($351_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $351_1;
  }
  return $347_1 | 0;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $23_1 = 0, $33_1 = 0, $43_1 = 0, $52_1 = 0, $91_1 = 0, $90_1 = 0, $87_1 = 0;
  $3_1 = global$0 - 80 | 0;
  label$1 : {
   $90_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $90_1;
  }
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  $7_1 = 24;
  label$3 : {
   if (!((((HEAPU8[(HEAP32[($3_1 + 76 | 0) >> 2] | 0) >> 0] | 0) << $7_1 | 0) >> $7_1 | 0 | 0) == (46 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 76 | 0) >> 2] = (HEAP32[($3_1 + 76 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($3_1 + 72 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    $23_1 = HEAPU8[((HEAP32[($3_1 + 76 | 0) >> 2] | 0) + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) >> 0] | 0;
    HEAP8[($3_1 + 71 | 0) >> 0] = $23_1;
    if (!(($23_1 & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $33_1 = 24;
    label$6 : {
     if (!((((HEAPU8[($3_1 + 71 | 0) >> 0] | 0) << $33_1 | 0) >> $33_1 | 0 | 0) >= (65 | 0) & 1 | 0)) {
      break label$6
     }
     $43_1 = 24;
     if (!((((HEAPU8[($3_1 + 71 | 0) >> 0] | 0) << $43_1 | 0) >> $43_1 | 0 | 0) <= (90 | 0) & 1 | 0)) {
      break label$6
     }
     $52_1 = 24;
     HEAP8[($3_1 + 71 | 0) >> 0] = (((HEAPU8[($3_1 + 71 | 0) >> 0] | 0) << $52_1 | 0) >> $52_1 | 0) + 32 | 0;
    }
    HEAP8[($3_1 + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[($3_1 + 71 | 0) >> 0] | 0;
    HEAP32[($3_1 + 72 | 0) >> 2] = (HEAP32[($3_1 + 72 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  HEAP8[($3_1 + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) >> 0] = 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[(79216 + (($12($3_1 | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    label$9 : {
     if ($142($3_1 | 0, HEAP32[((HEAP32[($3_1 + 64 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0) {
      break label$9
     }
     break label$7;
    }
    HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 64 | 0) >> 2] | 0) >> 2] | 0;
    continue label$8;
   };
  }
  $87_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
  label$10 : {
   $91_1 = $3_1 + 80 | 0;
   if ($91_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $91_1;
  }
  return $87_1 | 0;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $18_1 = 0, $22_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!(((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $17_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0;
    $18_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $18_1 + 1 | 0;
    $22_1 = 24;
    HEAP32[($3_1 + 8 | 0) >> 2] = $17_1 ^ (((HEAPU8[$18_1 >> 0] | 0) << $22_1 | 0) >> $22_1 | 0) | 0;
    continue label$2;
   };
  }
  return (HEAP32[($3_1 + 8 | 0) >> 2] | 0) & 1023 | 0 | 0;
 }
 
 function $13($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $32_1 = 0, $48_1 = 0, $53_1 = 0, $141_1 = 0, $144_1 = 0, $189_1 = 0, $196_1 = 0, $215_1 = 0, $214_1 = 0, $77_1 = 0, $136_1 = 0;
  $4_1 = global$0 - 1088 | 0;
  label$1 : {
   $214_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $214_1;
  }
  HEAP32[($4_1 + 1084 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 1080 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 1072 | 0) >> 2] = 0;
  $12_1 = 0;
  label$3 : {
   if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0)) {
    break label$3
   }
   $12_1 = ((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0);
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = ($12_1 ^ -1 | 0) & 1 | 0;
  $14(HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 1056 | 0) >> 2] = $11(HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0) | 0;
  label$4 : {
   label$5 : {
    if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 1072 | 0) >> 2] = 1;
    break label$4;
   }
   $32_1 = 0;
   HEAP32[($4_1 + 1072 | 0) >> 2] = (HEAP32[($4_1 + 1056 | 0) >> 2] | 0 | 0) != ($32_1 | 0) & 1 | 0;
   label$6 : {
    if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != ($32_1 | 0) & 1 | 0)) {
     break label$6
    }
    $48_1 = 24;
    if (!(((HEAPU8[(0 + 12546 | 0) >> 0] | 0) << $48_1 | 0) >> $48_1 | 0)) {
     break label$6
    }
    $15(2094 | 0);
   }
  }
  label$7 : {
   label$8 : {
    if (HEAP32[($4_1 + 1072 | 0) >> 2] | 0) {
     break label$8
    }
    $53_1 = 79216;
    HEAP32[($4_1 + 1076 | 0) >> 2] = 0;
    HEAP32[($4_1 + 1068 | 0) >> 2] = $4_1 + 1076 | 0;
    HEAP32[($4_1 + 1060 | 0) >> 2] = $16(24 | 0) | 0;
    HEAP32[($4_1 + 1052 | 0) >> 2] = $12(HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(HEAP32[($4_1 + 1060 | 0) >> 2] | 0) >> 2] = HEAP32[($53_1 + ((HEAP32[($4_1 + 1052 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 4 | 0) >> 2] = 1;
    $77_1 = $145($16(($147(HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) | 0 | 0, HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 8 | 0) >> 2] = $77_1;
    HEAP8[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 12 | 0) >> 0] = 8;
    HEAP32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[(0 + 70356 | 0) >> 2] | 0;
    HEAP32[($53_1 + ((HEAP32[($4_1 + 1052 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 1060 | 0) >> 2] | 0;
    break label$7;
   }
   HEAP32[($4_1 + 1060 | 0) >> 2] = HEAP32[($4_1 + 1056 | 0) >> 2] | 0;
   label$9 : {
    if (!((HEAPU8[(0 + 75089 | 0) >> 0] | 0) & 1 | 0)) {
     break label$9
    }
    if (!((HEAP32[($4_1 + 1060 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$9
    }
    if (!((HEAP32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 70356 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    $17(25 | 0, 1 & 1 | 0 | 0, HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0) | 0;
   }
  }
  label$10 : {
   label$11 : {
    label$12 : while (1) {
     if (!(($172($4_1 + 16 | 0 | 0, 1024 | 0, HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     label$13 : {
      if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
       break label$13
      }
      $136_1 = HEAP32[(0 + 83312 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = $4_1 + 16 | 0;
      HEAP32[$4_1 >> 2] = $136_1;
      $173(2095 | 0, $4_1 | 0) | 0;
     }
     $141_1 = $4_1 + 16 | 0;
     $144_1 = HEAP32[(0 + 83312 | 0) >> 2] | 0;
     HEAP32[($144_1 + 12 | 0) >> 2] = (HEAP32[($144_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $18($141_1 | 0, 1 & 1 | 0 | 0) | 0;
     HEAP32[($4_1 + 1056 | 0) >> 2] = $10($141_1 | 0) | 0;
     label$14 : {
      if (!(((HEAPU8[(HEAP32[(0 + 83348 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
       break label$14
      }
      label$15 : {
       if (!((HEAP32[($4_1 + 1056 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$15
       }
       if (!(((HEAPU8[((HEAP32[($4_1 + 1056 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 128 | 0)) {
        break label$15
       }
       label$16 : {
        if (HEAP32[($4_1 + 1072 | 0) >> 2] | 0) {
         break label$16
        }
        HEAP32[((HEAP32[($4_1 + 1060 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($4_1 + 1076 | 0) >> 2] | 0;
       }
       break label$10;
      }
     }
     label$17 : {
      if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
       break label$17
      }
      if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$17
      }
      $189_1 = 24;
      if (!(((HEAPU8[(0 + 12546 | 0) >> 0] | 0) << $189_1 | 0) >> $189_1 | 0)) {
       break label$17
      }
      $15(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
     }
     label$18 : {
      if (HEAP32[($4_1 + 1072 | 0) >> 2] | 0) {
       break label$18
      }
      $196_1 = $4_1 + 16 | 0;
      HEAP32[($4_1 + 1064 | 0) >> 2] = $16(($147($196_1 | 0) | 0) + 5 | 0 | 0) | 0;
      $145((HEAP32[($4_1 + 1064 | 0) >> 2] | 0) + 4 | 0 | 0, $196_1 | 0) | 0;
      HEAP32[(HEAP32[($4_1 + 1068 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 1064 | 0) >> 2] | 0;
      HEAP32[($4_1 + 1068 | 0) >> 2] = HEAP32[($4_1 + 1064 | 0) >> 2] | 0;
     }
     continue label$12;
    };
   }
   $17(14 | 0, 1 & 1 | 0 | 0, 0 | 0) | 0;
  }
  label$19 : {
   $215_1 = $4_1 + 1088 | 0;
   if ($215_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $215_1;
  }
  return;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $17_1 = 0, $27_1 = 0, $36_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $7_1 = HEAPU8[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 0] | 0;
    HEAP8[($3_1 + 11 | 0) >> 0] = $7_1;
    if (!(($7_1 & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $17_1 = 24;
    label$3 : {
     if (!((((HEAPU8[($3_1 + 11 | 0) >> 0] | 0) << $17_1 | 0) >> $17_1 | 0 | 0) >= (65 | 0) & 1 | 0)) {
      break label$3
     }
     $27_1 = 24;
     if (!((((HEAPU8[($3_1 + 11 | 0) >> 0] | 0) << $27_1 | 0) >> $27_1 | 0 | 0) <= (90 | 0) & 1 | 0)) {
      break label$3
     }
     $36_1 = 24;
     HEAP8[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 0] = ((HEAPU8[($3_1 + 11 | 0) >> 0] | 0) << $36_1 | 0) >> $36_1 | 0 | 32 | 0;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $127_1 = 0, $17_1 = 0, $31_1 = 0, $55_1 = 0, $81_1 = 0, $147_1 = 0, $186_1 = 0, $187_1 = 0, $198_1 = 0, $197_1 = 0, $53_1 = 0, $57_1 = 0, $92_1 = 0, $145_1 = 0, $149_1 = 0, $151_1 = 0, $153_1 = 0, $154_1 = 0, $155_1 = 0, $181_1 = 0;
  $3_1 = global$0 - 112 | 0;
  label$1 : {
   $197_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $197_1;
  }
  HEAP32[($3_1 + 108 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if (!(((HEAPU8[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0) & 2 | 0)) {
     break label$4
    }
    break label$3;
   }
   $17_1 = 0;
   label$5 : {
    if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0)) {
     break label$5
    }
    $17_1 = ((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0);
   }
   $31_1 = 32;
   HEAP8[($3_1 + 107 | 0) >> 0] = $17_1 & 1 | 0 ? $31_1 : 45;
   HEAP8[($3_1 + 106 | 0) >> 0] = (HEAP32[(0 + 84944 | 0) >> 2] | 0) & 16 | 0 ? 85 : $31_1;
   HEAP32[($3_1 + 100 | 0) >> 2] = HEAP32[(0 + 70352 | 0) >> 2] | 0;
   HEAP32[($3_1 + 96 | 0) >> 2] = 2094;
   label$6 : {
    label$7 : {
     if (!((HEAP32[($3_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($3_1 + 96 | 0) >> 2] = 2473;
     break label$6;
    }
    HEAP32[($3_1 + 100 | 0) >> 2] = 2094;
   }
   $53_1 = HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $55_1 = 24;
   $57_1 = ((HEAPU8[($3_1 + 106 | 0) >> 0] | 0) << $55_1 | 0) >> $55_1 | 0;
   HEAP32[($3_1 + 72 | 0) >> 2] = $5(HEAP32[(0 + 84940 | 0) >> 2] | 0 | 0, (HEAP32[(0 + 84944 | 0) >> 2] | 0) & 7 | 0 | 0) | 0;
   HEAP32[($3_1 + 68 | 0) >> 2] = $57_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $53_1;
   $213(71904 | 0, 2475 | 0, $3_1 + 64 | 0 | 0) | 0;
   HEAP32[($3_1 + 88 | 0) >> 2] = $147(71904 | 0) | 0;
   HEAP32[($3_1 + 92 | 0) >> 2] = 0;
   label$8 : while (1) {
    $81_1 = 0;
    label$9 : {
     if (!((HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 75056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     $81_1 = (HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) < (4 | 0);
    }
    label$10 : {
     if (!($81_1 & 1 | 0)) {
      break label$10
     }
     $92_1 = 71904 + (HEAP32[($3_1 + 88 | 0) >> 2] | 0) | 0;
     HEAP32[$3_1 >> 2] = (HEAPU8[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 74032 | 0) >> 0] | 0) & 255 | 0;
     $213($92_1 | 0, 2485 | 0, $3_1 | 0) | 0;
     HEAP32[($3_1 + 92 | 0) >> 2] = (HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($3_1 + 88 | 0) >> 2] = (HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 3 | 0;
     continue label$8;
    }
    break label$8;
   };
   label$11 : {
    if (!((HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 75056 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    if (!((HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
     break label$11
    }
    HEAP8[($3_1 + 107 | 0) >> 0] = 42;
   }
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
      break label$12
     }
     $127_1 = 32;
     HEAP8[(((HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 2 | 0) + 71904 | 0) >> 0] = $127_1;
     HEAP8[(((HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 1 | 0) + 71904 | 0) >> 0] = $127_1;
     HEAP8[((HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 71904 | 0) >> 0] = $127_1;
     HEAP32[($3_1 + 88 | 0) >> 2] = (HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 3 | 0;
     HEAP32[($3_1 + 92 | 0) >> 2] = (HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
   $145_1 = (71904 + (HEAP32[($3_1 + 88 | 0) >> 2] | 0) | 0) + -1 | 0;
   $147_1 = 24;
   $149_1 = ((HEAPU8[($3_1 + 107 | 0) >> 0] | 0) << $147_1 | 0) >> $147_1 | 0;
   $151_1 = HEAP32[(0 + 83344 | 0) >> 2] | 0;
   $153_1 = HEAP32[(0 + 83348 | 0) >> 2] | 0;
   $154_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
   $155_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[(0 + 83352 | 0) >> 2] | 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = $155_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $154_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = $153_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $151_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $149_1;
   $213($145_1 | 0, 2491 | 0, $3_1 + 32 | 0 | 0) | 0;
   label$14 : {
    if (!(((HEAPU8[(HEAP32[($3_1 + 108 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$14
    }
    HEAP32[($3_1 + 88 | 0) >> 2] = ($147(71904 | 0) | 0) - 1 | 0;
    $181_1 = 71904 + (HEAP32[($3_1 + 88 | 0) >> 2] | 0) | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
    $213($181_1 | 0, 2510 | 0, $3_1 + 16 | 0 | 0) | 0;
   }
   $186_1 = 0;
   $187_1 = 72960;
   $169($187_1 | 0, $19(71904 | 0, $187_1 | 0) | 0 | 0, 1 | 0, HEAP32[(0 + 84928 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(0 + 75056 | 0) >> 2] = $186_1;
   HEAP32[(0 + 70352 | 0) >> 2] = $186_1;
  }
  label$15 : {
   $198_1 = $3_1 + 112 | 0;
   if ($198_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $198_1;
  }
  return;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $21_1 = 0, $60_1 = 0, $59_1 = 0, $56_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $59_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $59_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = (((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) - 1 | 0) & -4 | 0;
  label$3 : {
   if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 71896 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$3
   }
   $21_1 = $398(16384 | 0) | 0;
   HEAP32[(0 + 71892 | 0) >> 2] = $21_1;
   label$4 : {
    if (!(($21_1 | 0) == (0 | 0) & 1 | 0)) {
     break label$4
    }
    $4(2325 | 0);
   }
   $405(HEAP32[(0 + 71892 | 0) >> 2] | 0 | 0, 0 | 0, 16384 | 0) | 0;
   HEAP32[(0 + 71896 | 0) >> 2] = 16384;
   label$5 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 71896 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $4(2342 | 0);
   }
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(0 + 71892 | 0) >> 2] | 0;
  HEAP32[(0 + 71892 | 0) >> 2] = (HEAP32[(0 + 71892 | 0) >> 2] | 0) + (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0;
  HEAP32[(0 + 71896 | 0) >> 2] = (HEAP32[(0 + 71896 | 0) >> 2] | 0) - (HEAP32[($3_1 + 12 | 0) >> 2] | 0) | 0;
  $56_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$6 : {
   $60_1 = $3_1 + 16 | 0;
   if ($60_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $60_1;
  }
  return $56_1 | 0;
 }
 
 function $17($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $187_1 = 0, $64_1 = 0, $69_1 = 0, $163_1 = 0, $180_1 = 0, $205_1 = 0, $204_1 = 0, $80_1 = 0, $82_1 = 0, $89_1 = 0, $104_1 = 0, $106_1 = 0, $113_1 = 0, $128_1 = 0, $130_1 = 0, $137_1 = 0, $154_1 = 0, $155_1 = 0, $172_1 = 0, $201_1 = 0;
  $5_1 = global$0 - 160 | 0;
  label$1 : {
   $204_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $204_1;
  }
  HEAP32[($5_1 + 152 | 0) >> 2] = $0_1;
  HEAP8[($5_1 + 151 | 0) >> 0] = $1_1;
  HEAP32[($5_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 132 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($5_1 + 152 | 0) >> 2] | 0) >>> 0 >= 39 >>> 0 & 1 | 0) {
      break label$5
     }
     if (!((HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
      break label$4
     }
    }
    HEAP32[($5_1 + 156 | 0) >> 2] = $17(29 | 0, 1 & 1 | 0 | 0, 2198 | 0) | 0;
    break label$3;
   }
   label$6 : {
    if (!((HEAPU8[((12064 + Math_imul(HEAP32[($5_1 + 152 | 0) >> 2] | 0, 12) | 0) + 4 | 0) >> 0] | 0) & 1 | 0)) {
     break label$6
    }
    HEAP8[(0 + 69304 | 0) >> 0] = 1;
   }
   HEAP32[($5_1 + 136 | 0) >> 2] = HEAP32[(0 + 83312 | 0) >> 2] | 0;
   label$7 : {
    label$8 : while (1) {
     if (!(((HEAPU8[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($5_1 + 136 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 136 | 0) >> 2] | 0) >> 2] | 0;
     continue label$8;
    };
   }
   HEAP32[($5_1 + 140 | 0) >> 2] = HEAP32[((12064 + Math_imul(HEAP32[($5_1 + 152 | 0) >> 2] | 0, 12) | 0) + 8 | 0) >> 2] | 0;
   label$9 : {
    label$10 : {
     if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$10
     }
     $64_1 = HEAP32[(0 + 84928 | 0) >> 2] | 0;
     break label$9;
    }
    $64_1 = HEAP32[(0 + 9712 | 0) >> 2] | 0;
   }
   HEAP32[($5_1 + 132 | 0) >> 2] = $64_1;
   $69_1 = HEAP32[(0 + 75112 | 0) >> 2] | 0;
   label$11 : {
    label$12 : {
     if ($69_1 >>> 0 > 2 >>> 0) {
      break label$12
     }
     label$13 : {
      switch ($69_1 | 0) {
      default:
       label$16 : {
        if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 9712 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$16
        }
        $80_1 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
        $82_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        HEAP32[($5_1 + 48 | 0) >> 2] = $82_1;
        $196($80_1 | 0, 2215 | 0, $5_1 + 48 | 0 | 0) | 0;
       }
       $89_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       HEAP32[($5_1 + 32 | 0) >> 2] = $89_1;
       $213(70368 | 0, 2215 | 0, $5_1 + 32 | 0 | 0) | 0;
       break label$11;
      case 1:
       label$17 : {
        if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 9712 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$17
        }
        $104_1 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
        $106_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($5_1 + 80 | 0) >> 2] = $106_1;
        $196($104_1 | 0, 2233 | 0, $5_1 + 80 | 0 | 0) | 0;
       }
       $113_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       HEAP32[($5_1 + 64 | 0) >> 2] = $113_1;
       $213(70368 | 0, 2233 | 0, $5_1 + 64 | 0 | 0) | 0;
       break label$11;
      case 2:
       break label$13;
      };
     }
     label$18 : {
      if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 9712 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$18
      }
      $128_1 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
      $130_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      HEAP32[($5_1 + 116 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      HEAP32[($5_1 + 112 | 0) >> 2] = $130_1;
      $196($128_1 | 0, 2250 | 0, $5_1 + 112 | 0 | 0) | 0;
     }
     $137_1 = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 136 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 96 | 0) >> 2] = $137_1;
     $213(70368 | 0, 2250 | 0, $5_1 + 96 | 0 | 0) | 0;
     break label$11;
    }
    $4(2266 | 0);
   }
   label$19 : {
    if (!((HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 9712 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$19
    }
    $154_1 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
    $155_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
    label$20 : {
     label$21 : {
      if (!((HEAP32[($5_1 + 144 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$21
      }
      $163_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
      break label$20;
     }
     $163_1 = 2094;
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = $163_1;
    $196($154_1 | 0, $155_1 | 0, $5_1 + 16 | 0 | 0) | 0;
    $196(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, 2304 | 0, 0 | 0) | 0;
   }
   $172_1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
   label$22 : {
    label$23 : {
     if (!((HEAP32[($5_1 + 144 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$23
     }
     $180_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
     break label$22;
    }
    $180_1 = 2094;
   }
   HEAP32[$5_1 >> 2] = $180_1;
   $213(70880 | 0, $172_1 | 0, $5_1 | 0) | 0;
   $213(71392 | 0, 2304 | 0, 0 | 0) | 0;
   $187_1 = 0;
   $3($187_1 | 0, 70368 | 0);
   $3($187_1 | 0, 70880 | 0);
   $3($187_1 | 0, 71392 | 0);
   label$24 : {
    if (!((HEAPU8[($5_1 + 151 | 0) >> 0] | 0) & 1 | 0)) {
     break label$24
    }
    $20(1 | 0);
    $196(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0, 2306 | 0, 0 | 0) | 0;
    $20(0 | 0);
    fimport$0(1 | 0);
    abort();
   }
   HEAP32[($5_1 + 156 | 0) >> 2] = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
  }
  $201_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
  label$25 : {
   $205_1 = $5_1 + 160 | 0;
   if ($205_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $205_1;
  }
  return $201_1 | 0;
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $19_1 = 0, $45_1 = 0, $58_1 = 0, $68_1 = 0, $78_1 = 0, $94_1 = 0, $97_1 = 0, $101_1 = 0, $113_1 = 0, $129_1 = 0, $156_1 = 0, $165_1 = 0, $168_1 = 0, $172_1 = 0, $190_1 = 0, $222_1 = 0, $316_1 = 0, $374_1 = 0, $380_1 = 0, $398_1 = 0, $397_1 = 0, $212_1 = 0, $246_1 = 0, $255_1 = 0, $283_1 = 0, $284_1 = 0, $285_1 = 0, $334_1 = 0, $394_1 = 0;
  $4_1 = global$0 - 80 | 0;
  label$1 : {
   $397_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $397_1;
  }
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 75 | 0) >> 0] = $1_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = 2094;
  HEAP32[($4_1 + 68 | 0) >> 2] = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     if (!(((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$4
     }
     $19_1 = HEAP8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0;
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          if (($19_1 | 0) == (9 | 0)) {
           break label$10
          }
          label$11 : {
           if (($19_1 | 0) == (10 | 0)) {
            break label$11
           }
           if (($19_1 | 0) == (13 | 0)) {
            break label$11
           }
           if (($19_1 | 0) == (34 | 0)) {
            break label$8
           }
           if (($19_1 | 0) == (39 | 0)) {
            break label$9
           }
           label$12 : {
            if (($19_1 | 0) == (59 | 0)) {
             break label$12
            }
            if (($19_1 | 0) == (123 | 0)) {
             break label$7
            }
            break label$6;
           }
           HEAP32[($4_1 + 52 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
          }
          break label$3;
         }
         HEAP8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] = 32;
         break label$6;
        }
        HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
        $45_1 = 24;
        label$13 : {
         if (!((((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $45_1 | 0) >> $45_1 | 0 | 0) == (9 | 0) & 1 | 0)) {
          break label$13
         }
         HEAP8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] = 32;
        }
        $58_1 = 24;
        label$14 : {
         label$15 : {
          if ((((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $58_1 | 0) >> $58_1 | 0 | 0) == (10 | 0) & 1 | 0) {
           break label$15
          }
          $68_1 = 24;
          if (((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $68_1 | 0) >> $68_1 | 0) {
           break label$14
          }
         }
         HEAP8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] = 32;
         HEAP8[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0) >> 0] = 0;
        }
        $78_1 = 24;
        label$16 : {
         if (!((((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $78_1 | 0) >> $78_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
          break label$16
         }
         HEAP8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] = 128;
        }
        break label$6;
       }
       HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
       label$17 : while (1) {
        $94_1 = 24;
        $97_1 = 0;
        label$18 : {
         if (!(((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $94_1 | 0) >> $94_1 | 0)) {
          break label$18
         }
         $101_1 = 24;
         $97_1 = (((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $101_1 | 0) >> $101_1 | 0 | 0) != (34 | 0);
        }
        label$19 : {
         if (!($97_1 & 1 | 0)) {
          break label$19
         }
         $113_1 = 24;
         label$20 : {
          if (!((((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $113_1 | 0) >> $113_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
           break label$20
          }
          HEAP8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] = 128;
         }
         HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
         continue label$17;
        }
        break label$17;
       };
       $129_1 = 24;
       label$21 : {
        if (!((((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $129_1 | 0) >> $129_1 | 0 | 0) != (34 | 0) & 1 | 0)) {
         break label$21
        }
        $17(6 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + -1 | 0;
       }
       break label$6;
      }
      label$22 : {
       if (!((HEAPU8[($4_1 + 75 | 0) >> 0] | 0) & 1 | 0)) {
        break label$22
       }
       break label$6;
      }
      label$23 : {
       if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
        break label$23
       }
       HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
       $173(2515 | 0, $4_1 + 48 | 0 | 0) | 0;
      }
      $156_1 = 0;
      HEAP32[($4_1 + 60 | 0) >> 2] = $153((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0 | 0, $156_1 | 0, 10 | 0) | 0;
      HEAP32[($4_1 + 56 | 0) >> 2] = $156_1;
      label$24 : while (1) {
       $165_1 = 24;
       $168_1 = 0;
       label$25 : {
        if (!(((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $165_1 | 0) >> $165_1 | 0)) {
         break label$25
        }
        $172_1 = 24;
        $168_1 = (((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $172_1 | 0) >> $172_1 | 0 | 0) != (125 | 0);
       }
       label$26 : {
        if (!($168_1 & 1 | 0)) {
         break label$26
        }
        HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
        continue label$24;
       }
       break label$24;
      };
      $190_1 = 24;
      label$27 : {
       if (!((((HEAPU8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] | 0) << $190_1 | 0) >> $190_1 | 0 | 0) != (125 | 0) & 1 | 0)) {
        break label$27
       }
       $197(2533 | 0) | 0;
       HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + -1 | 0;
       break label$6;
      }
      HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
      label$28 : {
       if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
        break label$28
       }
       $212_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
       HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
       HEAP32[($4_1 + 32 | 0) >> 2] = $212_1;
       $173(2552 | 0, $4_1 + 32 | 0 | 0) | 0;
      }
      HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
      label$29 : while (1) {
       $222_1 = 0;
       label$30 : {
        if (!(HEAP32[($4_1 + 60 | 0) >> 2] | 0)) {
         break label$30
        }
        $222_1 = (HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0);
       }
       label$31 : {
        if (!($222_1 & 1 | 0)) {
         break label$31
        }
        HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 2] | 0;
        continue label$29;
       }
       break label$29;
      };
      label$32 : {
       label$33 : {
        if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$33
        }
        $246_1 = $147((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
        HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + $246_1 | 0;
        label$34 : {
         if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
          break label$34
         }
         $255_1 = (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0;
         HEAP32[($4_1 + 20 | 0) >> 2] = $147((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
         HEAP32[($4_1 + 16 | 0) >> 2] = $255_1;
         $173(2570 | 0, $4_1 + 16 | 0 | 0) | 0;
        }
        label$35 : {
         if (!(((((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + (HEAP32[($4_1 + 56 | 0) >> 2] | 0) | 0) + ($147(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0) | 0) + 1 | 0) >>> 0 > ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1024 | 0) >>> 0 & 1 | 0)) {
          break label$35
         }
         label$36 : {
          if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
           break label$36
          }
          $283_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
          $284_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
          $285_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
          HEAP32[($4_1 + 12 | 0) >> 2] = $147(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($4_1 + 8 | 0) >> 2] = $285_1;
          HEAP32[($4_1 + 4 | 0) >> 2] = $284_1;
          HEAP32[$4_1 >> 2] = $283_1;
          $173(2589 | 0, $4_1 | 0) | 0;
         }
         $4(2634 | 0);
        }
        $406((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + (HEAP32[($4_1 + 56 | 0) >> 2] | 0) | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0, ($147(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) | 0;
        HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + (HEAP32[($4_1 + 56 | 0) >> 2] | 0) | 0;
        label$37 : {
         if (!(((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + (0 - ($147((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) | 0) | 0) >>> 0 < (HEAP32[($4_1 + 76 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$37
         }
         $4(2643 | 0);
        }
        $316_1 = 0;
        $406((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ($316_1 - ($147((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) | 0) | 0 | 0, (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0 | 0, $147((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) | 0;
        $334_1 = $147((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
        HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ($316_1 - $334_1 | 0) | 0;
        label$38 : {
         label$39 : {
          if ((HEAP32[($4_1 + 68 | 0) >> 2] | 0) >>> 0 < (HEAP32[($4_1 + 76 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
           break label$39
          }
          if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1024 | 0) >>> 0 & 1 | 0)) {
           break label$38
          }
         }
         $4(2652 | 0);
        }
        HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + -1 | 0;
        break label$32;
       }
       $17(13 | 0, 0 & 1 | 0 | 0, 0 | 0) | 0;
       break label$3;
      }
     }
     HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
  }
  label$40 : while (1) {
   $374_1 = 0;
   label$41 : {
    if (!((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$41
    }
    $380_1 = 24;
    $374_1 = (((HEAPU8[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + -1 | 0) >> 0] | 0) << $380_1 | 0) >> $380_1 | 0 | 0) == (32 | 0);
   }
   label$42 : {
    if (!($374_1 & 1 | 0)) {
     break label$42
    }
    HEAP32[($4_1 + 68 | 0) >> 2] = (HEAP32[($4_1 + 68 | 0) >> 2] | 0) + -1 | 0;
    continue label$40;
   }
   break label$40;
  };
  HEAP8[(HEAP32[($4_1 + 68 | 0) >> 2] | 0) >> 0] = 0;
  $394_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
  label$43 : {
   $398_1 = $4_1 + 80 | 0;
   if ($398_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $398_1;
  }
  return $394_1 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $14_1 = 0, $18_1 = 0, $33_1 = 0, $49_1 = 0, $55_1 = 0, $83_1 = 0, $96_1 = 0, $107_1 = 0, $115_1 = 0, $119_1 = 0, $132_1 = 0, $154_1 = 0, $161_1 = 0, $169_1 = 0, $175_1 = 0, $190_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$1 : while (1) {
   $11_1 = 24;
   $14_1 = 0;
   label$2 : {
    if (!(((HEAPU8[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 0] | 0) << $11_1 | 0) >> $11_1 | 0)) {
     break label$2
    }
    $18_1 = 24;
    $14_1 = (((HEAPU8[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 0] | 0) << $18_1 | 0) >> $18_1 | 0 | 0) != (10 | 0);
   }
   label$3 : {
    if (!($14_1 & 1 | 0)) {
     break label$3
    }
    HEAP8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 0] | 0;
    $33_1 = 24;
    label$4 : {
     if (!((((HEAPU8[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 0] | 0) << $33_1 | 0) >> $33_1 | 0 | 0) == (9 | 0) & 1 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      $49_1 = 0;
      label$6 : {
       if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$6
       }
       $55_1 = 24;
       $49_1 = (((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0) >> 0] | 0) << $55_1 | 0) >> $55_1 | 0 | 0) == (32 | 0);
      }
      label$7 : {
       if (!($49_1 & 1 | 0)) {
        break label$7
       }
       HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + -1 | 0;
       continue label$5;
      }
      break label$5;
     };
     HEAP32[($4_1 + 12 | 0) >> 2] = 0;
     HEAP8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] = 9;
    }
    label$8 : {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
      break label$8
     }
     $83_1 = 24;
     if (!((((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $83_1 | 0) >> $83_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$8
     }
     $96_1 = 24;
     if (!((((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0) >> 0] | 0) << $96_1 | 0) >> $96_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     label$9 : while (1) {
      $107_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = $107_1 + -1 | 0;
      $115_1 = 0;
      label$10 : {
       if (!(($107_1 | 0) >= (0 | 0) & 1 | 0)) {
        break label$10
       }
       $119_1 = 24;
       $115_1 = (((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $119_1 | 0) >> $119_1 | 0 | 0) == (32 | 0);
      }
      label$11 : {
       if (!($115_1 & 1 | 0)) {
        break label$11
       }
       HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0;
       continue label$9;
      }
      break label$9;
     };
     $132_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $132_1 + 1 | 0;
     HEAP8[($132_1 + 1 | 0) >> 0] = 9;
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
    continue label$1;
   }
   break label$1;
  };
  label$12 : while (1) {
   $154_1 = 0;
   label$13 : {
    if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$13
    }
    $161_1 = 24;
    $169_1 = 1;
    label$14 : {
     if ((((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0) >> 0] | 0) << $161_1 | 0) >> $161_1 | 0 | 0) == (32 | 0) & 1 | 0) {
      break label$14
     }
     $175_1 = 24;
     $169_1 = (((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0) >> 0] | 0) << $175_1 | 0) >> $175_1 | 0 | 0) == (9 | 0);
    }
    $154_1 = $169_1;
   }
   label$15 : {
    if (!($154_1 & 1 | 0)) {
     break label$15
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -1 | 0;
    continue label$12;
   }
   break label$12;
  };
  $190_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $190_1 + 1 | 0;
  HEAP8[$190_1 >> 0] = 10;
  HEAP8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] = 0;
  return (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $20($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $28_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $27_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if (!((HEAP32[(69296 + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$3
   }
   $3(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2094 | 0);
  }
  HEAP32[$3_1 >> 2] = HEAP32[(69296 + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  $173(2469 | 0, $3_1 | 0) | 0;
  label$4 : {
   $28_1 = $3_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $28_1;
  }
  return;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $40_1 = 0, $57_1 = 0, $78_1 = 0, $77_1 = 0;
  $3_1 = global$0 - 96 | 0;
  label$1 : {
   $77_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $77_1;
  }
  HEAP32[($3_1 + 92 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    $12_1 = 0;
    $404($3_1 | 0, (HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 20 | 0 | 0, 84 | 0) | 0;
    HEAP32[($3_1 + 84 | 0) >> 2] = $12_1;
    HEAP32[($3_1 + 88 | 0) >> 2] = $12_1;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) < (21 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[(((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 20 | 0) + ((HEAP32[($3_1 + 88 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
      label$7 : {
       if (!((HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & (1 << (HEAP32[($3_1 + 88 | 0) >> 2] | 0) | 0) | 0)) {
        break label$7
       }
       $40_1 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
       HEAP32[($3_1 + 84 | 0) >> 2] = $40_1 + 1 | 0;
       HEAP32[(((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 20 | 0) + ((HEAP32[($3_1 + 88 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + ($40_1 << 2 | 0) | 0) >> 2] | 0;
      }
      HEAP32[($3_1 + 88 | 0) >> 2] = (HEAP32[($3_1 + 88 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    $57_1 = 79216;
    HEAP32[($3_1 + 88 | 0) >> 2] = $12(HEAP32[((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[(HEAP32[($3_1 + 92 | 0) >> 2] | 0) >> 2] = HEAP32[($57_1 + ((HEAP32[($3_1 + 88 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($57_1 + ((HEAP32[($3_1 + 88 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
    HEAP32[($3_1 + 92 | 0) >> 2] = (HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 104 | 0;
    continue label$4;
   };
  }
  label$8 : {
   $78_1 = $3_1 + 96 | 0;
   if ($78_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $78_1;
  }
  return;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $35_1 = 0, $63_1 = 0, $95_1 = 0, $94_1 = 0, $39_1 = 0, $59_1 = 0, $60_1 = 0, $65_1 = 0, $81_1 = 0;
  $3_1 = global$0 - 48 | 0;
  label$1 : {
   $94_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $94_1;
  }
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  $7_1 = $44(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0, 2105 | 0) | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = $7_1;
  label$3 : {
   label$4 : {
    if (!(($7_1 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : {
     if (!(((HEAPU8[(0 + 84916 | 0) >> 0] | 0) & 255 | 0 | 0) > (1 | 0) & 1 | 0)) {
      break label$5
     }
     if (!(((HEAPU8[(0 + 84916 | 0) >> 0] | 0) & 255 | 0 | 0) != (5 | 0) & 1 | 0)) {
      break label$5
     }
     $35_1 = 24;
     $39_1 = (((HEAPU8[(0 + 84884 | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0) << 2 | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = 2094;
     HEAP32[($3_1 + 16 | 0) >> 2] = $39_1;
     $173(2108 | 0, $3_1 + 16 | 0 | 0) | 0;
    }
    HEAP8[(0 + 84884 | 0) >> 0] = (HEAPU8[(0 + 84884 | 0) >> 0] | 0) + 1 | 0;
    label$6 : {
     if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $59_1 = HEAP32[(0 + 84928 | 0) >> 2] | 0;
     $60_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     $63_1 = 24;
     $65_1 = ((HEAPU8[(0 + 84884 | 0) >> 0] | 0) << $63_1 | 0) >> $63_1 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(0 + 70356 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $65_1;
     HEAP32[$3_1 >> 2] = $60_1;
     $196($59_1 | 0, 2134 | 0, $3_1 | 0) | 0;
    }
    HEAP32[($3_1 + 40 | 0) >> 2] = $23(36 | 0) | 0;
    HEAP32[(HEAP32[($3_1 + 40 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 83312 | 0) >> 2] | 0;
    $81_1 = $145($24(($147(HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) | 0 | 0, HEAP32[($3_1 + 44 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] = $81_1;
    HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
    HEAP32[(0 + 83312 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
   $173(2168 | 0, $3_1 + 32 | 0 | 0) | 0;
  }
  label$7 : {
   $95_1 = $3_1 + 48 | 0;
   if ($95_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $95_1;
  }
  return;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $20_1 = 0, $19_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $24(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   $405(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  $16_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   $20_1 = $3_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  return $16_1 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $20_1 = 0, $19_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $398(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   $4(2325 | 0);
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  $16_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $20_1 = $3_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  return $16_1 | 0;
 }
 
 function $25($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $37_1 = 0, $36_1 = 0, $33_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $36_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $36_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP8[($4_1 + 19 | 0) >> 0] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $26(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $4_1 + 19 | 0 | 0) | 0;
  label$3 : {
   if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
    break label$3
   }
   if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (5 | 0) & 1 | 0)) {
    break label$3
   }
   $20(1 | 0);
   $20(0 | 0);
   HEAP32[$4_1 >> 2] = HEAP32[((12064 + Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, 12) | 0) + 8 | 0) >> 2] | 0;
   $173(2357 | 0, $4_1 | 0) | 0;
  }
  $27((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 1 | 0 | 0);
  $28();
  $33_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$4 : {
   $37_1 = $4_1 + 32 | 0;
   if ($37_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $37_1;
  }
  return $33_1 | 0;
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $260_1 = 0, $300_1 = 0, $9_1 = 0, $61_1 = 0, $572 = 0, $684 = 0, $754 = 0, $35_1 = 0, $51_1 = 0, $73_1 = 0, $76_1 = 0, $97_1 = 0, $129_1 = 0, $148_1 = 0, $151_1 = 0, $155_1 = 0, $170_1 = 0, $201_1 = 0, $259_1 = 0, $274_1 = 0, $341_1 = 0, $396_1 = 0, $442 = 0, $448 = 0, $527 = 0, $540 = 0, $745 = 0, $781 = 0, $780 = 0, $268_1 = 0, $336_1 = 0, $435 = 0, $597 = 0, $777 = 0;
  $5_1 = global$0 - 1280 | 0;
  label$1 : {
   $780 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $780;
  }
  $9_1 = 0;
  HEAP32[($5_1 + 1272 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 1268 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 1264 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 1260 | 0) >> 2] = $9_1;
  HEAP8[($5_1 + 1259 | 0) >> 0] = 0;
  HEAP32[($5_1 + 212 | 0) >> 2] = -1;
  HEAP32[($5_1 + 208 | 0) >> 2] = $9_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $9_1;
  $21(12720 | 0);
  HEAP32[(0 + 70356 | 0) >> 2] = 1;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!((HEAP32[($5_1 + 1272 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
      break label$5
     }
     break label$4;
    }
    HEAP32[($5_1 + 220 | 0) >> 2] = 2;
    label$6 : while (1) {
     label$7 : {
      label$8 : {
       label$9 : {
        if (!((HEAP32[($5_1 + 220 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 1272 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$9
        }
        $35_1 = 24;
        label$10 : {
         label$11 : {
          if ((((HEAPU8[(HEAP32[((HEAP32[($5_1 + 1268 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 220 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0 | 0) == (45 | 0) & 1 | 0) {
           break label$11
          }
          $51_1 = 24;
          if (!((((HEAPU8[(HEAP32[((HEAP32[($5_1 + 1268 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 220 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 0] | 0) << $51_1 | 0) >> $51_1 | 0 | 0) == (47 | 0) & 1 | 0)) {
           break label$10
          }
         }
         $61_1 = 2;
         HEAP32[($5_1 + 200 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 1268 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 220 | 0) >> 2] | 0) << $61_1 | 0) | 0) >> 2] | 0) + $61_1 | 0;
         $73_1 = (HEAP8[((HEAP32[((HEAP32[($5_1 + 1268 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 220 | 0) >> 2] | 0) << $61_1 | 0) | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) + -68 | 0;
         label$12 : {
          if ($73_1 >>> 0 > 50 >>> 0) {
           break label$12
          }
          label$13 : {
           switch ($73_1 | 0) {
           case 1:
            $76_1 = 0;
            HEAP32[(0 + 75112 | 0) >> 2] = $153(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, $76_1 | 0, 10 | 0) | 0;
            label$27 : {
             label$28 : {
              if ((HEAP32[(0 + 75112 | 0) >> 2] | 0) >>> 0 < $76_1 >>> 0 & 1 | 0) {
               break label$28
              }
              if (!((HEAP32[(0 + 75112 | 0) >> 2] | 0) >>> 0 >= 3 >>> 0 & 1 | 0)) {
               break label$27
              }
             }
             $4(3783 | 0);
            }
            break label$7;
           case 16:
            $97_1 = 0;
            HEAP32[(0 + 75108 | 0) >> 2] = $153(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, $97_1 | 0, 10 | 0) | 0;
            label$29 : {
             label$30 : {
              if ((HEAP32[(0 + 75108 | 0) >> 2] | 0) >>> 0 < $97_1 >>> 0 & 1 | 0) {
               break label$30
              }
              if (!((HEAP32[(0 + 75108 | 0) >> 2] | 0) >>> 0 >= 2 >>> 0 & 1 | 0)) {
               break label$29
              }
             }
             $4(3828 | 0);
            }
            HEAP8[(HEAP32[($5_1 + 1264 | 0) >> 2] | 0) >> 0] = (HEAP32[(0 + 75108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0;
            break label$7;
           case 32:
            $129_1 = 0;
            HEAP8[(0 + 84908 | 0) >> 0] = ($153(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, $129_1 | 0, 10 | 0) | 0 | 0) != ($129_1 | 0) & 1 | 0;
            HEAP32[$5_1 >> 2] = (HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0 ? 3895 : 3898;
            $173(3879 | 0, $5_1 | 0) | 0;
            break label$7;
           default:
            label$31 : while (1) {
             $148_1 = 24;
             $151_1 = 0;
             label$32 : {
              if (!(((HEAPU8[(HEAP32[($5_1 + 200 | 0) >> 2] | 0) >> 0] | 0) << $148_1 | 0) >> $148_1 | 0)) {
               break label$32
              }
              $155_1 = 24;
              $151_1 = (((HEAPU8[(HEAP32[($5_1 + 200 | 0) >> 2] | 0) >> 0] | 0) << $155_1 | 0) >> $155_1 | 0 | 0) != (61 | 0);
             }
             label$33 : {
              if (!($151_1 & 1 | 0)) {
               break label$33
              }
              HEAP32[($5_1 + 200 | 0) >> 2] = (HEAP32[($5_1 + 200 | 0) >> 2] | 0) + 1 | 0;
              continue label$31;
             }
             break label$31;
            };
            $170_1 = 24;
            label$34 : {
             label$35 : {
              if (!((((HEAPU8[(HEAP32[($5_1 + 200 | 0) >> 2] | 0) >> 0] | 0) << $170_1 | 0) >> $170_1 | 0 | 0) == (61 | 0) & 1 | 0)) {
               break label$35
              }
              HEAP8[(HEAP32[($5_1 + 200 | 0) >> 2] | 0) >> 0] = 0;
              HEAP32[($5_1 + 200 | 0) >> 2] = (HEAP32[($5_1 + 200 | 0) >> 2] | 0) + 1 | 0;
              break label$34;
             }
             HEAP32[($5_1 + 200 | 0) >> 2] = 3902;
            }
            HEAP32[(0 + 83344 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 1268 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 220 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 2 | 0;
            $201_1 = 24;
            label$36 : {
             label$37 : {
              if (!((((HEAPU8[((HEAP32[((HEAP32[($5_1 + 1268 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 220 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $201_1 | 0) >> $201_1 | 0 | 0) == (77 | 0) & 1 | 0)) {
               break label$37
              }
              $59(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0);
              break label$36;
             }
             $61(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0);
            }
            break label$7;
           case 34:
            HEAP32[(0 + 12548 | 0) >> 2] = $153(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, 10 | 0) | 0;
            label$38 : {
             label$39 : {
              if ((HEAP32[(0 + 12548 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0) {
               break label$39
              }
              if (!((HEAP32[(0 + 12548 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
               break label$38
              }
             }
             $4(3904 | 0);
            }
            break label$7;
           case 43:
            HEAP32[(0 + 12552 | 0) >> 2] = HEAP32[($5_1 + 200 | 0) >> 2] | 0;
            break label$8;
           case 8:
            HEAP8[(0 + 69305 | 0) >> 0] = 1;
           case 40:
            HEAP32[(0 + 84920 | 0) >> 2] = HEAP32[($5_1 + 200 | 0) >> 2] | 0;
            break label$8;
           case 12:
            HEAP8[($5_1 + 1259 | 0) >> 0] = 1;
           case 44:
            HEAP32[(0 + 12532 | 0) >> 2] = $153(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, 10 | 0) | 0;
            break label$7;
           case 47:
            HEAP32[(0 + 84924 | 0) >> 2] = HEAP32[($5_1 + 200 | 0) >> 2] | 0;
            break label$8;
           case 50:
            HEAP8[(0 + 84916 | 0) >> 0] = $153(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0, 10 | 0) | 0;
            break label$7;
           case 5:
            $74(HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0, 0 | 0);
            break label$7;
           case 2:
           case 3:
           case 4:
           case 6:
           case 7:
           case 10:
           case 11:
           case 13:
           case 14:
           case 17:
           case 18:
           case 19:
           case 20:
           case 21:
           case 22:
           case 23:
           case 24:
           case 25:
           case 26:
           case 27:
           case 28:
           case 29:
           case 30:
           case 31:
           case 33:
           case 35:
           case 36:
           case 37:
           case 38:
           case 39:
           case 41:
           case 42:
           case 45:
           case 46:
           case 48:
           case 49:
            break label$12;
           case 15:
            break label$13;
           };
          }
          HEAP8[(0 + 75089 | 0) >> 0] = 1;
          break label$7;
         }
         break label$4;
        }
        break label$4;
       }
       $259_1 = 0;
       $260_1 = 1;
       HEAP32[($5_1 + 196 | 0) >> 2] = $16(32 | 0) | 0;
       $268_1 = $145($16(21 | 0) | 0 | 0, 3963 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 196 | 0) >> 2] | 0) + 4 | 0) >> 2] = $268_1;
       HEAP8[((HEAP32[($5_1 + 196 | 0) >> 2] | 0) + 29 | 0) >> 0] = $260_1;
       HEAP8[((HEAP32[($5_1 + 196 | 0) >> 2] | 0) + 28 | 0) >> 0] = $260_1;
       HEAP8[((HEAP32[($5_1 + 196 | 0) >> 2] | 0) + 9 | 0) >> 0] = $260_1;
       HEAP8[((HEAP32[($5_1 + 196 | 0) >> 2] | 0) + 8 | 0) >> 0] = $260_1;
       $274_1 = HEAP32[($5_1 + 196 | 0) >> 2] | 0;
       HEAP32[(0 + 83320 | 0) >> 2] = $274_1;
       HEAP32[(0 + 83324 | 0) >> 2] = $274_1;
       HEAP32[($5_1 + 192 | 0) >> 2] = $23(12 | 0) | 0;
       HEAP32[((HEAP32[($5_1 + 192 | 0) >> 2] | 0) + 4 | 0) >> 2] = $259_1;
       HEAP8[((HEAP32[($5_1 + 192 | 0) >> 2] | 0) + 8 | 0) >> 0] = 4;
       HEAP8[((HEAP32[($5_1 + 192 | 0) >> 2] | 0) + 10 | 0) >> 0] = $260_1;
       HEAP8[((HEAP32[($5_1 + 192 | 0) >> 2] | 0) + 9 | 0) >> 0] = $260_1;
       HEAP32[(0 + 83328 | 0) >> 2] = HEAP32[($5_1 + 192 | 0) >> 2] | 0;
       $29($259_1 | 0);
       $29(1 | 0);
       label$40 : while (1) {
        label$41 : {
         if (!(((HEAPU8[(0 + 84916 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break label$41
         }
         $197(2094 | 0) | 0;
         HEAP32[($5_1 + 96 | 0) >> 2] = HEAP32[(0 + 70356 | 0) >> 2] | 0;
         $173(3984 | 0, $5_1 + 96 | 0 | 0) | 0;
        }
        $300_1 = 0;
        HEAP32[(0 + 84896 | 0) >> 2] = $300_1;
        HEAP32[(0 + 84892 | 0) >> 2] = $300_1;
        HEAP32[(0 + 84904 | 0) >> 2] = $300_1;
        HEAP32[(0 + 84900 | 0) >> 2] = $300_1;
        HEAP32[(0 + 84932 | 0) >> 2] = $209(HEAP32[(0 + 12552 | 0) >> 2] | 0 | 0, 4003 | 0) | 0;
        HEAP8[(0 + 84936 | 0) >> 0] = 1;
        HEAP32[(0 + 84912 | 0) >> 2] = $300_1;
        label$42 : {
         if (!((HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) == ($300_1 | 0) & 1 | 0)) {
          break label$42
         }
         HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[(0 + 12552 | 0) >> 2] | 0;
         $173(4006 | 0, $5_1 + 16 | 0 | 0) | 0;
         HEAP32[($5_1 + 1276 | 0) >> 2] = 2;
         break label$3;
        }
        label$43 : {
         if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$43
         }
         $336_1 = HEAP32[(0 + 84920 | 0) >> 2] | 0;
         $341_1 = 0;
         label$44 : {
          if (!((HEAPU8[(0 + 69305 | 0) >> 0] | 0) & 255 | 0)) {
           break label$44
          }
          $341_1 = (HEAP32[(0 + 70356 | 0) >> 2] | 0 | 0) > (1 | 0);
         }
         HEAP32[(0 + 84928 | 0) >> 2] = $209($336_1 | 0, ($341_1 & 1 | 0 ? 4040 : 4042) | 0) | 0;
         label$45 : {
          if (!((HEAP32[(0 + 84928 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
           break label$45
          }
          HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[(0 + 84920 | 0) >> 2] | 0;
          $173(4006 | 0, $5_1 + 32 | 0 | 0) | 0;
          HEAP32[($5_1 + 1276 | 0) >> 2] = 2;
          break label$3;
         }
        }
        $22(HEAP32[((HEAP32[($5_1 + 1268 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
        label$46 : {
         label$47 : while (1) {
          if (!((HEAP32[(0 + 83312 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break label$46
          }
          label$48 : {
           label$49 : while (1) {
            label$50 : {
             label$51 : {
              if (!(((HEAPU8[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
               break label$51
              }
              label$52 : {
               if (!((HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
                break label$52
               }
               $396_1 = 0;
               HEAP32[(0 + 83344 | 0) >> 2] = 2094;
               $65($396_1 | 0, $396_1 | 0);
               continue label$49;
              }
              $145($5_1 + 224 | 0 | 0, (HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
              HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) >> 2] | 0;
              break label$50;
             }
             label$53 : {
              if (!(($172($5_1 + 224 | 0 | 0, 1024 | 0, HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0 | 0) == (0 | 0) & 1 | 0)) {
               break label$53
              }
              break label$48;
             }
            }
            label$54 : {
             if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
              break label$54
             }
             $435 = HEAP32[(0 + 83312 | 0) >> 2] | 0;
             HEAP32[($5_1 + 52 | 0) >> 2] = $5_1 + 224 | 0;
             HEAP32[($5_1 + 48 | 0) >> 2] = $435;
             $173(2095 | 0, $5_1 + 48 | 0 | 0) | 0;
            }
            $442 = $5_1 + 224 | 0;
            HEAP32[($5_1 + 188 | 0) >> 2] = $18($442 | 0, 0 & 1 | 0 | 0) | 0;
            $448 = HEAP32[(0 + 83312 | 0) >> 2] | 0;
            HEAP32[($448 + 12 | 0) >> 2] = (HEAP32[($448 + 12 | 0) >> 2] | 0) + 1 | 0;
            HEAP32[($5_1 + 216 | 0) >> 2] = $10($442 | 0) | 0;
            label$55 : {
             label$56 : {
              if (!(((HEAPU8[(HEAP32[(0 + 83348 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
               break label$56
              }
              label$57 : {
               label$58 : {
                if (!((HEAP32[($5_1 + 216 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                 break label$58
                }
                label$59 : {
                 label$60 : {
                  if (((HEAPU8[((HEAP32[($5_1 + 216 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 4 | 0) {
                   break label$60
                  }
                  if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0)) {
                   break label$59
                  }
                  if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0)) {
                   break label$59
                  }
                 }
                 FUNCTION_TABLE[HEAP32[((HEAP32[($5_1 + 216 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0](HEAP32[(0 + 83352 | 0) >> 2] | 0, HEAP32[($5_1 + 216 | 0) >> 2] | 0);
                }
                break label$57;
               }
               label$61 : {
                if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0)) {
                 break label$61
                }
                if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0)) {
                 break label$61
                }
                $17(10 | 0, 0 & 1 | 0 | 0, HEAP32[(0 + 83348 | 0) >> 2] | 0 | 0) | 0;
               }
              }
              break label$55;
             }
             label$62 : {
              if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0)) {
               break label$62
              }
              if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0)) {
               break label$62
              }
              $117();
             }
            }
            label$63 : {
             if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break label$63
             }
             $527 = 24;
             if (!(((HEAPU8[(0 + 12546 | 0) >> 0] | 0) << $527 | 0) >> $527 | 0)) {
              break label$63
             }
             $15(HEAP32[($5_1 + 188 | 0) >> 2] | 0 | 0);
            }
            continue label$49;
           };
          }
          label$64 : while (1) {
           $540 = 0;
           label$65 : {
            if (!((HEAP32[(0 + 83316 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$65
            }
            $540 = (HEAP32[((HEAP32[(0 + 83316 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 83312 | 0) >> 2] | 0 | 0);
           }
           label$66 : {
            if (!($540 & 1 | 0)) {
             break label$66
            }
            $9(83316 | 0, 24 | 0);
            continue label$64;
           }
           break label$64;
          };
          label$67 : {
           label$68 : while (1) {
            if (!((HEAP32[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 83312 | 0) >> 2] | 0 | 0) & 1 | 0)) {
             break label$67
            }
            $9(83328 | 0, 12 | 0);
            continue label$68;
           };
          }
          $572 = 0;
          $215(HEAP32[((HEAP32[($572 + 83312 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
          $399(HEAP32[((HEAP32[($572 + 83312 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
          HEAP8[(0 + 84884 | 0) >> 0] = (HEAPU8[($572 + 84884 | 0) >> 0] | 0) + -1 | 0;
          $9(83312 | 0, 36 | 0);
          label$69 : {
           if (!((HEAP32[(0 + 83312 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$69
           }
           label$70 : {
            if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break label$70
            }
            $597 = HEAP32[(0 + 84928 | 0) >> 2] | 0;
            HEAP32[($5_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
            $196($597 | 0, 4044 | 0, $5_1 + 64 | 0 | 0) | 0;
           }
          }
          continue label$47;
         };
        }
        label$71 : {
         if (!(((HEAPU8[(0 + 84916 | 0) >> 0] | 0) & 255 | 0 | 0) >= (1 | 0) & 1 | 0)) {
          break label$71
         }
         $30();
        }
        label$72 : {
         if (!(((HEAPU8[(0 + 84916 | 0) >> 0] | 0) & 255 | 0 | 0) >= (3 | 0) & 1 | 0)) {
          break label$72
         }
         label$73 : {
          label$74 : {
           if (!(HEAP32[(0 + 75100 | 0) >> 2] | 0)) {
            break label$74
           }
           if (!(((HEAPU8[(0 + 84916 | 0) >> 0] | 0) & 255 | 0 | 0) == (4 | 0) & 1 | 0)) {
            break label$73
           }
          }
          $31(HEAP32[(0 + 9712 | 0) >> 2] | 0 | 0, (HEAPU8[(HEAP32[($5_1 + 1264 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0);
         }
         $32() | 0;
        }
        $75();
        $215(HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
        label$75 : {
         if (!((HEAP32[(0 + 84928 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$75
         }
         $215(HEAP32[(0 + 84928 | 0) >> 2] | 0 | 0) | 0;
        }
        label$76 : {
         if (!(HEAP32[(0 + 75100 | 0) >> 2] | 0)) {
          break label$76
         }
         label$77 : {
          if ((HEAPU8[($5_1 + 1259 | 0) >> 0] | 0) & 1 | 0) {
           break label$77
          }
          label$78 : {
           if (!((HEAP32[(0 + 75100 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$78
           }
           if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 208 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$78
           }
           if (!((HEAP32[(0 + 75096 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 204 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$78
           }
           $32() | 0;
           HEAP32[($5_1 + 1276 | 0) >> 2] = 3;
           break label$3;
          }
         }
         $684 = 0;
         HEAP32[($5_1 + 212 | 0) >> 2] = HEAP32[(0 + 75100 | 0) >> 2] | 0;
         HEAP32[($5_1 + 208 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0;
         HEAP32[($5_1 + 204 | 0) >> 2] = HEAP32[(0 + 75096 | 0) >> 2] | 0;
         HEAP32[(0 + 75100 | 0) >> 2] = $684;
         HEAP32[(0 + 75092 | 0) >> 2] = $684;
         HEAP32[(0 + 75096 | 0) >> 2] = $684;
         HEAP32[(0 + 75104 | 0) >> 2] = (HEAP32[(0 + 75104 | 0) >> 2] | 0) << 1 | 0;
         HEAP32[(0 + 70356 | 0) >> 2] = (HEAP32[(0 + 70356 | 0) >> 2] | 0) + 1 | 0;
         label$79 : {
          if (!((HEAP32[(0 + 70356 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 12532 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$79
          }
          HEAP32[($5_1 + 80 | 0) >> 2] = HEAP32[(0 + 70356 | 0) >> 2] | 0;
          $213($5_1 + 112 | 0 | 0, 4061 | 0, $5_1 + 80 | 0 | 0) | 0;
          HEAP32[($5_1 + 1276 | 0) >> 2] = $17(4 | 0, 0 & 1 | 0 | 0, $5_1 + 112 | 0 | 0) | 0;
          break label$3;
         }
         $29(0 | 0);
         $29(1 | 0);
         $7();
         $6();
         continue label$40;
        }
        break label$40;
       };
       label$80 : {
        label$81 : {
         if ((HEAPU8[(0 + 69304 | 0) >> 0] | 0) & 1 | 0) {
          break label$81
         }
         $20(1 | 0);
         break label$80;
        }
        $20(0 | 0);
        $173(4064 | 0, 0 | 0) | 0;
        HEAP32[($5_1 + 1260 | 0) >> 2] = 5;
       }
       $173(4116 | 0, 0 | 0) | 0;
       HEAP32[($5_1 + 1276 | 0) >> 2] = HEAP32[($5_1 + 1260 | 0) >> 2] | 0;
       break label$3;
      }
      $745 = 24;
      label$82 : {
       if (((HEAPU8[(HEAP32[($5_1 + 200 | 0) >> 2] | 0) >> 0] | 0) << $745 | 0) >> $745 | 0) {
        break label$82
       }
       $4(3933 | 0);
      }
     }
     HEAP32[($5_1 + 220 | 0) >> 2] = (HEAP32[($5_1 + 220 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   $754 = 2094;
   $197(2672 | 0) | 0;
   $197(2694 | 0) | 0;
   $197(2736 | 0) | 0;
   $197(2799 | 0) | 0;
   $197(2866 | 0) | 0;
   $197($754 | 0) | 0;
   $197(2931 | 0) | 0;
   $197($754 | 0) | 0;
   $197(2964 | 0) | 0;
   $197(3003 | 0) | 0;
   $197(3042 | 0) | 0;
   $197(3088 | 0) | 0;
   $197(3130 | 0) | 0;
   $197(3183 | 0) | 0;
   $197(3220 | 0) | 0;
   $197(3257 | 0) | 0;
   $197(3303 | 0) | 0;
   $197(3358 | 0) | 0;
   $197(3417 | 0) | 0;
   $197(3466 | 0) | 0;
   $197(3500 | 0) | 0;
   $197(3553 | 0) | 0;
   $197(3629 | 0) | 0;
   $197(3689 | 0) | 0;
   $197($754 | 0) | 0;
   $197(3721 | 0) | 0;
   HEAP32[($5_1 + 1276 | 0) >> 2] = 1;
  }
  $777 = HEAP32[($5_1 + 1276 | 0) >> 2] | 0;
  label$83 : {
   $781 = $5_1 + 1280 | 0;
   if ($781 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $781;
  }
  return $777 | 0;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $35_1 = 0, $34_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $34_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $34_1;
  }
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  label$3 : {
   if (!((HEAP32[(0 + 84924 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $209(HEAP32[(0 + 84924 | 0) >> 2] | 0 | 0, 4042 | 0) | 0;
   label$4 : {
    label$5 : {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $31(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0);
     $215(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     break label$4;
    }
    HEAP32[$3_1 >> 2] = HEAP32[(0 + 84924 | 0) >> 2] | 0;
    $173(5443 | 0, $3_1 | 0) | 0;
   }
  }
  label$6 : {
   $35_1 = $3_1 + 16 | 0;
   if ($35_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $35_1;
  }
  return;
 }
 
 function $28() {
  var $2_1 = 0, $35_1 = 0, $34_1 = 0;
  $2_1 = global$0 - 16 | 0;
  label$1 : {
   $34_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $34_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!((HEAP32[(69296 + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     $399(HEAP32[(69296 + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$6 : {
   $35_1 = $2_1 + 16 | 0;
   if ($35_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $35_1;
  }
  return;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $28_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $27_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   if (!((HEAP32[(69296 + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$3
   }
   $3(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2094 | 0);
  }
  HEAP8[(HEAP32[(69296 + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 0] = 0;
  label$4 : {
   $28_1 = $3_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $28_1;
  }
  return;
 }
 
 function $30() {
  var $2_1 = 0, $189_1 = 0, $188_1 = 0, $6_1 = 0, $37_1 = 0, $39_1 = 0, $40_1 = 0, $47_1 = 0, $54_1 = 0, $61_1 = 0;
  $2_1 = global$0 - 112 | 0;
  label$1 : {
   $188_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $188_1;
  }
  HEAP32[($2_1 + 100 | 0) >> 2] = 4127;
  $173(4160 | 0, 0 | 0) | 0;
  $6_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
  HEAP32[($2_1 + 84 | 0) >> 2] = 4272;
  HEAP32[($2_1 + 80 | 0) >> 2] = 4263;
  HEAP32[($2_1 + 76 | 0) >> 2] = 4254;
  HEAP32[($2_1 + 72 | 0) >> 2] = 4246;
  HEAP32[($2_1 + 68 | 0) >> 2] = 2094;
  HEAP32[($2_1 + 64 | 0) >> 2] = 4233;
  $173($6_1 | 0, $2_1 + 64 | 0 | 0) | 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[(0 + 83320 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($2_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 104 | 0) >> 2] = ((HEAPU8[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 16 | 0 ? 4282 : 4286;
    $37_1 = HEAP32[($2_1 + 100 | 0) >> 2] | 0;
    $39_1 = HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    $40_1 = HEAP32[($2_1 + 104 | 0) >> 2] | 0;
    $47_1 = $5(HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 28 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
    $54_1 = $5(HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 29 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
    $61_1 = $5(HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $5(HEAP32[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = $61_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $54_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $47_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $40_1;
    HEAP32[$2_1 >> 2] = $39_1;
    $173($37_1 | 0, $2_1 | 0) | 0;
    HEAP32[($2_1 + 108 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 108 | 0) >> 2] | 0) >> 2] | 0;
    continue label$4;
   };
  }
  $197(4290 | 0) | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[(0 + 75096 | 0) >> 2] | 0;
  $173(4361 | 0, $2_1 + 32 | 0 | 0) | 0;
  HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[(0 + 75100 | 0) >> 2] | 0;
  $173(4396 | 0, $2_1 + 48 | 0 | 0) | 0;
  label$5 : {
   if (!(HEAP32[(0 + 75092 | 0) >> 2] | 0)) {
    break label$5
   }
   label$6 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 1 | 0)) {
     break label$6
    }
    $173(4441 | 0, 0 | 0) | 0;
   }
   label$7 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 2 | 0)) {
     break label$7
    }
    $173(4482 | 0, 0 | 0) | 0;
   }
   label$8 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 4 | 0)) {
     break label$8
    }
    $173(4523 | 0, 0 | 0) | 0;
   }
   label$9 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 8 | 0)) {
     break label$9
    }
    $173(4560 | 0, 0 | 0) | 0;
   }
   label$10 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 16 | 0)) {
     break label$10
    }
    $173(4627 | 0, 0 | 0) | 0;
   }
   label$11 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 32 | 0)) {
     break label$11
    }
    $173(4694 | 0, 0 | 0) | 0;
   }
   label$12 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 64 | 0)) {
     break label$12
    }
    $173(4731 | 0, 0 | 0) | 0;
   }
   label$13 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 128 | 0)) {
     break label$13
    }
    $173(4772 | 0, 0 | 0) | 0;
   }
   label$14 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 256 | 0)) {
     break label$14
    }
    $173(4838 | 0, 0 | 0) | 0;
   }
   label$15 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 512 | 0)) {
     break label$15
    }
    $173(4898 | 0, 0 | 0) | 0;
   }
   label$16 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 1024 | 0)) {
     break label$16
    }
    $173(4932 | 0, 0 | 0) | 0;
   }
   label$17 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 2048 | 0)) {
     break label$17
    }
    $173(4990 | 0, 0 | 0) | 0;
   }
   label$18 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 4096 | 0)) {
     break label$18
    }
    $173(5023 | 0, 0 | 0) | 0;
   }
   label$19 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 8192 | 0)) {
     break label$19
    }
    $173(5060 | 0, 0 | 0) | 0;
   }
   label$20 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 16384 | 0)) {
     break label$20
    }
    $173(5128 | 0, 0 | 0) | 0;
   }
   label$21 : {
    if (!((HEAP32[(0 + 75092 | 0) >> 2] | 0) & 32768 | 0)) {
     break label$21
    }
    $173(5203 | 0, 0 | 0) | 0;
   }
  }
  $173(2304 | 0, 0 | 0) | 0;
  label$22 : {
   $189_1 = $2_1 + 112 | 0;
   if ($189_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $189_1;
  }
  return;
 }
 
 function $31($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $92_1 = 0, $115_1 = 0, $211_1 = 0, $210_1 = 0, $74_1 = 0, $76_1 = 0, $113_1 = 0, $114_1 = 0, $151_1 = 0, $158_1 = 0, $190_1 = 0;
  $4_1 = global$0 - 80 | 0;
  label$1 : {
   $210_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $210_1;
  }
  HEAP32[($4_1 + 76 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 75 | 0) >> 0] = $1_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = 0;
  $196(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 5232 | 0, 0 | 0) | 0;
  HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) < (1024 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(75120 + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 56 | 0) >> 2] = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 2] | 0;
      continue label$6;
     };
    }
    HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[($4_1 + 68 | 0) >> 2] = $24((HEAP32[($4_1 + 56 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  label$7 : {
   label$8 : {
    if ((HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$8
    }
    $196(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 5248 | 0, 0 | 0) | 0;
    HEAP32[($4_1 + 60 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) < (1024 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(75120 + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      label$11 : {
       label$12 : while (1) {
        if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$11
        }
        $74_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
        $76_1 = HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($4_1 + 36 | 0) >> 2] = $5(HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
        HEAP32[($4_1 + 32 | 0) >> 2] = $76_1;
        $196($74_1 | 0, 5290 | 0, $4_1 + 32 | 0 | 0) | 0;
        HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 2] | 0;
        continue label$12;
       };
      }
      HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
      continue label$10;
     };
    }
    break label$7;
   }
   $92_1 = 0;
   HEAP32[($4_1 + 52 | 0) >> 2] = $92_1;
   HEAP32[($4_1 + 60 | 0) >> 2] = $92_1;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) < (1024 | 0) & 1 | 0)) {
      break label$13
     }
     HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(75120 + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     label$15 : {
      label$16 : while (1) {
       if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$15
       }
       $113_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
       $114_1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
       $115_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
       HEAP32[($4_1 + 52 | 0) >> 2] = $115_1 + 1 | 0;
       HEAP32[($114_1 + ($115_1 << 2 | 0) | 0) >> 2] = $113_1;
       HEAP32[($4_1 + 64 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 2] | 0;
       continue label$16;
      };
     }
     HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     continue label$14;
    };
   }
   label$17 : {
    label$18 : {
     if (!((HEAPU8[($4_1 + 75 | 0) >> 0] | 0) & 1 | 0)) {
      break label$18
     }
     $196(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 5300 | 0, 0 | 0) | 0;
     $154(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 4 | 0, 2 | 0);
     break label$17;
    }
    $196(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 5322 | 0, 0 | 0) | 0;
    $154(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0, 4 | 0, 3 | 0);
   }
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
   label$19 : {
    label$20 : while (1) {
     if (!((HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$19
     }
     $151_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
     $158_1 = HEAP32[((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $5(HEAP32[((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $158_1;
     $196($151_1 | 0, 5343 | 0, $4_1 + 16 | 0 | 0) | 0;
     label$21 : {
      if (!(((HEAPU8[((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 8 | 0)) {
       break label$21
      }
      $190_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
      HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[((HEAP32[($4_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      $196($190_1 | 0, 5355 | 0, $4_1 | 0) | 0;
     }
     $196(HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0, 2304 | 0, 0 | 0) | 0;
     HEAP32[($4_1 + 60 | 0) >> 2] = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + 1 | 0;
     continue label$20;
    };
   }
   $399(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0);
  }
  $201(5361 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0;
  label$22 : {
   $211_1 = $4_1 + 80 | 0;
   if ($211_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $211_1;
  }
  return;
 }
 
 function $32() {
  var $2_1 = 0, $67_1 = 0, $66_1 = 0, $35_1 = 0, $52_1 = 0, $63_1 = 0;
  $2_1 = global$0 - 48 | 0;
  label$1 : {
   $66_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $66_1;
  }
  HEAP32[($2_1 + 36 | 0) >> 2] = $35() | 0;
  label$3 : {
   if (!(HEAP32[($2_1 + 36 | 0) >> 2] | 0)) {
    break label$3
   }
   $173(5386 | 0, 0 | 0) | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = 0;
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($2_1 + 40 | 0) >> 2] | 0 | 0) < (1024 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[(75120 + ((HEAP32[($2_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       label$8 : {
        if (!(((HEAPU8[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
         break label$8
        }
        $35_1 = HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = $5(HEAP32[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($2_1 + 44 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
        HEAP32[$2_1 >> 2] = $35_1;
        $173(5290 | 0, $2_1 | 0) | 0;
       }
       HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 44 | 0) >> 2] | 0) >> 2] | 0;
       continue label$7;
      };
     }
     HEAP32[($2_1 + 40 | 0) >> 2] = (HEAP32[($2_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    };
   }
   $52_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0 ? 32 : 115;
   HEAP32[($2_1 + 16 | 0) >> 2] = $52_1;
   $173(5414 | 0, $2_1 + 16 | 0 | 0) | 0;
  }
  $63_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
  label$9 : {
   $67_1 = $2_1 + 48 | 0;
   if ($67_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $67_1;
  }
  return $63_1 | 0;
 }
 
 function $33($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - (HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function $34($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0, $16_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $16_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $16_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  $13_1 = $143(HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   $17_1 = $4_1 + 16 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  return $13_1 | 0;
 }
 
 function $35() {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  $3_1 = 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) < (1024 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(75120 + ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      label$5 : {
       if (!(((HEAPU8[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
      continue label$4;
     };
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $36($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $117_1 = 0, $116_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $116_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $116_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(0 + 75084 | 0) >> 2] | 0;
  HEAP32[(0 + 75084 | 0) >> 2] = 0;
  label$3 : {
   if ($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5490 | 0) | 0) {
    break label$3
   }
   label$4 : {
    if ((HEAPU8[(0 + 74016 | 0) >> 0] | 0) & 1 | 0) {
     break label$4
    }
    $21(30416 | 0);
   }
   HEAP8[(0 + 12545 | 0) >> 0] = 0;
   HEAP32[(0 + 75084 | 0) >> 2] = 6502;
  }
  label$5 : {
   if ($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5495 | 0) | 0) {
    break label$5
   }
   label$6 : {
    if ((HEAPU8[(0 + 74016 | 0) >> 0] | 0) & 1 | 0) {
     break label$6
    }
    $21(16672 | 0);
   }
   HEAP8[(0 + 12545 | 0) >> 0] = 1;
   HEAP32[(0 + 75084 | 0) >> 2] = 6803;
  }
  label$7 : {
   label$8 : {
    if (!($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5500 | 0) | 0)) {
     break label$8
    }
    if ($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5507 | 0) | 0) {
     break label$7
    }
   }
   label$9 : {
    if ((HEAPU8[(0 + 74016 | 0) >> 0] | 0) & 1 | 0) {
     break label$9
    }
    $21(16672 | 0);
    $21(29680 | 0);
   }
   HEAP8[(0 + 12545 | 0) >> 0] = 1;
   HEAP32[(0 + 75084 | 0) >> 2] = 6303;
  }
  label$10 : {
   if ($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5514 | 0) | 0) {
    break label$10
   }
   label$11 : {
    if ((HEAPU8[(0 + 74016 | 0) >> 0] | 0) & 1 | 0) {
     break label$11
    }
    $21(38320 | 0);
   }
   HEAP8[(0 + 12545 | 0) >> 0] = 1;
   HEAP32[(0 + 75084 | 0) >> 2] = 68705;
  }
  label$12 : {
   label$13 : {
    if (!($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5520 | 0) | 0)) {
     break label$13
    }
    if ($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5527 | 0) | 0) {
     break label$12
    }
   }
   label$14 : {
    if ((HEAPU8[(0 + 74016 | 0) >> 0] | 0) & 1 | 0) {
     break label$14
    }
    $21(47584 | 0);
   }
   HEAP8[(0 + 12545 | 0) >> 0] = 1;
   HEAP32[(0 + 75084 | 0) >> 2] = 6811;
  }
  label$15 : {
   label$16 : {
    if (!($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5534 | 0) | 0)) {
     break label$16
    }
    if ($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5537 | 0) | 0) {
     break label$15
    }
   }
   label$17 : {
    if ((HEAPU8[(0 + 74016 | 0) >> 0] | 0) & 1 | 0) {
     break label$17
    }
    $21(62768 | 0);
   }
   HEAP8[(0 + 12545 | 0) >> 0] = 1;
   HEAP32[(0 + 75084 | 0) >> 2] = 248;
  }
  HEAP8[(0 + 74016 | 0) >> 0] = 1;
  label$18 : {
   if (HEAP32[(0 + 75084 | 0) >> 2] | 0) {
    break label$18
   }
   $17(27 | 0, 1 & 1 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  label$19 : {
   if (!(HEAP32[($4_1 + 4 | 0) >> 2] | 0)) {
    break label$19
   }
   if (!((HEAP32[(0 + 75084 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$19
   }
   $17(30 | 0, 1 & 1 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  label$20 : {
   $117_1 = $4_1 + 16 | 0;
   if ($117_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $117_1;
  }
  return;
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $121_1 = 0, $294_1 = 0, $339_1 = 0, $357_1 = 0, $383_1 = 0, $386_1 = 0, $470 = 0, $473 = 0, $492 = 0, $495 = 0, $529 = 0, $532 = 0, $539 = 0, $542 = 0, $582 = 0, $639 = 0, $656 = 0, $674 = 0, $726 = 0, $732 = 0, $740 = 0, $739 = 0, $21_1 = 0, $23_1 = 0, $147_1 = 0, $148_1 = 0, $167_1 = 0, $302_1 = 0, $382_1 = 0, $469 = 0, $491 = 0, $528 = 0, $538 = 0;
  $4_1 = global$0 - 464 | 0;
  label$1 : {
   $739 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $739;
  }
  HEAP32[($4_1 + 460 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 456 | 0) >> 2] = $1_1;
  $7_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
  HEAP8[($7_1 + 8 | 0) >> 0] = (HEAPU8[($7_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 4 | 0;
  $117();
  HEAP32[($4_1 + 436 | 0) >> 2] = $76(HEAP32[($4_1 + 460 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  label$3 : {
   if (!((HEAPU8[(0 + 75088 | 0) >> 0] | 0) & 1 | 0)) {
    break label$3
   }
   $21_1 = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $23_1 = HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   HEAP32[($4_1 + 88 | 0) >> 2] = (HEAPU8[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0;
   HEAP32[($4_1 + 84 | 0) >> 2] = $23_1;
   HEAP32[($4_1 + 80 | 0) >> 2] = $21_1;
   $173(5540 | 0, $4_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[($4_1 + 436 | 0) >> 2] | 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($4_1 + 448 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$6 : {
     if (!(((HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 1 | 0;
    }
    HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 448 | 0) >> 2] | 0) >> 2] | 0;
    continue label$5;
   };
  }
  HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[($4_1 + 436 | 0) >> 2] | 0;
  label$7 : {
   if (!(((HEAPU8[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 64 | 0)) {
    break label$7
   }
   label$8 : {
    if (!((HEAP32[(HEAP32[($4_1 + 448 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 13 | 0) >> 0] = 15;
    label$9 : {
     if (!(((HEAPU8[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
      break label$9
     }
     if (!((HEAP32[(HEAP32[($4_1 + 448 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 13 | 0) >> 0] = 16;
    }
   }
  }
  HEAP32[($4_1 + 452 | 0) >> 2] = (HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     if (((HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
      break label$12
     }
     if (!((HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) >= (256 | 0) & 1 | 0)) {
      break label$11
     }
    }
    HEAP32[($4_1 + 432 | 0) >> 2] = 2;
    break label$10;
   }
   HEAP32[($4_1 + 432 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 ? 1 : 0;
  }
  label$13 : while (1) {
   $121_1 = 0;
   label$14 : {
    if ((HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & (1 << (HEAP32[($4_1 + 452 | 0) >> 2] | 0) | 0) | 0) {
     break label$14
    }
    $121_1 = (HEAP32[(12560 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   label$15 : {
    if (!($121_1 & 1 | 0)) {
     break label$15
    }
    HEAP32[($4_1 + 452 | 0) >> 2] = HEAP32[(12560 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    continue label$13;
   }
   break label$13;
  };
  label$16 : {
   if (!((HEAPU8[(0 + 75088 | 0) >> 0] | 0) & 1 | 0)) {
    break label$16
   }
   $147_1 = HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   $148_1 = HEAP32[($4_1 + 452 | 0) >> 2] | 0;
   HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[(12560 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($4_1 + 68 | 0) >> 2] = $148_1;
   HEAP32[($4_1 + 64 | 0) >> 2] = $147_1;
   $173(5580 | 0, $4_1 + 64 | 0 | 0) | 0;
  }
  label$17 : {
   label$18 : {
    if ((HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & (1 << (HEAP32[($4_1 + 452 | 0) >> 2] | 0) | 0) | 0) {
     break label$18
    }
    $167_1 = HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 460 | 0) >> 2] | 0;
    HEAP32[($4_1 + 48 | 0) >> 2] = $167_1;
    $213($4_1 + 304 | 0 | 0, 5621 | 0, $4_1 + 48 | 0 | 0) | 0;
    $17(11 | 0, 0 & 1 | 0 | 0, $4_1 + 304 | 0 | 0) | 0;
    $118(HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0);
    HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 1 | 0;
    break label$17;
   }
   label$19 : {
    if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$19
    }
    if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) < (21 | 0) & 1 | 0)) {
     break label$19
    }
    HEAP32[($4_1 + 452 | 0) >> 2] = HEAP32[(0 + 84880 | 0) >> 2] | 0;
    label$20 : {
     if ((HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & (1 << (HEAP32[($4_1 + 452 | 0) >> 2] | 0) | 0) | 0) {
      break label$20
     }
     $17(12 | 0, 0 & 1 | 0 | 0, HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
     $118(HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0);
     HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 1 | 0;
     break label$17;
    }
   }
   label$21 : {
    if (!((HEAPU8[(0 + 75088 | 0) >> 0] | 0) & 1 | 0)) {
     break label$21
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 452 | 0) >> 2] | 0;
    $173(5627 | 0, $4_1 + 32 | 0 | 0) | 0;
   }
   label$22 : {
    label$23 : while (1) {
     if (!((HEAP32[($4_1 + 432 | 0) >> 2] | 0) >>> 0 > (HEAP32[(12640 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$22
     }
     label$24 : {
      label$25 : {
       if (!(HEAP32[(12560 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
        break label$25
       }
       if ((HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & (1 << (HEAP32[(12560 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) | 0) {
        break label$24
       }
      }
      label$26 : {
       if (!(((HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
        break label$26
       }
       break label$22;
      }
      label$27 : {
       if (!((HEAP32[($4_1 + 452 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$27
       }
       if (!((HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$27
       }
       HEAP32[($4_1 + 432 | 0) >> 2] = 1;
       $294_1 = 24;
       HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] = (((HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) & 255 | 0) << $294_1 | 0) >> $294_1 | 0;
       break label$22;
      }
      $302_1 = HEAP32[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 460 | 0) >> 2] | 0;
      HEAP32[($4_1 + 16 | 0) >> 2] = $302_1;
      $213($4_1 + 176 | 0 | 0, 5621 | 0, $4_1 + 16 | 0 | 0) | 0;
      $17(20 | 0, 0 & 1 | 0 | 0, $4_1 + 176 | 0 | 0) | 0;
      break label$22;
     }
     HEAP32[($4_1 + 452 | 0) >> 2] = HEAP32[(12560 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     continue label$23;
    };
   }
   HEAP32[($4_1 + 444 | 0) >> 2] = HEAP32[(((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 20 | 0) + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP16[($4_1 + 442 | 0) >> 1] = ((HEAP32[($4_1 + 444 | 0) >> 2] | 0) >>> 0 > 255 >>> 0 & 1 | 0) + 1 | 0;
   $339_1 = 16;
   label$28 : {
    label$29 : {
     if (!((((HEAPU16[($4_1 + 442 | 0) >> 1] | 0) << $339_1 | 0) >> $339_1 | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$29
     }
     HEAP8[(0 + 74032 | 0) >> 0] = (HEAP32[($4_1 + 444 | 0) >> 2] | 0) >>> 8 | 0;
     HEAP8[(0 + 74033 | 0) >> 0] = HEAP32[($4_1 + 444 | 0) >> 2] | 0;
     break label$28;
    }
    HEAP8[(0 + 74032 | 0) >> 0] = HEAP32[($4_1 + 444 | 0) >> 2] | 0;
   }
   $357_1 = (HEAP32[($4_1 + 452 | 0) >> 2] | 0) + -9 | 0;
   label$30 : {
    label$31 : {
     if ($357_1 >>> 0 > 7 >>> 0) {
      break label$31
     }
     label$32 : {
      switch ($357_1 | 0) {
      case 6:
       HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 436 | 0) >> 2] | 0) >> 2] | 0;
       label$35 : {
        if (((HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
         break label$35
        }
        if (!((HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) >= (256 | 0) & 1 | 0)) {
         break label$35
        }
        $17(20 | 0, 0 & 1 | 0 | 0, 0 | 0) | 0;
       }
       $382_1 = HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $383_1 = HEAPU16[($4_1 + 442 | 0) >> 1] | 0;
       HEAP16[($4_1 + 442 | 0) >> 1] = $383_1 + 1 | 0;
       $386_1 = 16;
       HEAP8[((($383_1 << $386_1 | 0) >> $386_1 | 0) + 74032 | 0) >> 0] = $382_1;
       label$36 : {
        if (((HEAPU8[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
         break label$36
        }
        label$37 : {
         label$38 : {
          if (!((HEAP32[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) > (7 | 0) & 1 | 0)) {
           break label$38
          }
          $17(22 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 460 | 0) >> 2] | 0 | 0) | 0;
          break label$37;
         }
         HEAP8[(0 + 74032 | 0) >> 0] = ((HEAPU8[(0 + 74032 | 0) >> 0] | 0) & 255 | 0) + ((HEAP32[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) << 1 | 0) | 0;
        }
       }
       break label$30;
      case 7:
       label$39 : {
        if (((HEAPU8[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
         break label$39
        }
        label$40 : {
         label$41 : {
          if (!((HEAP32[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) > (7 | 0) & 1 | 0)) {
           break label$41
          }
          $17(22 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 460 | 0) >> 2] | 0 | 0) | 0;
          break label$40;
         }
         HEAP8[(0 + 74032 | 0) >> 0] = ((HEAPU8[(0 + 74032 | 0) >> 0] | 0) & 255 | 0) + ((HEAP32[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) << 1 | 0) | 0;
        }
       }
       HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 436 | 0) >> 2] | 0) >> 2] | 0;
       label$42 : {
        if (((HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
         break label$42
        }
        if (!((HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) >= (256 | 0) & 1 | 0)) {
         break label$42
        }
        $17(20 | 0, 0 & 1 | 0 | 0, 0 | 0) | 0;
       }
       $469 = HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $470 = HEAPU16[($4_1 + 442 | 0) >> 1] | 0;
       HEAP16[($4_1 + 442 | 0) >> 1] = $470 + 1 | 0;
       $473 = 16;
       HEAP8[((($470 << $473 | 0) >> $473 | 0) + 74032 | 0) >> 0] = $469;
       HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 448 | 0) >> 2] | 0) >> 2] | 0;
       break label$30;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
       break label$31;
      default:
       break label$32;
      };
     }
     break label$30;
    }
    label$43 : {
     if (!((HEAP32[(12640 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$43
     }
     $491 = HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $492 = HEAPU16[($4_1 + 442 | 0) >> 1] | 0;
     HEAP16[($4_1 + 442 | 0) >> 1] = $492 + 1 | 0;
     $495 = 16;
     HEAP8[((($492 << $495 | 0) >> $495 | 0) + 74032 | 0) >> 0] = $491;
    }
    label$44 : {
     if (!((HEAP32[(12640 + ((HEAP32[($4_1 + 452 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$44
     }
     label$45 : {
      label$46 : {
       if (!(((HEAPU8[(0 + 12545 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
        break label$46
       }
       HEAP8[((HEAP16[($4_1 + 442 | 0) >> 1] | 0) + 74031 | 0) >> 0] = (HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 8 | 0;
       $528 = HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       $529 = HEAPU16[($4_1 + 442 | 0) >> 1] | 0;
       HEAP16[($4_1 + 442 | 0) >> 1] = $529 + 1 | 0;
       $532 = 16;
       HEAP8[((($529 << $532 | 0) >> $532 | 0) + 74032 | 0) >> 0] = $528;
       break label$45;
      }
      $538 = (HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 8 | 0;
      $539 = HEAPU16[($4_1 + 442 | 0) >> 1] | 0;
      HEAP16[($4_1 + 442 | 0) >> 1] = $539 + 1 | 0;
      $542 = 16;
      HEAP8[((($539 << $542 | 0) >> $542 | 0) + 74032 | 0) >> 0] = $538;
     }
    }
    HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 448 | 0) >> 2] | 0) >> 2] | 0;
   }
   label$47 : {
    if (!(((HEAPU8[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 16 | 0)) {
     break label$47
    }
    label$48 : {
     label$49 : {
      if (!((HEAP32[($4_1 + 448 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$49
      }
      label$50 : {
       if (((HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
        break label$50
       }
       if (!((HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) >= (256 | 0) & 1 | 0)) {
        break label$50
       }
       $17(20 | 0, 0 & 1 | 0 | 0, 0 | 0) | 0;
      }
      $582 = 16;
      HEAP8[((((HEAPU16[($4_1 + 442 | 0) >> 1] | 0) << $582 | 0) >> $582 | 0) + 74032 | 0) >> 0] = HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 448 | 0) >> 2] | 0) >> 2] | 0;
      break label$48;
     }
     $17(23 | 0, 1 & 1 | 0 | 0, 0 | 0) | 0;
    }
    HEAP16[($4_1 + 442 | 0) >> 1] = (HEAPU16[($4_1 + 442 | 0) >> 1] | 0) + 1 | 0;
   }
   label$51 : {
    label$52 : {
     if (((HEAPU8[((HEAP32[($4_1 + 456 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 32 | 0) {
      break label$52
     }
     if (!((HEAP32[($4_1 + 452 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0)) {
      break label$51
     }
    }
    HEAP16[($4_1 + 442 | 0) >> 1] = (HEAPU16[($4_1 + 442 | 0) >> 1] | 0) + 1 | 0;
    label$53 : {
     label$54 : {
      if ((HEAP32[($4_1 + 448 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$54
      }
      $17(23 | 0, 1 & 1 | 0 | 0, 0 | 0) | 0;
      break label$53;
     }
     label$55 : {
      if (((HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
       break label$55
      }
      label$56 : {
       label$57 : {
        if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
         break label$57
        }
        $639 = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        break label$56;
       }
       $639 = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      }
      HEAP32[($4_1 + 172 | 0) >> 2] = $639;
      label$58 : {
       label$59 : {
        if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
         break label$59
        }
        $656 = (HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0;
        break label$58;
       }
       $656 = (HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0;
      }
      HEAP8[($4_1 + 171 | 0) >> 0] = $656;
      label$60 : {
       label$61 : {
        if (((HEAPU8[($4_1 + 171 | 0) >> 0] | 0) & 255 | 0) & 3 | 0) {
         break label$61
        }
        $674 = 16;
        HEAP32[($4_1 + 164 | 0) >> 2] = ((HEAP32[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - (HEAP32[($4_1 + 172 | 0) >> 2] | 0) | 0) - (((HEAPU16[($4_1 + 442 | 0) >> 1] | 0) << $674 | 0) >> $674 | 0) | 0;
        label$62 : {
         label$63 : {
          if ((HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) >= (128 | 0) & 1 | 0) {
           break label$63
          }
          if (!((HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) < (-128 | 0) & 1 | 0)) {
           break label$62
          }
         }
         HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 164 | 0) >> 2] | 0;
         $213($4_1 + 96 | 0 | 0, 5648 | 0, $4_1 | 0) | 0;
         $17(16 | 0, 0 & 1 | 0 | 0, $4_1 + 96 | 0 | 0) | 0;
         HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 32768 | 0;
         HEAP8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] = (HEAPU8[((HEAP32[($4_1 + 448 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 1 | 0;
         HEAP32[($4_1 + 164 | 0) >> 2] = 0;
        }
        break label$60;
       }
       HEAP32[($4_1 + 164 | 0) >> 2] = 0;
      }
      $726 = 16;
      HEAP8[(((((HEAPU16[($4_1 + 442 | 0) >> 1] | 0) << $726 | 0) >> $726 | 0) - 1 | 0) + 74032 | 0) >> 0] = (HEAP32[($4_1 + 164 | 0) >> 2] | 0) & 255 | 0;
     }
    }
   }
   $732 = 16;
   HEAP32[(0 + 75056 | 0) >> 2] = ((HEAPU16[($4_1 + 442 | 0) >> 1] | 0) << $732 | 0) >> $732 | 0;
   $38();
   $118(HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0);
  }
  label$64 : {
   $740 = $4_1 + 464 | 0;
   if ($740 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $740;
  }
  return;
 }
 
 function $38() {
  var $2_1 = 0, $186_1 = 0, $97_1 = 0, $110_1 = 0, $259_1 = 0, $272_1 = 0, $278_1 = 0, $277_1 = 0, $130_1 = 0, $139_1 = 0;
  $2_1 = global$0 - 32 | 0;
  label$1 : {
   $277_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $277_1;
  }
  label$3 : {
   label$4 : {
    if (HEAP32[(0 + 75100 | 0) >> 2] | 0) {
     break label$4
    }
    label$5 : {
     if (((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 16 | 0) {
      break label$5
     }
     HEAP32[($2_1 + 24 | 0) >> 2] = (HEAP32[(0 + 75056 | 0) >> 2] | 0) - 1 | 0;
     label$6 : {
      label$7 : while (1) {
       if (!((HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 84912 | 0) >> 2] = (HEAP32[(0 + 84912 | 0) >> 2] | 0) + ((HEAPU8[((HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 74032 | 0) >> 0] | 0) & 255 | 0) | 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + -1 | 0;
       continue label$7;
      };
     }
     label$8 : {
      if (!(((HEAPU8[(0 + 84936 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP8[(0 + 84936 | 0) >> 0] = 0;
      label$9 : {
       if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 2 | 0;
       break label$3;
      }
      HEAP32[(0 + 75072 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      label$10 : {
       if (!((HEAP32[(0 + 12548 | 0) >> 2] | 0 | 0) < (3 | 0) & 1 | 0)) {
        break label$10
       }
       $170((HEAP32[(0 + 75072 | 0) >> 2] | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       $170(((HEAP32[(0 + 75072 | 0) >> 2] | 0) >>> 8 | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       label$11 : {
        if (!((HEAP32[(0 + 12548 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$11
        }
        $97_1 = 0;
        HEAP32[(0 + 75076 | 0) >> 2] = $200(HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[(0 + 75080 | 0) >> 2] = $97_1;
        $170($97_1 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
        $170($97_1 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       }
      }
     }
     $110_1 = (HEAP32[(0 + 12548 | 0) >> 2] | 0) + -1 | 0;
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         if ($110_1 >>> 0 > 2 >>> 0) {
          break label$15
         }
         switch ($110_1 | 0) {
         case 1:
          break label$13;
         default:
          break label$14;
         };
        }
        $17(31 | 0, 1 & 1 | 0 | 0, 5976 | 0) | 0;
        break label$12;
       }
       label$16 : {
        if (!((HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 75072 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$16
        }
        $130_1 = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        $139_1 = $5(HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
        HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[(0 + 75072 | 0) >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = $139_1;
        HEAP32[$2_1 >> 2] = $130_1;
        $173(6012 | 0, $2_1 | 0) | 0;
        $17(18 | 0, 1 & 1 | 0 | 0, 0 | 0) | 0;
        fimport$0(1 | 0);
        abort();
       }
       label$17 : {
        label$18 : while (1) {
         if (!((HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 75072 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$17
         }
         $170((HEAPU8[(0 + 12544 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[(0 + 75072 | 0) >> 2] = (HEAP32[(0 + 75072 | 0) >> 2] | 0) + 1 | 0;
         continue label$18;
        };
       }
       $169(74032 | 0, HEAP32[(0 + 75056 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       break label$12;
      }
      label$19 : {
       if (!((HEAP32[(0 + 75072 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$19
       }
       $186_1 = 0;
       HEAP32[(0 + 75072 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       HEAP32[($2_1 + 28 | 0) >> 2] = $200(HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       $206(HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0, HEAP32[(0 + 75076 | 0) >> 2] | 0 | 0, $186_1 | 0) | 0;
       $170((HEAP32[(0 + 75080 | 0) >> 2] | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       $170(((HEAP32[(0 + 75080 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       $206(HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0, $186_1 | 0) | 0;
       $170((HEAP32[(0 + 75072 | 0) >> 2] | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       $170(((HEAP32[(0 + 75072 | 0) >> 2] | 0) >>> 8 | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[(0 + 75076 | 0) >> 2] = $200(HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[(0 + 75080 | 0) >> 2] = $186_1;
       $170($186_1 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
       $170($186_1 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
      }
      $169(74032 | 0, HEAP32[(0 + 75056 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[(0 + 75080 | 0) >> 2] = (HEAP32[(0 + 75080 | 0) >> 2] | 0) + (HEAP32[(0 + 75056 | 0) >> 2] | 0) | 0;
     }
     HEAP32[(0 + 75072 | 0) >> 2] = (HEAP32[(0 + 75072 | 0) >> 2] | 0) + (HEAP32[(0 + 75056 | 0) >> 2] | 0) | 0;
    }
   }
   $259_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
   HEAP32[($259_1 + 12 | 0) >> 2] = (HEAP32[($259_1 + 12 | 0) >> 2] | 0) + (HEAP32[(0 + 75056 | 0) >> 2] | 0) | 0;
   if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
    break label$3
   }
   $272_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
   HEAP32[($272_1 + 16 | 0) >> 2] = (HEAP32[($272_1 + 16 | 0) >> 2] | 0) + (HEAP32[(0 + 75056 | 0) >> 2] | 0) | 0;
  }
  label$20 : {
   $278_1 = $2_1 + 32 | 0;
   if ($278_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $278_1;
  }
  return;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = 24;
  HEAP8[(0 + 75088 | 0) >> 0] = (((HEAPU8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $8_1 | 0) >> $8_1 | 0 | 0) == (110 | 0) & 1 | 0;
  return;
 }
 
 function $40($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $31_1 = 0, $52_1 = 0, $51_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $51_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $51_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  HEAP32[(0 + 75056 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!($140(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5652 | 0, 7 | 0) | 0)) {
      break label$5
     }
     if ($140(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5661 | 0, 7 | 0) | 0) {
      break label$4
     }
    }
    $16_1 = HEAP32[(0 + 83312 | 0) >> 2] | 0;
    HEAP8[($16_1 + 16 | 0) >> 0] = (HEAPU8[($16_1 + 16 | 0) >> 0] | 0) & 255 | 0 | 2 | 0;
    break label$3;
   }
   label$6 : {
    label$7 : {
     label$8 : {
      if (!($140(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5670 | 0, 7 | 0) | 0)) {
       break label$8
      }
      if ($140(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5678 | 0, 7 | 0) | 0) {
       break label$7
      }
     }
     $31_1 = HEAP32[(0 + 83312 | 0) >> 2] | 0;
     HEAP8[($31_1 + 16 | 0) >> 0] = ((HEAPU8[($31_1 + 16 | 0) >> 0] | 0) & 255 | 0) & -3 | 0;
     break label$6;
    }
    label$9 : {
     label$10 : {
      label$11 : {
       if (!($140(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5686 | 0, 2 | 0) | 0)) {
        break label$11
       }
       if ($140(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 5690 | 0, 2 | 0) | 0) {
        break label$10
       }
      }
      HEAP8[(0 + 12546 | 0) >> 0] = 0;
      break label$9;
     }
     HEAP8[(0 + 12546 | 0) >> 0] = 1;
    }
   }
  }
  label$12 : {
   $52_1 = $4_1 + 16 | 0;
   if ($52_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $52_1;
  }
  return;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0, $19_1 = 0, $68_1 = 0, $67_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $67_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $67_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $8_1 = 24;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((((HEAPU8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $8_1 | 0) >> $8_1 | 0 | 0) < (48 | 0) & 1 | 0) {
      break label$5
     }
     $19_1 = 24;
     if (!((((HEAPU8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $19_1 | 0) >> $19_1 | 0 | 0) > (57 | 0) & 1 | 0)) {
      break label$4
     }
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    break label$3;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  }
  label$6 : {
   label$7 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    if (!(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 8 | 0)) {
     break label$7
    }
    $22(HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    break label$6;
   }
   HEAP32[$4_1 >> 2] = $42(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   $22(HEAP32[$4_1 >> 2] | 0 | 0);
   label$8 : {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    $399(HEAP32[$4_1 >> 2] | 0 | 0);
   }
  }
  label$9 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$9
   }
   $118(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  label$10 : {
   $68_1 = $4_1 + 16 | 0;
   if ($68_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $68_1;
  }
  return;
 }
 
 function $42($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0, $32_1 = 0, $36_1 = 0, $56_1 = 0, $55_1 = 0, $52_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $55_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $55_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $7_1 = 24;
  label$3 : {
   label$4 : {
    if (!((((HEAPU8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] | 0) << $7_1 | 0) >> $7_1 | 0 | 0) == (34 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $24(($147(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) | 0;
    $145(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    label$5 : while (1) {
     $29_1 = 24;
     $32_1 = 0;
     label$6 : {
      if (!(((HEAPU8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] | 0) << $29_1 | 0) >> $29_1 | 0)) {
       break label$6
      }
      $36_1 = 24;
      $32_1 = (((HEAPU8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] | 0) << $36_1 | 0) >> $36_1 | 0 | 0) != (34 | 0);
     }
     label$7 : {
      if (!($32_1 & 1 | 0)) {
       break label$7
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     }
     break label$5;
    };
    HEAP8[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 0] = 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  $52_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$8 : {
   $56_1 = $3_1 + 16 | 0;
   if ($56_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $56_1;
  }
  return $52_1 | 0;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $55_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $54_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $54_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $117();
  HEAP32[($4_1 + 20 | 0) >> 2] = $42(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $44(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, 5694 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (!(HEAP32[(0 + 75100 | 0) >> 2] | 0)) {
       break label$6
      }
      $206(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0, 2 | 0) | 0;
      HEAP32[(0 + 75056 | 0) >> 2] = $200(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
      $38();
      break label$5;
     }
     label$7 : {
      label$8 : while (1) {
       HEAP32[(0 + 75056 | 0) >> 2] = $203(74032 | 0, 1 | 0, 1024 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
       label$9 : {
        if (!((HEAP32[(0 + 75056 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
         break label$9
        }
        break label$7;
       }
       $38();
       continue label$8;
      };
     }
    }
    $215(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    break label$3;
   }
   HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   $173(5697 | 0, $4_1 | 0) | 0;
  }
  label$10 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$10
   }
   $399(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  }
  HEAP32[(0 + 75056 | 0) >> 2] = 0;
  label$11 : {
   $55_1 = $4_1 + 32 | 0;
   if ($55_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $55_1;
  }
  return;
 }
 
 function $44($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $60_1 = 0, $59_1 = 0, $56_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $59_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $59_1;
  }
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $209(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   label$5 : {
    if (!(($139(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, 58 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = $23(512 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(0 + 75068 | 0) >> 2] | 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$6
     }
     $45(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 16 | 0) >> 2] = $209(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     label$8 : {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      break label$6;
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
     continue label$7;
    };
   }
   $399(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  }
  $56_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  label$9 : {
   $60_1 = $4_1 + 32 | 0;
   if ($60_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $60_1;
  }
  return $56_1 | 0;
 }
 
 function $45($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $24_1 = 0, $39_1 = 0, $61_1 = 0, $60_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $60_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $60_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $145(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = $147(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$3
   }
   $24_1 = 24;
   if (!((((HEAPU8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $24_1 | 0) >> $24_1 | 0 | 0) != (58 | 0) & 1 | 0)) {
    break label$3
   }
   $39_1 = 24;
   if (!((((HEAPU8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $39_1 | 0) >> $39_1 | 0 | 0) != (47 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[$5_1 >> 2] | 0) | 0) >> 0] = 47;
   HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
  }
  $145((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[$5_1 >> 2] | 0) | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$4 : {
   $61_1 = $5_1 + 16 | 0;
   if ($61_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $61_1;
  }
  return;
 }
 
 function $46($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $23_1 = 0, $25_1 = 0, $51_1 = 0, $60_1 = 0, $59_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $59_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $59_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(0 + 83320 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     label$6 : {
      if ($142(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) {
       break label$6
      }
      HEAP32[(0 + 83324 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $117();
      break label$3;
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
     continue label$5;
    };
   }
   $23_1 = 1;
   $25_1 = $23(32 | 0) | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $25_1;
   HEAP32[(0 + 83324 | 0) >> 2] = $25_1;
   HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 83320 | 0) >> 2] | 0;
   $36_1 = $145($24(($147(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] = $36_1;
   HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 29 | 0) >> 0] = $23_1;
   HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 28 | 0) >> 0] = $23_1;
   HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 9 | 0) >> 0] = $23_1;
   HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 0] = $23_1;
   HEAP32[(0 + 83320 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   label$7 : {
    if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (20 | 0) & 1 | 0)) {
     break label$7
    }
    $51_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP8[($51_1 + 8 | 0) >> 0] = (HEAPU8[($51_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 16 | 0;
   }
   $117();
  }
  label$8 : {
   $60_1 = $4_1 + 16 | 0;
   if ($60_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $60_1;
  }
  return;
 }
 
 function $47($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $24_1 = 0, $36_1 = 0, $48_1 = 0, $56_1 = 0, $59_1 = 0, $64_1 = 0, $74_1 = 0, $73_1 = 0, $53_1 = 0, $62_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $73_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $73_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  HEAP32[(0 + 75056 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : while (1) {
    if (!(((HEAPU8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $24_1 = 24;
    label$5 : {
     label$6 : {
      if (!((((HEAPU8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0) << $24_1 | 0) >> $24_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
       break label$6
      }
      break label$5;
     }
     $36_1 = 24;
     $48_1 = 24;
     HEAP32[$4_1 >> 2] = (($48(((HEAPU8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) >> 0] | 0) << $36_1 | 0) >> $36_1 | 0 | 0) | 0) << 4 | 0) + ($48(((HEAPU8[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0) << $48_1 | 0) >> $48_1 | 0 | 0) | 0) | 0;
     $53_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     $56_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = $56_1;
     $59_1 = 24;
     label$7 : {
      if (((HEAPU8[($53_1 + $56_1 | 0) >> 0] | 0) << $59_1 | 0) >> $59_1 | 0) {
       break label$7
      }
      break label$3;
     }
     $62_1 = HEAP32[$4_1 >> 2] | 0;
     $64_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
     HEAP32[(0 + 75056 | 0) >> 2] = $64_1 + 1 | 0;
     HEAP8[($64_1 + 74032 | 0) >> 0] = $62_1;
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $38();
  label$8 : {
   $74_1 = $4_1 + 16 | 0;
   if ($74_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $74_1;
  }
  return;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $88_1 = 0, $87_1 = 0, $84_1 = 0;
  $3_1 = global$0 - 96 | 0;
  label$1 : {
   $87_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $87_1;
  }
  HEAP32[($3_1 + 88 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) >= (48 | 0) & 1 | 0)) {
     break label$4
    }
    if (!((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) <= (57 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 92 | 0) >> 2] = (HEAP32[($3_1 + 88 | 0) >> 2] | 0) - 48 | 0;
    break label$3;
   }
   label$5 : {
    if (!((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) >= (97 | 0) & 1 | 0)) {
     break label$5
    }
    if (!((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) <= (102 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 92 | 0) >> 2] = ((HEAP32[($3_1 + 88 | 0) >> 2] | 0) - 97 | 0) + 10 | 0;
    break label$3;
   }
   label$6 : {
    if (!((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) >= (65 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) <= (70 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($3_1 + 92 | 0) >> 2] = ((HEAP32[($3_1 + 88 | 0) >> 2] | 0) - 65 | 0) + 10 | 0;
    break label$3;
   }
   HEAP32[$3_1 >> 2] = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
   $213($3_1 + 16 | 0 | 0, 5716 | 0, $3_1 | 0) | 0;
   $17(6 | 0, 0 & 1 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
   $197(5733 | 0) | 0;
   label$7 : {
    if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$7
    }
    $201(5761 | 0, HEAP32[(0 + 84928 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($3_1 + 92 | 0) >> 2] = 0;
  }
  $84_1 = HEAP32[($3_1 + 92 | 0) >> 2] | 0;
  label$8 : {
   $88_1 = $3_1 + 96 | 0;
   if ($88_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $88_1;
  }
  return $84_1 | 0;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $11_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $17(17 | 0, 1 & 1 | 0 | 0, 0 | 0) | 0;
  fimport$0(1 | 0);
  abort();
 }
 
 function $50($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $12_1 = 0, $31_1 = 0, $43_1 = 0, $57_1 = 0, $76_1 = 0, $91_1 = 0, $94_1 = 0, $100_1 = 0, $174_1 = 0, $184_1 = 0, $210_1 = 0, $217_1 = 0, $237_1 = 0, $245_1 = 0, $253_1 = 0, $263_1 = 0, $283_1 = 0, $293_1 = 0, $303_1 = 0, $311_1 = 0, $319_1 = 0, $329_1 = 0, $339_1 = 0, $349_1 = 0, $395_1 = 0, $430 = 0, $484 = 0, $492 = 0, $500 = 0, $510 = 0, $530 = 0, $540 = 0, $550 = 0, $558 = 0, $566 = 0, $576 = 0, $586 = 0, $596 = 0, $606 = 0, $605 = 0, $215_1 = 0, $235_1 = 0, $243_1 = 0, $251_1 = 0, $261_1 = 0, $281_1 = 0, $291_1 = 0, $301_1 = 0, $309_1 = 0, $317_1 = 0, $327_1 = 0, $337_1 = 0, $347_1 = 0, $416_1 = 0, $428 = 0, $456 = 0, $482 = 0, $490 = 0, $498 = 0, $508 = 0, $528 = 0, $538 = 0, $548 = 0, $556 = 0, $564 = 0, $574 = 0, $584 = 0, $594 = 0;
  $4_1 = global$0 - 336 | 0;
  label$1 : {
   $605 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $605;
  }
  $6_1 = 0;
  HEAP32[($4_1 + 332 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 328 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 312 | 0) >> 2] = $6_1;
  HEAP8[($4_1 + 311 | 0) >> 0] = 0;
  HEAP32[(0 + 75056 | 0) >> 2] = $6_1;
  $117();
  $12_1 = 24;
  label$3 : {
   if (!((((HEAPU8[(HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 0] | 0) << $12_1 | 0) >> $12_1 | 0 | 0) != (100 | 0) & 1 | 0)) {
    break label$3
   }
   $145(75060 | 0, 5790 | 0) | 0;
   HEAP8[(0 + 75062 | 0) >> 0] = HEAPU8[(HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 0] | 0;
   $8(75060 | 0);
  }
  $31_1 = 24;
  label$4 : {
   if (!((((HEAPU8[(HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 0] | 0) << $31_1 | 0) >> $31_1 | 0 | 0) == (100 | 0) & 1 | 0)) {
    break label$4
   }
   $43_1 = 24;
   if (!((((HEAPU8[((HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $43_1 | 0) >> $43_1 | 0 | 0) != (99 | 0) & 1 | 0)) {
    break label$4
   }
   $145(75064 | 0, 5790 | 0) | 0;
   $57_1 = 24;
   label$5 : {
    label$6 : {
     if (!((100 | 0) == (((HEAPU8[((HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $57_1 | 0) >> $57_1 | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP8[(0 + 75066 | 0) >> 0] = 108;
     break label$5;
    }
    HEAP8[(0 + 75066 | 0) >> 0] = HEAPU8[((HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
   }
   $8(75064 | 0);
  }
  $76_1 = 24;
  label$7 : {
   label$8 : {
    if (!((((HEAPU8[((HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $76_1 | 0) >> $76_1 | 0 | 0) == (118 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP8[($4_1 + 311 | 0) >> 0] = 1;
    HEAP32[($4_1 + 304 | 0) >> 2] = 0;
    label$9 : while (1) {
     $91_1 = 24;
     $94_1 = 0;
     label$10 : {
      if (!(((HEAPU8[((HEAP32[($4_1 + 332 | 0) >> 2] | 0) + (HEAP32[($4_1 + 304 | 0) >> 2] | 0) | 0) >> 0] | 0) << $91_1 | 0) >> $91_1 | 0)) {
       break label$10
      }
      $100_1 = 24;
      $94_1 = (((HEAPU8[((HEAP32[($4_1 + 332 | 0) >> 2] | 0) + (HEAP32[($4_1 + 304 | 0) >> 2] | 0) | 0) >> 0] | 0) << $100_1 | 0) >> $100_1 | 0 | 0) != (32 | 0);
     }
     label$11 : {
      if (!($94_1 & 1 | 0)) {
       break label$11
      }
      HEAP32[($4_1 + 304 | 0) >> 2] = (HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     }
     break label$9;
    };
    HEAP32[($4_1 + 320 | 0) >> 2] = $113(HEAP32[($4_1 + 332 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 304 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 332 | 0) >> 2] = (HEAP32[($4_1 + 332 | 0) >> 2] | 0) + (HEAP32[($4_1 + 304 | 0) >> 2] | 0) | 0;
    label$12 : {
     if (!((HEAP32[($4_1 + 320 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$12
     }
     $197(5794 | 0) | 0;
     break label$7;
    }
    label$13 : {
     label$14 : {
      if (!(((HEAPU8[((HEAP32[($4_1 + 320 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
       break label$14
      }
      HEAP32[($4_1 + 312 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 320 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      break label$13;
     }
     $197(5814 | 0) | 0;
     break label$7;
    }
   }
   HEAP32[($4_1 + 324 | 0) >> 2] = $76(HEAP32[($4_1 + 332 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   label$15 : {
    label$16 : while (1) {
     if (!((HEAP32[($4_1 + 324 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$15
     }
     HEAP32[($4_1 + 316 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 324 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     label$17 : {
      if (!(((HEAPU8[((HEAP32[($4_1 + 324 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
       break label$17
      }
      HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 4 | 0;
     }
     label$18 : {
      label$19 : {
       if (!(((HEAPU8[((HEAP32[($4_1 + 324 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 8 | 0)) {
        break label$19
       }
       HEAP32[($4_1 + 300 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 324 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       label$20 : {
        label$21 : while (1) {
         $174_1 = (HEAPU8[(HEAP32[($4_1 + 300 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0;
         HEAP32[($4_1 + 316 | 0) >> 2] = $174_1;
         if (!$174_1) {
          break label$20
         }
         label$22 : {
          if (!(((HEAPU8[($4_1 + 311 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
           break label$22
          }
          $184_1 = 0;
          $112(HEAP32[($4_1 + 316 | 0) >> 2] | 0 | 0, $184_1 | 0);
          HEAP32[($4_1 + 320 | 0) >> 2] = $76(HEAP32[($4_1 + 312 | 0) >> 2] | 0 | 0, $184_1 | 0) | 0;
          HEAP32[($4_1 + 316 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 320 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
          label$23 : {
           if (!(((HEAPU8[((HEAP32[($4_1 + 320 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
            break label$23
           }
           HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 8 | 0;
          }
          $118(HEAP32[($4_1 + 320 | 0) >> 2] | 0 | 0);
         }
         $210_1 = (HEAP32[(0 + 84880 | 0) >> 2] | 0) + -3 | 0;
         label$24 : {
          label$25 : {
           label$26 : {
            label$27 : {
             label$28 : {
              if ($210_1 >>> 0 > 16 >>> 0) {
               break label$28
              }
              switch ($210_1 | 0) {
              case 16:
               break label$25;
              case 3:
               break label$26;
              case 1:
              case 2:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
               break label$28;
              default:
               break label$27;
              };
             }
            }
            $215_1 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
            $217_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
            HEAP32[(0 + 75056 | 0) >> 2] = $217_1 + 1 | 0;
            HEAP8[($217_1 + 74032 | 0) >> 0] = $215_1;
            break label$24;
           }
           label$29 : {
            label$30 : {
             if (!(((HEAPU8[(0 + 12545 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
              break label$30
             }
             $235_1 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
             $237_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
             HEAP32[(0 + 75056 | 0) >> 2] = $237_1 + 1 | 0;
             HEAP8[($237_1 + 74032 | 0) >> 0] = $235_1;
             $243_1 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
             $245_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
             HEAP32[(0 + 75056 | 0) >> 2] = $245_1 + 1 | 0;
             HEAP8[($245_1 + 74032 | 0) >> 0] = $243_1;
             break label$29;
            }
            $251_1 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
            $253_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
            HEAP32[(0 + 75056 | 0) >> 2] = $253_1 + 1 | 0;
            HEAP8[($253_1 + 74032 | 0) >> 0] = $251_1;
            $261_1 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
            $263_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
            HEAP32[(0 + 75056 | 0) >> 2] = $263_1 + 1 | 0;
            HEAP8[($263_1 + 74032 | 0) >> 0] = $261_1;
           }
           break label$24;
          }
          label$31 : {
           label$32 : {
            if (!(((HEAPU8[(0 + 12545 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
             break label$32
            }
            $281_1 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0;
            $283_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
            HEAP32[(0 + 75056 | 0) >> 2] = $283_1 + 1 | 0;
            HEAP8[($283_1 + 74032 | 0) >> 0] = $281_1;
            $291_1 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 16 | 0) & 255 | 0;
            $293_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
            HEAP32[(0 + 75056 | 0) >> 2] = $293_1 + 1 | 0;
            HEAP8[($293_1 + 74032 | 0) >> 0] = $291_1;
            $301_1 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
            $303_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
            HEAP32[(0 + 75056 | 0) >> 2] = $303_1 + 1 | 0;
            HEAP8[($303_1 + 74032 | 0) >> 0] = $301_1;
            $309_1 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
            $311_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
            HEAP32[(0 + 75056 | 0) >> 2] = $311_1 + 1 | 0;
            HEAP8[($311_1 + 74032 | 0) >> 0] = $309_1;
            break label$31;
           }
           $317_1 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
           $319_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
           HEAP32[(0 + 75056 | 0) >> 2] = $319_1 + 1 | 0;
           HEAP8[($319_1 + 74032 | 0) >> 0] = $317_1;
           $327_1 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
           $329_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
           HEAP32[(0 + 75056 | 0) >> 2] = $329_1 + 1 | 0;
           HEAP8[($329_1 + 74032 | 0) >> 0] = $327_1;
           $337_1 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 16 | 0) & 255 | 0;
           $339_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
           HEAP32[(0 + 75056 | 0) >> 2] = $339_1 + 1 | 0;
           HEAP8[($339_1 + 74032 | 0) >> 0] = $337_1;
           $347_1 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0;
           $349_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
           HEAP32[(0 + 75056 | 0) >> 2] = $349_1 + 1 | 0;
           HEAP8[($349_1 + 74032 | 0) >> 0] = $347_1;
          }
         }
         HEAP32[($4_1 + 300 | 0) >> 2] = (HEAP32[($4_1 + 300 | 0) >> 2] | 0) + 1 | 0;
         continue label$21;
        };
       }
       break label$18;
      }
      label$33 : {
       if (!(((HEAPU8[($4_1 + 311 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
        break label$33
       }
       $112(HEAP32[($4_1 + 316 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($4_1 + 324 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 0);
       HEAP32[($4_1 + 320 | 0) >> 2] = $76(HEAP32[($4_1 + 312 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
       HEAP32[($4_1 + 316 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 320 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
       label$34 : {
        if (!(((HEAPU8[((HEAP32[($4_1 + 320 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
         break label$34
        }
        HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 16 | 0;
       }
       $118(HEAP32[($4_1 + 320 | 0) >> 2] | 0 | 0);
      }
      $395_1 = (HEAP32[(0 + 84880 | 0) >> 2] | 0) + -3 | 0;
      label$35 : {
       label$36 : {
        label$37 : {
         label$38 : {
          label$39 : {
           if ($395_1 >>> 0 > 16 >>> 0) {
            break label$39
           }
           switch ($395_1 | 0) {
           case 16:
            break label$36;
           case 3:
            break label$37;
           case 1:
           case 2:
           case 4:
           case 5:
           case 6:
           case 7:
           case 8:
           case 9:
           case 10:
           case 11:
           case 12:
           case 13:
           case 14:
           case 15:
            break label$39;
           default:
            break label$38;
           };
          }
         }
         label$40 : {
          label$41 : {
           if ((HEAP32[($4_1 + 316 | 0) >> 2] | 0 | 0) < (-255 | 0) & 1 | 0) {
            break label$41
           }
           if (!((HEAP32[($4_1 + 316 | 0) >> 2] | 0 | 0) > (255 | 0) & 1 | 0)) {
            break label$40
           }
          }
          $416_1 = HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 316 | 0) >> 2] | 0;
          HEAP32[$4_1 >> 2] = $416_1;
          $213($4_1 + 160 | 0 | 0, 5844 | 0, $4_1 | 0) | 0;
          $17(20 | 0, 0 & 1 | 0 | 0, $4_1 + 160 | 0 | 0) | 0;
         }
         $428 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
         $430 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
         HEAP32[(0 + 75056 | 0) >> 2] = $430 + 1 | 0;
         HEAP8[($430 + 74032 | 0) >> 0] = $428;
         break label$35;
        }
        label$42 : {
         if (!((HEAPU8[(0 + 75089 | 0) >> 0] | 0) & 1 | 0)) {
          break label$42
         }
         label$43 : {
          if ((HEAP32[($4_1 + 316 | 0) >> 2] | 0 | 0) < (-65535 | 0) & 1 | 0) {
           break label$43
          }
          if (!((HEAP32[($4_1 + 316 | 0) >> 2] | 0 | 0) > (65535 | 0) & 1 | 0)) {
           break label$42
          }
         }
         $456 = HEAP32[((HEAP32[($4_1 + 328 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 316 | 0) >> 2] | 0;
         HEAP32[($4_1 + 16 | 0) >> 2] = $456;
         $213($4_1 + 32 | 0 | 0, 5844 | 0, $4_1 + 16 | 0 | 0) | 0;
         $17(21 | 0, 0 & 1 | 0 | 0, $4_1 + 32 | 0 | 0) | 0;
        }
        label$44 : {
         label$45 : {
          if (!(((HEAPU8[(0 + 12545 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
           break label$45
          }
          $482 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
          $484 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
          HEAP32[(0 + 75056 | 0) >> 2] = $484 + 1 | 0;
          HEAP8[($484 + 74032 | 0) >> 0] = $482;
          $490 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
          $492 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
          HEAP32[(0 + 75056 | 0) >> 2] = $492 + 1 | 0;
          HEAP8[($492 + 74032 | 0) >> 0] = $490;
          break label$44;
         }
         $498 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
         $500 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
         HEAP32[(0 + 75056 | 0) >> 2] = $500 + 1 | 0;
         HEAP8[($500 + 74032 | 0) >> 0] = $498;
         $508 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
         $510 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
         HEAP32[(0 + 75056 | 0) >> 2] = $510 + 1 | 0;
         HEAP8[($510 + 74032 | 0) >> 0] = $508;
        }
        break label$35;
       }
       label$46 : {
        label$47 : {
         if (!(((HEAPU8[(0 + 12545 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break label$47
         }
         $528 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0;
         $530 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
         HEAP32[(0 + 75056 | 0) >> 2] = $530 + 1 | 0;
         HEAP8[($530 + 74032 | 0) >> 0] = $528;
         $538 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 16 | 0) & 255 | 0;
         $540 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
         HEAP32[(0 + 75056 | 0) >> 2] = $540 + 1 | 0;
         HEAP8[($540 + 74032 | 0) >> 0] = $538;
         $548 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
         $550 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
         HEAP32[(0 + 75056 | 0) >> 2] = $550 + 1 | 0;
         HEAP8[($550 + 74032 | 0) >> 0] = $548;
         $556 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
         $558 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
         HEAP32[(0 + 75056 | 0) >> 2] = $558 + 1 | 0;
         HEAP8[($558 + 74032 | 0) >> 0] = $556;
         break label$46;
        }
        $564 = (HEAP32[($4_1 + 316 | 0) >> 2] | 0) & 255 | 0;
        $566 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
        HEAP32[(0 + 75056 | 0) >> 2] = $566 + 1 | 0;
        HEAP8[($566 + 74032 | 0) >> 0] = $564;
        $574 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
        $576 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
        HEAP32[(0 + 75056 | 0) >> 2] = $576 + 1 | 0;
        HEAP8[($576 + 74032 | 0) >> 0] = $574;
        $584 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 16 | 0) & 255 | 0;
        $586 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
        HEAP32[(0 + 75056 | 0) >> 2] = $586 + 1 | 0;
        HEAP8[($586 + 74032 | 0) >> 0] = $584;
        $594 = ((HEAP32[($4_1 + 316 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0;
        $596 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
        HEAP32[(0 + 75056 | 0) >> 2] = $596 + 1 | 0;
        HEAP8[($596 + 74032 | 0) >> 0] = $594;
       }
      }
     }
     HEAP32[($4_1 + 324 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 324 | 0) >> 2] | 0) >> 2] | 0;
     continue label$16;
    };
   }
   $38();
   $118(HEAP32[($4_1 + 324 | 0) >> 2] | 0 | 0);
  }
  label$48 : {
   $606 = $4_1 + 336 | 0;
   if ($606 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $606;
  }
  return;
 }
 
 function $51($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $25_1 = 0, $27_1 = 0, $93_1 = 0, $92_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $92_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $92_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = 1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$3 : {
   if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = 2;
  }
  label$4 : {
   if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (19 | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = 4;
  }
  $25_1 = 0;
  $117();
  $27_1 = $76(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $25_1 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $27_1;
  label$5 : {
   if (!(($27_1 | 0) != ($25_1 | 0) & 1 | 0)) {
    break label$5
   }
   label$6 : {
    if (!((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   }
   label$7 : {
    label$8 : {
     if (!(((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 32 | 0;
     break label$7;
    }
    label$9 : {
     if (!((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$9
     }
     if (!(((HEAPU8[((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 32 | 0;
    }
    $52(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
   }
   $118(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  }
  label$10 : {
   $93_1 = $4_1 + 32 | 0;
   if ($93_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $93_1;
  }
  return;
 }
 
 function $52($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $16_1 = 0, $137_1 = 0, $136_1 = 0;
  $5_1 = global$0 - 32 | 0;
  label$1 : {
   $136_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $136_1;
  }
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (HEAP32[($5_1 + 16 | 0) >> 2] | 0) {
     break label$4
    }
    break label$3;
   }
   HEAP8[($5_1 + 11 | 0) >> 0] = HEAPU8[($5_1 + 31 | 0) >> 0] | 0;
   HEAP8[($5_1 + 10 | 0) >> 0] = HEAPU16[($5_1 + 30 | 0) >> 1] | 0;
   HEAP8[($5_1 + 9 | 0) >> 0] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) >>> 8 | 0;
   HEAP8[($5_1 + 8 | 0) >> 0] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   $16_1 = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + -1 | 0;
   label$5 : {
    if ($16_1 >>> 0 > 3 >>> 0) {
     break label$5
    }
    label$6 : {
     switch ($16_1 | 0) {
     default:
      $405(74032 | 0, (HEAPU8[($5_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 0, 1024 | 0) | 0;
      break label$5;
     case 1:
      HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 1 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = 0;
      label$9 : {
       label$10 : while (1) {
        if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < 1024 >>> 0 & 1 | 0)) {
         break label$9
        }
        label$11 : {
         label$12 : {
          if (!(((HEAPU8[(0 + 12545 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
           break label$12
          }
          HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 0 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 9 | 0) >> 0] | 0;
          HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
          break label$11;
         }
         HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 0 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 9 | 0) >> 0] | 0;
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 2 | 0;
        continue label$10;
       };
      }
      break label$5;
     case 2:
      break label$5;
     case 3:
      break label$6;
     };
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    label$13 : {
     label$14 : while (1) {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >>> 0 < 1024 >>> 0 & 1 | 0)) {
       break label$13
      }
      label$15 : {
       label$16 : {
        if (!(((HEAPU8[(0 + 12545 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
         break label$16
        }
        HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 0 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 11 | 0) >> 0] | 0;
        HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 10 | 0) >> 0] | 0;
        HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 2 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 9 | 0) >> 0] | 0;
        HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 3 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
        break label$15;
       }
       HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 0 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
       HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 9 | 0) >> 0] | 0;
       HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 2 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 10 | 0) >> 0] | 0;
       HEAP8[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 3 | 0) + 74032 | 0) >> 0] = HEAPU8[($5_1 + 11 | 0) >> 0] | 0;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
      continue label$14;
     };
    }
   }
   HEAP32[(0 + 75056 | 0) >> 2] = 1024;
   label$17 : {
    label$18 : while (1) {
     if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 > 1024 >>> 0 & 1 | 0)) {
      break label$17
     }
     $38();
     HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) - 1024 | 0;
     continue label$18;
    };
   }
   HEAP32[(0 + 75056 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   $38();
  }
  label$19 : {
   $137_1 = $5_1 + 32 | 0;
   if ($137_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $137_1;
  }
  return;
 }
 
 function $53($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $19_1 = 0, $26_1 = 0, $75_1 = 0, $74_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $74_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $74_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
     break label$4
    }
    $19_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
    HEAP8[($19_1 + 8 | 0) >> 0] = (HEAPU8[($19_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 1 | 0;
    break label$3;
   }
   $26_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
   HEAP8[($26_1 + 8 | 0) >> 0] = ((HEAPU8[($26_1 + 8 | 0) >> 0] | 0) & 255 | 0) & -2 | 0;
  }
  label$5 : {
   if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 28 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 28 | 0) >> 0] = HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0;
  }
  label$6 : {
   if (!((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP8[(0 + 12544 | 0) >> 0] = HEAP32[((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   label$7 : {
    if (!(((HEAPU8[((HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
     break label$7
    }
    $17(26 | 0, 1 & 1 | 0 | 0, 0 | 0) | 0;
   }
  }
  $117();
  $118(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  label$8 : {
   $75_1 = $4_1 + 16 | 0;
   if ($75_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $75_1;
  }
  return;
 }
 
 function $54($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $30_1 = 0, $37_1 = 0, $62_1 = 0, $61_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $61_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $61_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  $9_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
  HEAP8[($9_1 + 8 | 0) >> 0] = (HEAPU8[($9_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 32 | 0;
  label$3 : {
   if (!((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0)) {
    break label$3
   }
   HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if (!(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
      break label$5
     }
     $30_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
     HEAP8[($30_1 + 9 | 0) >> 0] = (HEAPU8[($30_1 + 9 | 0) >> 0] | 0) & 255 | 0 | 1 | 0;
     break label$4;
    }
    $37_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
    HEAP8[($37_1 + 9 | 0) >> 0] = ((HEAPU8[($37_1 + 9 | 0) >> 0] | 0) & 255 | 0) & -2 | 0;
   }
   label$6 : {
    if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 29 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 29 | 0) >> 0] = HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0;
   }
  }
  $117();
  $118(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  label$7 : {
   $62_1 = $4_1 + 16 | 0;
   if ($62_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $62_1;
  }
  return;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $15_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $14_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $6_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
  HEAP8[($6_1 + 8 | 0) >> 0] = ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 255 | 0) & -33 | 0;
  label$3 : {
   $15_1 = $4_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $15_1;
  }
  return;
 }
 
 function $56($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $25_1 = 0, $32_1 = 0, $167_1 = 0, $166_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $166_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $166_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $76(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  HEAP8[($4_1 + 19 | 0) >> 0] = $5_1;
  HEAP8[($4_1 + 18 | 0) >> 0] = ((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0;
  label$3 : {
   label$4 : {
    if (!(((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) != ($5_1 & 255 | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $25_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
    HEAP8[($25_1 + 9 | 0) >> 0] = (HEAPU8[($25_1 + 9 | 0) >> 0] | 0) & 255 | 0 | 4 | 0;
    break label$3;
   }
   $32_1 = HEAP32[(0 + 83324 | 0) >> 2] | 0;
   HEAP8[($32_1 + 8 | 0) >> 0] = (HEAPU8[($32_1 + 8 | 0) >> 0] | 0) & 255 | 0 | 4 | 0;
  }
  label$5 : {
   if (!((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$5
   }
   label$6 : {
    label$7 : {
     if (!(((HEAPU8[((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 64 | 0;
     break label$6;
    }
    HEAP8[($4_1 + 19 | 0) >> 0] = HEAP32[((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   }
  }
  label$8 : {
   label$9 : {
    if (!(((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$9
    }
    label$10 : {
     label$11 : {
      if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | ((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 128 | 0;
      break label$10;
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - (((HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0) % ((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0) | 0) | 0;
     label$12 : {
      if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      $52((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0);
     }
    }
    break label$8;
   }
   label$13 : {
    label$14 : {
     if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0 | ((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 256 | 0;
     break label$13;
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - (((HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >>> 0) % ((HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >>> 0) | 0) | 0;
    label$15 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$15
     }
     $52((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0);
    }
   }
  }
  $118(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  $117();
  label$16 : {
   $167_1 = $4_1 + 32 | 0;
   if ($167_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $167_1;
  }
  return;
 }
 
 function $57($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $15_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(0 + 84896 | 0) >> 2] = (HEAP32[(0 + 84896 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 84892 | 0) >> 2] = HEAP32[(0 + 84896 | 0) >> 2] | 0;
  $117();
  label$3 : {
   $16_1 = $4_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $16_1;
  }
  return;
 }
 
 function $58($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $21_1 = 0, $33_1 = 0, $143_1 = 0, $162_1 = 0, $170_1 = 0, $178_1 = 0, $184_1 = 0, $192_1 = 0, $191_1 = 0, $114_1 = 0, $160_1 = 0, $168_1 = 0, $176_1 = 0, $182_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $191_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $191_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $76(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(($147(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$4
    }
    $21_1 = 24;
    label$5 : {
     if ((((HEAPU8[(HEAP32[(0 + 83344 | 0) >> 2] | 0) >> 0] | 0) << $21_1 | 0) >> $21_1 | 0 | 0) == (46 | 0) & 1 | 0) {
      break label$5
     }
     $33_1 = 24;
     if (!((((HEAPU8[(HEAP32[(0 + 83344 | 0) >> 2] | 0) >> 0] | 0) << $33_1 | 0) >> $33_1 | 0 | 0) == (42 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP8[(HEAP32[(0 + 83344 | 0) >> 2] | 0) >> 0] = 46;
     if (!(1 & 1 | 0)) {
      break label$4
     }
    }
    label$6 : {
     label$7 : {
      if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
       break label$7
      }
      $54(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
      break label$6;
     }
     $53(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
    }
    break label$3;
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = $113(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0, $147(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   label$8 : {
    if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$8
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = $115(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0, $147(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   }
   label$9 : {
    if (((HEAPU8[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
     break label$9
    }
    label$10 : {
     label$11 : {
      if (!(((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 512 | 0;
      break label$10;
     }
     label$12 : {
      if (!((HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      $17(19 | 0, 0 & 1 | 0 | 0, 0 | 0) | 0;
      $114_1 = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      HEAP32[$4_1 >> 2] = $114_1;
      $173(5851 | 0, $4_1 | 0) | 0;
      HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 1024 | 0;
     }
    }
   }
   HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP8[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 0] = ((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 9 | 0;
   HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   $143_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP8[($143_1 + 12 | 0) >> 0] = ((HEAPU8[($143_1 + 12 | 0) >> 0] | 0) & 255 | 0) & -41 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[(0 + 75056 | 0) >> 2] = 0;
   label$13 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 > 65535 >>> 0 & 1 | 0)) {
     break label$13
    }
    $160_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 24 | 0;
    $162_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
    HEAP32[(0 + 75056 | 0) >> 2] = $162_1 + 1 | 0;
    HEAP8[($162_1 + 74032 | 0) >> 0] = $160_1;
    $168_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 16 | 0;
    $170_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
    HEAP32[(0 + 75056 | 0) >> 2] = $170_1 + 1 | 0;
    HEAP8[($170_1 + 74032 | 0) >> 0] = $168_1;
   }
   $176_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 8 | 0;
   $178_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
   HEAP32[(0 + 75056 | 0) >> 2] = $178_1 + 1 | 0;
   HEAP8[($178_1 + 74032 | 0) >> 0] = $176_1;
   $182_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   $184_1 = HEAP32[(0 + 75056 | 0) >> 2] | 0;
   HEAP32[(0 + 75056 | 0) >> 2] = $184_1 + 1 | 0;
   HEAP8[($184_1 + 74032 | 0) >> 0] = $182_1;
   $118(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
  }
  label$14 : {
   $192_1 = $4_1 + 32 | 0;
   if ($192_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $192_1;
  }
  return;
 }
 
 function $59($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $45_1 = 0, $44_1 = 0, $40_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $44_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $44_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = $147(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0) | 0;
  $12_1 = $113(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $12_1;
  label$3 : {
   label$4 : {
    if (!(($12_1 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : {
     if (!(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 8 | 0)) {
      break label$5
     }
     $399(HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    }
    break label$3;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $115(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  }
  HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
  HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] = 56;
  $40_1 = $145($24(($147(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = $40_1;
  label$6 : {
   $45_1 = $4_1 + 16 | 0;
   if ($45_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $45_1;
  }
  return;
 }
 
 function $60($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $79_1 = 0, $78_1 = 0, $56_1 = 0;
  $4_1 = global$0 - 320 | 0;
  label$1 : {
   $78_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $78_1;
  }
  HEAP32[($4_1 + 316 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 312 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 308 | 0) >> 2] = $76(HEAP32[($4_1 + 316 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  HEAP32[($4_1 + 304 | 0) >> 2] = HEAP32[($4_1 + 308 | 0) >> 2] | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 304 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (((HEAPU8[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (!(((HEAPU8[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 40 | 0)) {
        break label$7
       }
       HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       $213($4_1 + 48 | 0 | 0, 5889 | 0, $4_1 + 16 | 0 | 0) | 0;
       break label$6;
      }
      HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 304 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $213($4_1 + 48 | 0 | 0, 5892 | 0, $4_1 + 32 | 0 | 0) | 0;
     }
     label$8 : {
      if (!((HEAP32[(0 + 84928 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$8
      }
      $56_1 = HEAP32[(0 + 84928 | 0) >> 2] | 0;
      HEAP32[$4_1 >> 2] = $4_1 + 48 | 0;
      $196($56_1 | 0, 5897 | 0, $4_1 | 0) | 0;
     }
     $2(5901 | 0);
     $2($4_1 + 48 | 0 | 0);
    }
    HEAP32[($4_1 + 304 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 304 | 0) >> 2] | 0) >> 2] | 0;
    continue label$4;
   };
  }
  $2(5903 | 0);
  label$9 : {
   if (!((HEAP32[(0 + 84928 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$9
   }
   $170(10 | 0, HEAP32[(0 + 84928 | 0) >> 2] | 0 | 0) | 0;
  }
  label$10 : {
   $79_1 = $4_1 + 320 | 0;
   if ($79_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $79_1;
  }
  return;
 }
 
 function $61($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $39_1 = 0, $49_1 = 0, $48_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $48_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $48_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $113(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0, $147(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0) & 1 | 0) {
    break label$3
   }
   HEAP32[$4_1 >> 2] = $115(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0, $147(HEAP32[(0 + 83344 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  }
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP8[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 0] = ((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 9 | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $39_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP8[($39_1 + 12 | 0) >> 0] = ((HEAPU8[($39_1 + 12 | 0) >> 0] | 0) & 255 | 0) & -41 | 0;
  $118(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  label$4 : {
   $49_1 = $4_1 + 16 | 0;
   if ($49_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $49_1;
  }
  return;
 }
 
 function $62($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $59_1 = 0, $36_1 = 0, $39_1 = 0, $43_1 = 0, $56_1 = 0, $64_1 = 0, $75_1 = 0, $116_1 = 0, $130_1 = 0, $189_1 = 0, $188_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $188_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $188_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $117();
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 84888 | 0) >> 2] | 0 | 0) == (32 | 0) & 1 | 0)) {
     break label$4
    }
    $197(5905 | 0) | 0;
    break label$3;
   }
   HEAP32[(0 + 84888 | 0) >> 2] = (HEAP32[(0 + 84888 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $24((($147(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) + 1 | 0 | 0) | 0;
   HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] = 0;
   $145((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   label$5 : while (1) {
    $36_1 = 24;
    $39_1 = 0;
    label$6 : {
     if (!(((HEAPU8[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 0] | 0) << $36_1 | 0) >> $36_1 | 0)) {
      break label$6
     }
     $43_1 = 24;
     $39_1 = (((HEAPU8[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 0] | 0) << $43_1 | 0) >> $43_1 | 0 | 0) != (10 | 0);
    }
    label$7 : {
     if (!($39_1 & 1 | 0)) {
      break label$7
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     label$8 : while (1) {
      $56_1 = 24;
      $59_1 = 0;
      label$9 : {
       if (!(((HEAPU8[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 0] | 0) << $56_1 | 0) >> $56_1 | 0)) {
        break label$9
       }
       $64_1 = 24;
       $59_1 = 0;
       if (!((((HEAPU8[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 0] | 0) << $64_1 | 0) >> $64_1 | 0 | 0) != (10 | 0) & 1 | 0)) {
        break label$9
       }
       $75_1 = 24;
       $59_1 = (((HEAPU8[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 0] | 0) << $75_1 | 0) >> $75_1 | 0 | 0) != (44 | 0);
      }
      label$10 : {
       if (!($59_1 & 1 | 0)) {
        break label$10
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      }
      break label$8;
     };
     HEAP32[($4_1 + 8 | 0) >> 2] = $24(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) + 5 | 0 | 0) | 0;
     HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = 0;
     HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     $404((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 28 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0 | 0) | 0;
     HEAP8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) - (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0) | 0) >> 0] = 0;
     $116_1 = 24;
     label$11 : {
      if (!((((HEAPU8[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 0] | 0) << $116_1 | 0) >> $116_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     }
     label$12 : {
      label$13 : while (1) {
       $130_1 = 24;
       if (!((((HEAPU8[(HEAP32[($4_1 + 28 | 0) >> 2] | 0) >> 0] | 0) << $130_1 | 0) >> $130_1 | 0 | 0) == (32 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       continue label$13;
      };
     }
     continue label$5;
    }
    break label$5;
   };
   HEAP32[($4_1 + 20 | 0) >> 2] = $23(36 | 0) | 0;
   HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 83312 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
   HEAP8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 0] = 1;
   HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[(0 + 84892 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[(0 + 84900 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   HEAP32[(0 + 83312 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   HEAP32[(0 + 84896 | 0) >> 2] = (HEAP32[(0 + 84896 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(0 + 84892 | 0) >> 2] = HEAP32[(0 + 84896 | 0) >> 2] | 0;
   HEAP32[(0 + 84904 | 0) >> 2] = (HEAP32[(0 + 84904 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[(0 + 84900 | 0) >> 2] = HEAP32[(0 + 84904 | 0) >> 2] | 0;
  }
  label$14 : {
   $189_1 = $4_1 + 32 | 0;
   if ($189_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $189_1;
  }
  return;
 }
 
 function $63($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $12_1 = 0, $21_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : while (1) {
    if (!(((HEAPU8[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
     break label$3
    }
    $12_1 = 0;
    $64($12_1 | 0, $12_1 | 0);
    continue label$4;
   };
  }
  $206(HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 0 | 0, 2 | 0) | 0;
  label$5 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $45_1 = 0, $44_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $44_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $44_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(0 + 83312 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!(((HEAPU8[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[(0 + 84888 | 0) >> 2] = (HEAP32[(0 + 84888 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 16 | 0) >> 2] | 0) >> 2] | 0;
      $399(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
      HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      continue label$6;
     };
    }
    HEAP32[(0 + 84892 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
    HEAP32[(0 + 84900 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0;
    HEAP32[(0 + 83312 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    $399(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
    break label$3;
   }
   $197(5930 | 0) | 0;
  }
  label$7 : {
   $45_1 = $4_1 + 32 | 0;
   if ($45_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $45_1;
  }
  return;
 }
 
 function $65($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $8_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $64($5_1 | 0, $5_1 | 0);
  label$3 : {
   $9_1 = $4_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  return;
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  HEAP32[($4_1 + 4 | 0) >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
  $67(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 0) == ($5_1 | 0) & 1 | 0 | 0);
  $118(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $25_1 = 0, $44_1 = 0, $43_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $43_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $43_1;
  }
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $23(12 | 0) | 0;
  HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 83328 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(0 + 83312 | 0) >> 2] | 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 0] = 0;
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 9 | 0) >> 0] = (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 1 | 0;
  $25_1 = 0;
  label$3 : {
   if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0)) {
    break label$3
   }
   $25_1 = ((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0);
  }
  HEAP8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 10 | 0) >> 0] = $25_1 & 1 | 0;
  HEAP32[(0 + 83328 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   $44_1 = $3_1 + 16 | 0;
   if ($44_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $44_1;
  }
  return;
 }
 
 function $68($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  HEAP32[($4_1 + 4 | 0) >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
  $67(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 0) != ($5_1 | 0) & 1 | 0 | 0);
  $118(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  label$3 : {
   $21_1 = $4_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $80_1 = 0, $79_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $79_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $79_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$5
     }
     if (((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
      break label$4
     }
    }
    $67(0 & 1 | 0 | 0);
    break label$3;
   }
   $117();
   HEAP32[($4_1 + 4 | 0) >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   label$6 : {
    label$7 : {
     if (!(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 2048 | 0;
     $67(0 & 1 | 0 | 0);
     HEAP8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] = 0;
     HEAP32[(0 + 75104 | 0) >> 2] = HEAP32[(0 + 75104 | 0) >> 2] | 0 | 1 | 0;
     break label$6;
    }
    $67((((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0) ^ -1 | 0) & 1 | 0 | 0);
   }
   $118(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  label$8 : {
   $80_1 = $4_1 + 16 | 0;
   if ($80_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $80_1;
  }
  return;
 }
 
 function $70($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $35_1 = 0, $34_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $34_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $34_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   if (!((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0)) {
    break label$3
   }
   if (((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 4 | 0) {
    break label$3
   }
   $117();
   HEAP8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] = (((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) ^ -1 | 0) & 1 | 0;
  }
  label$4 : {
   $35_1 = $4_1 + 16 | 0;
   if ($35_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $35_1;
  }
  return;
 }
 
 function $71($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $40_1 = 0, $39_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $39_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $39_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(0 + 83328 | 0) >> 2] | 0;
  label$3 : {
   if (((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 4 | 0) {
    break label$3
   }
   label$4 : {
    if (!(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $117();
   }
   label$5 : {
    label$6 : {
     if (!((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 83312 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     $197(5949 | 0) | 0;
     break label$5;
    }
    HEAP32[(0 + 83328 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
    $399(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   }
  }
  label$7 : {
   $40_1 = $4_1 + 16 | 0;
   if ($40_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $40_1;
  }
  return;
 }
 
 function $72($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $48_1 = 0, $87_1 = 0, $110_1 = 0, $109_1 = 0, $77_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $109_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $109_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$5
     }
     if (((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
      break label$4
     }
    }
    $67(0 & 1 | 0 | 0);
    break label$3;
   }
   $117();
   HEAP32[$4_1 >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   label$6 : {
    if (HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0) {
     break label$6
    }
    $67(0 & 1 | 0 | 0);
    $118(HEAP32[$4_1 >> 2] | 0 | 0);
    break label$3;
   }
   label$7 : {
    if (!((HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$7
    }
    $48_1 = 0;
    $67($48_1 & 1 | 0 | 0);
    $118(HEAP32[$4_1 >> 2] | 0 | 0);
    $17(28 | 0, $48_1 & 1 | 0 | 0, 0 | 0) | 0;
    break label$3;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $23(24 | 0) | 0;
   HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 83316 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[(0 + 83312 | 0) >> 2] | 0;
   label$8 : {
    label$9 : {
     if (!(((HEAPU8[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
     break label$8;
    }
    $77_1 = $200(HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = $77_1;
   }
   HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0;
   $87_1 = HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 0] | 0;
   HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 20 | 0) >> 0] = $87_1;
   label$10 : {
    if (!($87_1 & 255 | 0)) {
     break label$10
    }
    HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 4096 | 0;
   }
   HEAP32[(0 + 83316 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   $118(HEAP32[$4_1 >> 2] | 0 | 0);
   $67(1 & 1 | 0 | 0);
  }
  label$11 : {
   $110_1 = $4_1 + 16 | 0;
   if ($110_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $110_1;
  }
  return;
 }
 
 function $73($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $27_1 = 0, $52_1 = 0, $55_1 = 0, $80_1 = 0, $88_1 = 0, $87_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $87_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $87_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!(((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$5
     }
     if (((HEAPU8[((HEAP32[(0 + 83328 | 0) >> 2] | 0) + 10 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
      break label$4
     }
    }
    $27_1 = 0;
    $71($27_1 | 0, $27_1 | 0);
    break label$3;
   }
   label$6 : {
    if (!((HEAP32[(0 + 83316 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[((HEAP32[(0 + 83316 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 83312 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    label$7 : {
     label$8 : {
      if ((HEAPU8[((HEAP32[(0 + 83316 | 0) >> 2] | 0) + 20 | 0) >> 0] | 0) & 255 | 0) {
       break label$8
      }
      $52_1 = HEAP32[(0 + 83316 | 0) >> 2] | 0;
      $55_1 = (HEAP32[($52_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($52_1 + 4 | 0) >> 2] = $55_1;
      if (!$55_1) {
       break label$8
      }
      label$9 : {
       label$10 : {
        if (!(((HEAPU8[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 16 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
         break label$10
        }
        HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83316 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
        break label$9;
       }
       $206(HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[(0 + 83316 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
      }
      HEAP32[((HEAP32[(0 + 83312 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83316 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      break label$7;
     }
     $80_1 = 0;
     $9(83316 | 0, 24 | 0);
     $71($80_1 | 0, $80_1 | 0);
    }
    break label$3;
   }
   $197(5966 | 0) | 0;
  }
  label$11 : {
   $88_1 = $4_1 + 16 | 0;
   if ($88_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $88_1;
  }
  return;
 }
 
 function $74($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $49_1 = 0, $48_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $48_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $48_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $42(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = 75068;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if ($142((HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) {
      break label$5
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    continue label$4;
   };
  }
  label$6 : {
   if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
    break label$6
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = $16(($147(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0) + 5 | 0 | 0) | 0;
   $145((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  label$7 : {
   if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$7
   }
   $399(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
  }
  label$8 : {
   $49_1 = $4_1 + 32 | 0;
   if ($49_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $49_1;
  }
  return;
 }
 
 function $75() {
  var $10_1 = 0;
  label$1 : {
   if (HEAP32[(0 + 75100 | 0) >> 2] | 0) {
    break label$1
   }
   label$2 : {
    if (!((HEAP32[(0 + 12548 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$2
    }
    $10_1 = 0;
    $206(HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0, HEAP32[(0 + 75076 | 0) >> 2] | 0 | 0, $10_1 | 0) | 0;
    $170((HEAP32[(0 + 75080 | 0) >> 2] | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
    $170(((HEAP32[(0 + 75080 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0 | 0, HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0) | 0;
    $206(HEAP32[(0 + 84932 | 0) >> 2] | 0 | 0, $10_1 | 0, 2 | 0) | 0;
   }
  }
  return;
 }
 
 function $76($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $18_1 = 0, $35_1 = 0, $44_1 = 0, $124_1 = 0, $141_1 = 0, $172_1 = 0, $189_1 = 0, $212_1 = 0, $246_1 = 0, $275_1 = 0, $313_1 = 0, $337_1 = 0, $348_1 = 0, $376_1 = 0, $387_1 = 0, $430 = 0, $477 = 0, $513 = 0, $548 = 0, $571 = 0, $600 = 0, $645 = 0, $693 = 0, $787 = 0, $794 = 0, $830 = 0, $838 = 0, $842 = 0, $857 = 0, $870 = 0, $883 = 0, $894 = 0, $948 = 0, $955 = 0, $1013 = 0, $1012 = 0, $518 = 0, $1009 = 0;
  $4_1 = global$0 - 416 | 0;
  label$1 : {
   $1012 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $1012;
  }
  HEAP32[($4_1 + 412 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 408 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 396 | 0) >> 2] = HEAP32[(0 + 84948 | 0) >> 2] | 0;
  HEAP32[($4_1 + 392 | 0) >> 2] = HEAP32[(0 + 84952 | 0) >> 2] | 0;
  HEAP32[($4_1 + 384 | 0) >> 2] = HEAP32[($4_1 + 412 | 0) >> 2] | 0;
  HEAP32[(0 + 84948 | 0) >> 2] = HEAP32[(0 + 84956 | 0) >> 2] | 0;
  HEAP32[(0 + 84952 | 0) >> 2] = HEAP32[(0 + 84960 | 0) >> 2] | 0;
  HEAP32[(0 + 84964 | 0) >> 2] = 1;
  $18_1 = $116() | 0;
  HEAP32[($4_1 + 400 | 0) >> 2] = $18_1;
  HEAP32[($4_1 + 404 | 0) >> 2] = $18_1;
  label$3 : {
   label$4 : while (1) {
    if (!(((HEAPU8[(HEAP32[($4_1 + 412 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
      break label$5
     }
     $35_1 = 24;
     HEAP32[($4_1 + 64 | 0) >> 2] = ((HEAPU8[(HEAP32[($4_1 + 412 | 0) >> 2] | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0;
     $173(6254 | 0, $4_1 + 64 | 0 | 0) | 0;
    }
    $44_1 = (HEAP8[(HEAP32[($4_1 + 412 | 0) >> 2] | 0) >> 0] | 0) + -10 | 0;
    label$6 : {
     label$7 : {
      if ($44_1 >>> 0 > 116 >>> 0) {
       break label$7
      }
      label$8 : {
       switch ($44_1 | 0) {
       default:
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 116:
        label$32 : {
         label$33 : {
          if (!(HEAP32[(0 + 84964 | 0) >> 2] | 0)) {
           break label$33
          }
          $78(35 | 0, 128 | 0);
          break label$32;
         }
         $17(6 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 384 | 0) >> 2] | 0 | 0) | 0;
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 32:
        label$34 : {
         label$35 : {
          if (!(HEAP32[(0 + 84964 | 0) >> 2] | 0)) {
           break label$35
          }
          $79(6265 | 0) | 0;
          break label$34;
         }
         $78(36 | 0, 20 | 0);
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 37:
        $78(37 | 0, 20 | 0);
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 27:
        label$36 : {
         label$37 : {
          if (!(HEAP32[(0 + 84964 | 0) >> 2] | 0)) {
           break label$37
          }
          HEAP32[($4_1 + 412 | 0) >> 2] = $82((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
          break label$36;
         }
         $78(38 | 0, 20 | 0);
         HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        }
        break label$6;
       case 53:
        $78(39 | 0, 10 | 0);
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 33:
        $78(40 | 0, 19 | 0);
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 35:
        label$38 : {
         label$39 : {
          if (!(HEAP32[(0 + 84964 | 0) >> 2] | 0)) {
           break label$39
          }
          $78(41 | 0, 128 | 0);
          break label$38;
         }
         $78(42 | 0, 19 | 0);
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 52:
        label$40 : {
         if (!(HEAP32[(0 + 84964 | 0) >> 2] | 0)) {
          break label$40
         }
         $78(43 | 0, 128 | 0);
         HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
         break label$6;
        }
        $124_1 = 24;
        label$41 : {
         label$42 : {
          if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $124_1 | 0) >> $124_1 | 0 | 0) == (62 | 0) & 1 | 0)) {
           break label$42
          }
          $78(44 | 0, 18 | 0);
          HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
          break label$41;
         }
         $141_1 = 24;
         label$43 : {
          label$44 : {
           if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $141_1 | 0) >> $141_1 | 0 | 0) == (61 | 0) & 1 | 0)) {
            break label$44
           }
           $78(45 | 0, 17 | 0);
           HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
           break label$43;
          }
          $78(46 | 0, 17 | 0);
         }
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 50:
        label$45 : {
         if (!(HEAP32[(0 + 84964 | 0) >> 2] | 0)) {
          break label$45
         }
         $78(47 | 0, 128 | 0);
         HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
         break label$6;
        }
        $172_1 = 24;
        label$46 : {
         label$47 : {
          if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $172_1 | 0) >> $172_1 | 0 | 0) == (60 | 0) & 1 | 0)) {
           break label$47
          }
          $78(48 | 0, 18 | 0);
          HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
          break label$46;
         }
         $189_1 = 24;
         label$48 : {
          label$49 : {
           if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $189_1 | 0) >> $189_1 | 0 | 0) == (61 | 0) & 1 | 0)) {
            break label$49
           }
           $78(49 | 0, 17 | 0);
           HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
           break label$48;
          }
          $78(50 | 0, 17 | 0);
         }
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 51:
        $212_1 = 24;
        label$50 : {
         if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $212_1 | 0) >> $212_1 | 0 | 0) == (61 | 0) & 1 | 0)) {
          break label$50
         }
         HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        }
        $78(51 | 0, 16 | 0);
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 23:
        label$51 : {
         label$52 : {
          if (!(HEAP32[(0 + 84964 | 0) >> 2] | 0)) {
           break label$52
          }
          $78(52 | 0, 128 | 0);
          break label$51;
         }
         $78(53 | 0, 16 | 0);
         HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 28:
        $246_1 = 24;
        label$53 : {
         label$54 : {
          if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $246_1 | 0) >> $246_1 | 0 | 0) == (38 | 0) & 1 | 0)) {
           break label$54
          }
          $78(54 | 0, 12 | 0);
          HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
          break label$53;
         }
         $78(55 | 0, 15 | 0);
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 84:
        $78(56 | 0, 14 | 0);
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 114:
        $275_1 = 24;
        label$55 : {
         label$56 : {
          if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $275_1 | 0) >> $275_1 | 0 | 0) == (124 | 0) & 1 | 0)) {
           break label$56
          }
          $78(57 | 0, 11 | 0);
          HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
          break label$55;
         }
         $78(58 | 0, 13 | 0);
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 30:
        label$57 : {
         if (!(HEAP32[($4_1 + 408 | 0) >> 2] | 0)) {
          break label$57
         }
         HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] = 12;
         HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
         break label$6;
        }
       case 81:
        label$58 : {
         label$59 : {
          if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) == (32 | 0) & 1 | 0)) {
           break label$59
          }
          $197(6267 | 0) | 0;
          break label$58;
         }
         $313_1 = HEAP32[(0 + 84960 | 0) >> 2] | 0;
         HEAP32[(0 + 84960 | 0) >> 2] = $313_1 + 1 | 0;
         HEAP32[(84976 + ($313_1 << 2 | 0) | 0) >> 2] = 0;
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 31:
        label$60 : {
         if (!(HEAP32[($4_1 + 408 | 0) >> 2] | 0)) {
          break label$60
         }
         label$61 : {
          if (!(((HEAPU8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0 | 0) == (12 | 0) & 1 | 0)) {
           break label$61
          }
          $337_1 = 24;
          if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $337_1 | 0) >> $337_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
           break label$61
          }
          $348_1 = 24;
          if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $348_1 | 0) >> $348_1 | 0 | 32 | 0 | 0) == (121 | 0) & 1 | 0)) {
           break label$61
          }
          HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] = 11;
          HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 2 | 0;
         }
         label$62 : {
          if (!(((HEAPU8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0 | 0) == (12 | 0) & 1 | 0)) {
           break label$62
          }
          $376_1 = 24;
          if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $376_1 | 0) >> $376_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
           break label$62
          }
          $387_1 = 24;
          if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $387_1 | 0) >> $387_1 | 0 | 32 | 0 | 0) == (120 | 0) & 1 | 0)) {
           break label$62
          }
          HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 412 | 0) >> 2] | 0;
          $213($4_1 + 256 | 0 | 0, 6280 | 0, $4_1 | 0) | 0;
          $17(11 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 384 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 1 | 0;
         }
         HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
         break label$6;
        }
       case 83:
        label$63 : while (1) {
         $430 = 0;
         label$64 : {
          if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$64
          }
          $430 = (HEAP32[(84976 + (((HEAP32[(0 + 84960 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
         }
         label$65 : {
          if (!($430 & 1 | 0)) {
           break label$65
          }
          $104();
          continue label$63;
         }
         break label$63;
        };
        label$66 : {
         if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$66
         }
         HEAP32[(0 + 84960 | 0) >> 2] = (HEAP32[(0 + 84960 | 0) >> 2] | 0) + -1 | 0;
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        label$67 : {
         if (!((HEAP32[(0 + 84956 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 84948 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$67
         }
         $197(6283 | 0) | 0;
         break label$6;
        }
        $477 = 24;
        label$68 : {
         if (!((((HEAPU8[(HEAP32[($4_1 + 412 | 0) >> 2] | 0) >> 0] | 0) << $477 | 0) >> $477 | 0 | 0) == (100 | 0) & 1 | 0)) {
          break label$68
         }
         HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
         label$69 : {
          if ((HEAPU8[(((HEAP32[(0 + 84956 | 0) >> 2] | 0) - 1 | 0) + 85104 | 0) >> 0] | 0) & 255 | 0) {
           break label$69
          }
          HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(85168 + (((HEAP32[(0 + 84956 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0;
          $213($4_1 + 224 | 0 | 0, 6310 | 0, $4_1 + 16 | 0 | 0) | 0;
          $513 = $4_1 + 224 | 0;
          $518 = $145($24(($147($513 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $513 | 0) | 0;
          HEAP32[(85424 + (((HEAP32[(0 + 84956 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] = $518;
         }
        }
        HEAP32[(0 + 84964 | 0) >> 2] = 0;
        break label$6;
       case 25:
        HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] = 1;
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($4_1 + 408 | 0) >> 2] = 0;
        break label$6;
       case 34:
        label$70 : {
         label$71 : while (1) {
          if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$70
          }
          $104();
          continue label$71;
         };
        }
        HEAP32[(0 + 84964 | 0) >> 2] = 1;
        $548 = 24;
        HEAP32[($4_1 + 388 | 0) >> 2] = ((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $548 | 0) >> $548 | 0 | 32 | 0;
        label$72 : {
         label$73 : {
          if (!(((HEAPU8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0 | 0) == (12 | 0) & 1 | 0)) {
           break label$73
          }
          if (!((HEAP32[($4_1 + 388 | 0) >> 2] | 0 | 0) == (120 | 0) & 1 | 0)) {
           break label$73
          }
          $571 = 24;
          if ($105(((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $571 | 0) >> $571 | 0 | 0) | 0) {
           break label$73
          }
          HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] = 10;
          HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
          break label$72;
         }
         label$74 : {
          label$75 : {
           if (!(((HEAPU8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0 | 0) == (12 | 0) & 1 | 0)) {
            break label$75
           }
           if (!((HEAP32[($4_1 + 388 | 0) >> 2] | 0 | 0) == (121 | 0) & 1 | 0)) {
            break label$75
           }
           $600 = 24;
           if (!((((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $600 | 0) >> $600 | 0 | 0) == (41 | 0) & 1 | 0)) {
            break label$75
           }
           if (!(HEAP32[($4_1 + 408 | 0) >> 2] | 0)) {
            break label$75
           }
           HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 412 | 0) >> 2] | 0;
           $213($4_1 + 96 | 0 | 0, 6280 | 0, $4_1 + 32 | 0 | 0) | 0;
           $17(11 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 384 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
           HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 1 | 0;
           HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] = 14;
           HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
           break label$74;
          }
          label$76 : {
           label$77 : {
            if (!((HEAP32[($4_1 + 388 | 0) >> 2] | 0 | 0) == (120 | 0) & 1 | 0)) {
             break label$77
            }
            $645 = 24;
            if ($105(((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $645 | 0) >> $645 | 0 | 0) | 0) {
             break label$77
            }
            HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] = 13;
            HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
            label$78 : {
             if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
              break label$78
             }
             HEAP32[(0 + 84880 | 0) >> 2] = 7;
            }
            label$79 : {
             if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
              break label$79
             }
             HEAP32[(0 + 84880 | 0) >> 2] = 4;
            }
            label$80 : {
             if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
              break label$80
             }
             HEAP32[(0 + 84880 | 0) >> 2] = 13;
            }
            break label$76;
           }
           label$81 : {
            label$82 : {
             if (!((HEAP32[($4_1 + 388 | 0) >> 2] | 0 | 0) == (121 | 0) & 1 | 0)) {
              break label$82
             }
             $693 = 24;
             if ($105(((HEAPU8[((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $693 | 0) >> $693 | 0 | 0) | 0) {
              break label$82
             }
             HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 13 | 0) >> 0] = 14;
             HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
             label$83 : {
              if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
               break label$83
              }
              HEAP32[(0 + 84880 | 0) >> 2] = 8;
             }
             label$84 : {
              if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
               break label$84
              }
              HEAP32[(0 + 84880 | 0) >> 2] = 5;
             }
             label$85 : {
              if (!((HEAP32[(0 + 84880 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0)) {
               break label$85
              }
              HEAP32[(0 + 84880 | 0) >> 2] = 14;
             }
             break label$81;
            }
            HEAP32[($4_1 + 92 | 0) >> 2] = $116() | 0;
            HEAP32[(HEAP32[($4_1 + 400 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
            HEAP32[(0 + 84956 | 0) >> 2] = (HEAP32[(0 + 84956 | 0) >> 2] | 0) + -1 | 0;
            label$86 : {
             if (!((HEAP32[(0 + 84956 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 84948 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$86
             }
             $17(6 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 384 | 0) >> 2] | 0 | 0) | 0;
            }
            label$87 : {
             if (!((HEAP32[(0 + 84956 | 0) >> 2] | 0 | 0) > (HEAP32[(0 + 84948 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$87
             }
             $17(6 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 384 | 0) >> 2] | 0 | 0) | 0;
            }
            HEAP32[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[(85168 + ((HEAP32[(0 + 84956 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
            HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 12 | 0) >> 0] = HEAPU8[((HEAP32[(0 + 84956 | 0) >> 2] | 0) + 85104 | 0) >> 0] | 0;
            $787 = HEAP32[(85424 + ((HEAP32[(0 + 84956 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
            HEAP32[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 8 | 0) >> 2] = $787;
            label$88 : {
             if (!(($787 | 0) != (0 | 0) & 1 | 0)) {
              break label$88
             }
             $794 = HEAP32[($4_1 + 400 | 0) >> 2] | 0;
             HEAP8[($794 + 12 | 0) >> 0] = (HEAPU8[($794 + 12 | 0) >> 0] | 0) & 255 | 0 | 8 | 0;
             label$89 : {
              if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
               break label$89
              }
              HEAP32[($4_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
              $173(6314 | 0, $4_1 + 48 | 0 | 0) | 0;
             }
            }
            HEAP32[($4_1 + 400 | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
           }
          }
         }
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = (HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0;
        break label$6;
       case 26:
        HEAP32[($4_1 + 412 | 0) >> 2] = $106((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
        break label$6;
       case 29:
        HEAP32[($4_1 + 412 | 0) >> 2] = $107((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
        break label$6;
       case 1:
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 7:
       case 8:
       case 9:
       case 10:
       case 11:
       case 12:
       case 13:
       case 14:
       case 15:
       case 16:
       case 17:
       case 18:
       case 19:
       case 20:
       case 21:
       case 36:
       case 38:
       case 39:
       case 40:
       case 41:
       case 42:
       case 43:
       case 44:
       case 45:
       case 46:
       case 47:
       case 48:
       case 49:
       case 54:
       case 55:
       case 56:
       case 57:
       case 58:
       case 59:
       case 60:
       case 61:
       case 62:
       case 63:
       case 64:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
       case 71:
       case 72:
       case 73:
       case 74:
       case 75:
       case 76:
       case 77:
       case 78:
       case 79:
       case 80:
       case 82:
       case 85:
       case 86:
       case 87:
       case 88:
       case 89:
       case 90:
       case 91:
       case 92:
       case 93:
       case 94:
       case 95:
       case 96:
       case 97:
       case 98:
       case 99:
       case 100:
       case 101:
       case 102:
       case 103:
       case 104:
       case 105:
       case 106:
       case 107:
       case 108:
       case 109:
       case 110:
       case 111:
       case 112:
       case 113:
       case 115:
        break label$7;
       case 24:
        break label$8;
       };
      }
      HEAP32[($4_1 + 412 | 0) >> 2] = $108((HEAP32[($4_1 + 412 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
      break label$6;
     }
     HEAP32[($4_1 + 88 | 0) >> 2] = HEAP32[($4_1 + 412 | 0) >> 2] | 0;
     label$90 : while (1) {
      $830 = 24;
      $838 = 0;
      label$91 : {
       if (!((((HEAPU8[(HEAP32[($4_1 + 88 | 0) >> 2] | 0) >> 0] | 0) << $830 | 0) >> $830 | 0 | 0) >= (48 | 0) & 1 | 0)) {
        break label$91
       }
       $842 = 24;
       $838 = (((HEAPU8[(HEAP32[($4_1 + 88 | 0) >> 2] | 0) >> 0] | 0) << $842 | 0) >> $842 | 0 | 0) <= (57 | 0);
      }
      label$92 : {
       if (!($838 & 1 | 0)) {
        break label$92
       }
       HEAP32[($4_1 + 88 | 0) >> 2] = (HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 1 | 0;
       continue label$90;
      }
      break label$90;
     };
     $857 = 24;
     label$93 : {
      if (!((((HEAPU8[(HEAP32[($4_1 + 88 | 0) >> 2] | 0) >> 0] | 0) << $857 | 0) >> $857 | 0 | 0) == (36 | 0) & 1 | 0)) {
       break label$93
      }
      HEAP32[($4_1 + 412 | 0) >> 2] = $79(HEAP32[($4_1 + 412 | 0) >> 2] | 0 | 0) | 0;
      break label$6;
     }
     $870 = 24;
     label$94 : {
      label$95 : {
       if (!((((HEAPU8[(HEAP32[($4_1 + 412 | 0) >> 2] | 0) >> 0] | 0) << $870 | 0) >> $870 | 0 | 0) == (48 | 0) & 1 | 0)) {
        break label$95
       }
       HEAP32[($4_1 + 412 | 0) >> 2] = $109(HEAP32[($4_1 + 412 | 0) >> 2] | 0 | 0) | 0;
       break label$94;
      }
      $883 = 24;
      label$96 : {
       label$97 : {
        if (!((((HEAPU8[(HEAP32[($4_1 + 412 | 0) >> 2] | 0) >> 0] | 0) << $883 | 0) >> $883 | 0 | 0) > (48 | 0) & 1 | 0)) {
         break label$97
        }
        $894 = 24;
        if (!((((HEAPU8[(HEAP32[($4_1 + 412 | 0) >> 2] | 0) >> 0] | 0) << $894 | 0) >> $894 | 0 | 0) <= (57 | 0) & 1 | 0)) {
         break label$97
        }
        HEAP32[($4_1 + 412 | 0) >> 2] = $110(HEAP32[($4_1 + 412 | 0) >> 2] | 0 | 0) | 0;
        break label$96;
       }
       HEAP32[($4_1 + 412 | 0) >> 2] = $79(HEAP32[($4_1 + 412 | 0) >> 2] | 0 | 0) | 0;
      }
     }
    }
    continue label$4;
   };
  }
  label$98 : {
   label$99 : while (1) {
    if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$98
    }
    $104();
    continue label$99;
   };
  }
  label$100 : {
   if (!((HEAP32[(0 + 84956 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84948 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$100
   }
   HEAP32[(0 + 84956 | 0) >> 2] = (HEAP32[(0 + 84956 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[(85168 + ((HEAP32[(0 + 84956 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP8[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 12 | 0) >> 0] = HEAPU8[((HEAP32[(0 + 84956 | 0) >> 2] | 0) + 85104 | 0) >> 0] | 0;
   $948 = HEAP32[(85424 + ((HEAP32[(0 + 84956 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 8 | 0) >> 2] = $948;
   label$101 : {
    if (!(($948 | 0) != (0 | 0) & 1 | 0)) {
     break label$101
    }
    $955 = HEAP32[($4_1 + 400 | 0) >> 2] | 0;
    HEAP8[($955 + 12 | 0) >> 0] = (HEAPU8[($955 + 12 | 0) >> 0] | 0) & 255 | 0 | 8 | 0;
    label$102 : {
     if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
      break label$102
     }
     HEAP32[($4_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     $173(6314 | 0, $4_1 + 80 | 0 | 0) | 0;
    }
   }
   label$103 : {
    if ((HEAPU8[((HEAP32[($4_1 + 404 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0) {
     break label$103
    }
    HEAP8[((HEAP32[($4_1 + 404 | 0) >> 2] | 0) + 13 | 0) >> 0] = 3;
   }
  }
  label$104 : {
   label$105 : {
    if ((HEAP32[(0 + 84956 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84948 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$105
    }
    if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$104
    }
   }
   $17(6 | 0, 0 & 1 | 0 | 0, HEAP32[($4_1 + 384 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[(0 + 84956 | 0) >> 2] = HEAP32[(0 + 84948 | 0) >> 2] | 0;
  HEAP32[(0 + 84960 | 0) >> 2] = HEAP32[(0 + 84952 | 0) >> 2] | 0;
  HEAP32[(0 + 84948 | 0) >> 2] = HEAP32[($4_1 + 396 | 0) >> 2] | 0;
  HEAP32[(0 + 84952 | 0) >> 2] = HEAP32[($4_1 + 392 | 0) >> 2] | 0;
  $1009 = HEAP32[($4_1 + 404 | 0) >> 2] | 0;
  label$106 : {
   $1013 = $4_1 + 416 | 0;
   if ($1013 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $1013;
  }
  return $1009 | 0;
 }
 
 function $77($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $111((HEAP32[($4_1 + 12 | 0) >> 2] | 0) ^ -1 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
  label$3 : {
   $13_1 = $4_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $78($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $64_1 = 0, $134_1 = 0, $133_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $133_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $133_1;
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$3 : {
   if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
    break label$3
   }
   $197(6348 | 0) | 0;
  }
  HEAP32[(0 + 84964 | 0) >> 2] = 1;
  label$4 : {
   label$5 : {
    label$6 : {
     if ((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0) {
      break label$6
     }
     if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) == (128 | 0) & 1 | 0)) {
      break label$5
     }
    }
    label$7 : {
     if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[$4_1 >> 2] = HEAP32[(0 + 84960 | 0) >> 2] | 0;
     $173(6353 | 0, $4_1 | 0) | 0;
    }
    HEAP32[(85680 + ((HEAP32[(0 + 84960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP32[(84976 + ((HEAP32[(0 + 84960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    HEAP32[(0 + 84960 | 0) >> 2] = (HEAP32[(0 + 84960 | 0) >> 2] | 0) + 1 | 0;
    break label$4;
   }
   label$8 : while (1) {
    $64_1 = 0;
    label$9 : {
     if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$9
     }
     $64_1 = 0;
     if (!(HEAP32[(84976 + (((HEAP32[(0 + 84960 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
      break label$9
     }
     $64_1 = (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) <= (HEAP32[(84976 + (((HEAP32[(0 + 84960 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    }
    label$10 : {
     if (!($64_1 & 1 | 0)) {
      break label$10
     }
     $104();
     continue label$8;
    }
    break label$8;
   };
   label$11 : {
    if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
     break label$11
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[(0 + 84960 | 0) >> 2] | 0;
    $173(6370 | 0, $4_1 + 16 | 0 | 0) | 0;
   }
   HEAP32[(85680 + ((HEAP32[(0 + 84960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
   HEAP32[(84976 + ((HEAP32[(0 + 84960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
   HEAP32[(0 + 84960 | 0) >> 2] = (HEAP32[(0 + 84960 | 0) >> 2] | 0) + 1 | 0;
   label$12 : {
    if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) == (32 | 0) & 1 | 0)) {
     break label$12
    }
    $197(6381 | 0) | 0;
    HEAP32[(0 + 84960 | 0) >> 2] = HEAP32[(0 + 84952 | 0) >> 2] | 0;
   }
  }
  label$13 : {
   $134_1 = $4_1 + 32 | 0;
   if ($134_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $134_1;
  }
  return;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $18_1 = 0, $10_1 = 0, $23_1 = 0, $34_1 = 0, $46_1 = 0, $57_1 = 0, $69_1 = 0, $81_1 = 0, $89_1 = 0, $93_1 = 0, $120_1 = 0, $125_1 = 0, $132_1 = 0, $150_1 = 0, $155_1 = 0, $165_1 = 0, $181_1 = 0, $229_1 = 0, $245_1 = 0, $263_1 = 0, $262_1 = 0, $122_1 = 0, $127_1 = 0, $147_1 = 0, $152_1 = 0, $259_1 = 0;
  $3_1 = global$0 - 48 | 0;
  label$1 : {
   $262_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $262_1;
  }
  HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
  HEAP8[($3_1 + 31 | 0) >> 0] = 0;
  HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  label$3 : while (1) {
   $10_1 = 24;
   $18_1 = 1;
   label$4 : {
    if ((((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $10_1 | 0) >> $10_1 | 0 | 0) == (95 | 0) & 1 | 0) {
     break label$4
    }
    $23_1 = 24;
    $18_1 = 1;
    if ((((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $23_1 | 0) >> $23_1 | 0 | 0) == (46 | 0) & 1 | 0) {
     break label$4
    }
    $34_1 = 24;
    label$5 : {
     if (!((((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $34_1 | 0) >> $34_1 | 0 | 0) >= (97 | 0) & 1 | 0)) {
      break label$5
     }
     $46_1 = 24;
     $18_1 = 1;
     if ((((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $46_1 | 0) >> $46_1 | 0 | 0) <= (122 | 0) & 1 | 0) {
      break label$4
     }
    }
    $57_1 = 24;
    label$6 : {
     if (!((((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $57_1 | 0) >> $57_1 | 0 | 0) >= (65 | 0) & 1 | 0)) {
      break label$6
     }
     $69_1 = 24;
     $18_1 = 1;
     if ((((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $69_1 | 0) >> $69_1 | 0 | 0) <= (90 | 0) & 1 | 0) {
      break label$4
     }
    }
    $81_1 = 24;
    $89_1 = 0;
    label$7 : {
     if (!((((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $81_1 | 0) >> $81_1 | 0 | 0) >= (48 | 0) & 1 | 0)) {
      break label$7
     }
     $93_1 = 24;
     $89_1 = (((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $93_1 | 0) >> $93_1 | 0 | 0) <= (57 | 0);
    }
    $18_1 = $89_1;
   }
   label$8 : {
    if (!($18_1 & 1 | 0)) {
     break label$8
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   }
   break label$3;
  };
  label$9 : {
   label$10 : {
    if (!((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) == (HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$10
    }
    $17(15 | 0, 0 & 1 | 0 | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) | 0;
    $120_1 = 24;
    $122_1 = ((HEAPU8[(HEAP32[($3_1 + 40 | 0) >> 2] | 0) >> 0] | 0) << $120_1 | 0) >> $120_1 | 0;
    $125_1 = 24;
    $127_1 = ((HEAPU8[(HEAP32[($3_1 + 40 | 0) >> 2] | 0) >> 0] | 0) << $125_1 | 0) >> $125_1 | 0;
    $132_1 = 24;
    HEAP32[($3_1 + 24 | 0) >> 2] = ((HEAPU8[((HEAP32[($3_1 + 40 | 0) >> 2] | 0) + -1 | 0) >> 0] | 0) << $132_1 | 0) >> $132_1 | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = $127_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $122_1;
    $173(6406 | 0, $3_1 + 16 | 0 | 0) | 0;
    label$11 : {
     if (!((HEAP32[(0 + 84920 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     $147_1 = HEAP32[(0 + 84928 | 0) >> 2] | 0;
     $150_1 = 24;
     $152_1 = ((HEAPU8[(HEAP32[($3_1 + 40 | 0) >> 2] | 0) >> 0] | 0) << $150_1 | 0) >> $150_1 | 0;
     $155_1 = 24;
     HEAP32[($3_1 + 4 | 0) >> 2] = ((HEAPU8[(HEAP32[($3_1 + 40 | 0) >> 2] | 0) >> 0] | 0) << $155_1 | 0) >> $155_1 | 0;
     HEAP32[$3_1 >> 2] = $152_1;
     $196($147_1 | 0, 6431 | 0, $3_1 | 0) | 0;
    }
    HEAP32[($3_1 + 44 | 0) >> 2] = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    break label$9;
   }
   $165_1 = 24;
   label$12 : {
    if (!((((HEAPU8[(HEAP32[($3_1 + 32 | 0) >> 2] | 0) >> 0] | 0) << $165_1 | 0) >> $165_1 | 0 | 0) == (36 | 0) & 1 | 0)) {
     break label$12
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = (HEAP32[($3_1 + 32 | 0) >> 2] | 0) + 1 | 0;
   }
   $181_1 = $113(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 32 | 0) >> 2] | 0) - (HEAP32[($3_1 + 40 | 0) >> 2] | 0) | 0 | 0) | 0;
   HEAP32[($3_1 + 36 | 0) >> 2] = $181_1;
   label$13 : {
    label$14 : {
     if (!(($181_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$14
     }
     label$15 : {
      if (!(((HEAPU8[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 75096 | 0) >> 2] = (HEAP32[(0 + 75096 | 0) >> 2] | 0) + 1 | 0;
     }
     label$16 : {
      if (!(((HEAPU8[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
       break label$16
      }
      HEAP8[($3_1 + 31 | 0) >> 0] = 1;
      HEAP32[($3_1 + 36 | 0) >> 2] = $76(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
     }
     label$17 : {
      label$18 : {
       if (!(((HEAPU8[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 8 | 0)) {
        break label$18
       }
       $111(0 | 0, 8 | 0, HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
       break label$17;
      }
      $111(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, ((HEAPU8[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0 | 0, 0 | 0);
     }
     $229_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
     HEAP8[($229_1 + 12 | 0) >> 0] = (HEAPU8[($229_1 + 12 | 0) >> 0] | 0) & 255 | 0 | 68 | 0;
     label$19 : {
      if (!(((HEAPU8[($3_1 + 31 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
       break label$19
      }
      $118(HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0);
     }
     break label$13;
    }
    $245_1 = 0;
    $111($245_1 | 0, 1 | 0, $245_1 | 0);
    HEAP32[($3_1 + 36 | 0) >> 2] = $115(HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 32 | 0) >> 2] | 0) - (HEAP32[($3_1 + 40 | 0) >> 2] | 0) | 0 | 0) | 0;
    HEAP8[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 0] = 69;
    HEAP32[(0 + 75096 | 0) >> 2] = (HEAP32[(0 + 75096 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  }
  $259_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
  label$20 : {
   $263_1 = $3_1 + 48 | 0;
   if ($263_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $263_1;
  }
  return $259_1 | 0;
 }
 
 function $80($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $19_1 = 0, $18_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $18_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111(Math_imul(HEAP32[($6_1 + 12 | 0) >> 2] | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  HEAP32[(0 + 84964 | 0) >> 2] = 1;
  label$3 : {
   $19_1 = $6_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  return;
 }
 
 function $81($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $17_1 = 0, $12_1 = 0, $22_1 = 0, $29_1 = 0, $28_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $28_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  HEAP32[(0 + 84964 | 0) >> 2] = 1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0)) {
     break label$4
    }
    $12_1 = 0;
    $111($12_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, $12_1 | 0);
    break label$3;
   }
   label$5 : {
    if (HEAP32[($6_1 + 8 | 0) >> 2] | 0) {
     break label$5
    }
    $17_1 = 0;
    $17(9 | 0, 1 & 1 | 0 | 0, $17_1 | 0) | 0;
    $111($17_1 | 0, $17_1 | 0, $17_1 | 0);
    break label$3;
   }
   $22_1 = 0;
   $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) / (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $22_1 | 0, $22_1 | 0);
  }
  label$6 : {
   $29_1 = $6_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $29_1;
  }
  return;
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $17_1 = 0, $21_1 = 0, $35_1 = 0, $44_1 = 0, $50_1 = 0, $49_1 = 0, $46_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $49_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $49_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$3 : while (1) {
   $9_1 = 24;
   $17_1 = 1;
   label$4 : {
    if ((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0 | 0) == (48 | 0) & 1 | 0) {
     break label$4
    }
    $21_1 = 24;
    $17_1 = (((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $21_1 | 0) >> $21_1 | 0 | 0) == (49 | 0);
   }
   label$5 : {
    if (!($17_1 & 1 | 0)) {
     break label$5
    }
    $35_1 = 24;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 1 | 0 | ((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0) - 48 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   }
   break label$3;
  };
  $44_1 = 0;
  $111(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $44_1 | 0, $44_1 | 0);
  $46_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$6 : {
   $50_1 = $3_1 + 16 | 0;
   if ($50_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $50_1;
  }
  return $46_1 | 0;
 }
 
 function $83($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $10_1 = 0, $15_1 = 0, $17_1 = 0, $26_1 = 0, $25_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $25_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $25_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0)) {
     break label$4
    }
    $10_1 = 0;
    $111($10_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, $10_1 | 0);
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (HEAP32[($6_1 + 8 | 0) >> 2] | 0) {
      break label$6
     }
     $15_1 = 0;
     $111(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $15_1 | 0, $15_1 | 0);
     break label$5;
    }
    $17_1 = 0;
    $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) % (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $17_1 | 0, $17_1 | 0);
   }
   HEAP32[(0 + 84964 | 0) >> 2] = 1;
  }
  label$7 : {
   $26_1 = $6_1 + 16 | 0;
   if ($26_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $26_1;
  }
  return;
 }
 
 function $84($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $24_1 = 0, $23_1 = 0, $14_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $23_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $23_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0)) {
     break label$4
    }
    $8_1 = 0;
    $111($8_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, $8_1 | 0);
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
      break label$6
     }
     $12_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     break label$5;
    }
    $12_1 = 0;
   }
   $14_1 = $12_1;
   label$7 : {
    label$8 : {
     if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
      break label$8
     }
     $17_1 = HEAP32[$6_1 >> 2] | 0;
     break label$7;
    }
    $17_1 = 0;
   }
   $111($14_1 | 0, $17_1 | 0, 0 | 0);
  }
  label$9 : {
   $24_1 = $6_1 + 16 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $24_1;
  }
  return;
 }
 
 function $85($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $19_1 = 0, $18_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $18_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  HEAP32[(0 + 84964 | 0) >> 2] = 1;
  label$3 : {
   $19_1 = $6_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  return;
 }
 
 function $86($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $12_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $11_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $111($5_1 - (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0);
  label$3 : {
   $12_1 = $4_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $87($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $19_1 = 0, $18_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $18_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $18_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0) - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  HEAP32[(0 + 84964 | 0) >> 2] = 1;
  label$3 : {
   $19_1 = $6_1 + 16 | 0;
   if ($19_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  return;
 }
 
 function $88($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $14_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $14_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $111(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
  label$3 : {
   $15_1 = $4_1 + 16 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $15_1;
  }
  return;
 }
 
 function $89($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $10_1 = 0, $14_1 = 0, $21_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0)) {
     break label$4
    }
    $10_1 = 0;
    $111($10_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, $10_1 | 0);
    break label$3;
   }
   $14_1 = 0;
   $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0, $14_1 | 0, $14_1 | 0);
  }
  label$5 : {
   $21_1 = $6_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $90($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $21_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $21_1 = $6_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $91($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $21_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $21_1 = $6_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $92($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $111((HEAP32[($4_1 + 12 | 0) >> 2] | 0) & 255 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0);
  label$3 : {
   $13_1 = $4_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $93($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $10_1 = 0, $14_1 = 0, $21_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0)) {
     break label$4
    }
    $10_1 = 0;
    $111($10_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, $10_1 | 0);
    break label$3;
   }
   $14_1 = 0;
   $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0, $14_1 | 0, $14_1 | 0);
  }
  label$5 : {
   $21_1 = $6_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $94($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $21_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $21_1 = $6_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $95($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $21_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $21_1 = $6_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $96($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $21_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $21_1 = $6_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $97($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $18_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $17_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $111(((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0) ^ -1 | 0) & 1 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0);
  label$3 : {
   $18_1 = $4_1 + 16 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $18_1;
  }
  return;
 }
 
 function $98($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $21_1 = 0, $20_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $21_1 = $6_1 + 16 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $21_1;
  }
  return;
 }
 
 function $99($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $11_1 = 0, $20_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (HEAP32[($6_1 + 4 | 0) >> 2] | 0) {
       break label$6
      }
      if (!(HEAP32[($6_1 + 12 | 0) >> 2] | 0)) {
       break label$5
      }
     }
     if (HEAP32[$6_1 >> 2] | 0) {
      break label$4
     }
     if (HEAP32[($6_1 + 8 | 0) >> 2] | 0) {
      break label$4
     }
    }
    $11_1 = 0;
    $111($11_1 | 0, $11_1 | 0, $11_1 | 0);
    break label$3;
   }
   $111(1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  }
  label$7 : {
   $20_1 = $6_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  return;
 }
 
 function $100($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $17_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $16_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $16_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0) & (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $17_1 = $6_1 + 16 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  return;
 }
 
 function $101($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $17_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $16_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $16_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111((HEAP32[($6_1 + 12 | 0) >> 2] | 0) ^ (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $17_1 = $6_1 + 16 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  return;
 }
 
 function $102($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $12_1 = 0, $13_1 = 0, $20_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (HEAP32[($6_1 + 4 | 0) >> 2] | 0) {
       break label$6
      }
      if (HEAP32[($6_1 + 12 | 0) >> 2] | 0) {
       break label$5
      }
     }
     if (HEAP32[$6_1 >> 2] | 0) {
      break label$4
     }
     if (!(HEAP32[($6_1 + 8 | 0) >> 2] | 0)) {
      break label$4
     }
    }
    $12_1 = 0;
    $111(1 | 0, $12_1 | 0, $12_1 | 0);
    break label$3;
   }
   $13_1 = 0;
   $111($13_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, $13_1 | 0);
  }
  label$7 : {
   $20_1 = $6_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  return;
 }
 
 function $103($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $17_1 = 0, $16_1 = 0;
  $6_1 = global$0 - 16 | 0;
  label$1 : {
   $16_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $16_1;
  }
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $111(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | (HEAP32[$6_1 >> 2] | 0) | 0 | 0, 0 | 0);
  label$3 : {
   $17_1 = $6_1 + 16 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  return;
 }
 
 function $104() {
  var $2_1 = 0, $109_1 = 0, $151_1 = 0, $150_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 16 | 0;
  label$1 : {
   $150_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $150_1;
  }
  label$3 : {
   if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
    break label$3
   }
   $8_1 = HEAP32[(0 + 84956 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[(0 + 84960 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $8_1;
   $173(6326 | 0, $2_1 | 0) | 0;
  }
  label$4 : {
   label$5 : {
    if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) <= (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    $17(6 | 0, 0 & 1 | 0 | 0, 0 | 0) | 0;
    HEAP32[(0 + 84960 | 0) >> 2] = HEAP32[(0 + 84952 | 0) >> 2] | 0;
    break label$4;
   }
   HEAP32[(0 + 84960 | 0) >> 2] = (HEAP32[(0 + 84960 | 0) >> 2] | 0) + -1 | 0;
   label$6 : {
    if (!((HEAP32[(84976 + ((HEAP32[(0 + 84960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (128 | 0) & 1 | 0)) {
     break label$6
    }
    label$7 : {
     if (!((HEAP32[(0 + 84956 | 0) >> 2] | 0 | 0) < ((HEAP32[(0 + 84948 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
      break label$7
     }
     $17(6 | 0, 0 & 1 | 0 | 0, 0 | 0) | 0;
     HEAP32[(0 + 84956 | 0) >> 2] = HEAP32[(0 + 84948 | 0) >> 2] | 0;
     break label$4;
    }
    HEAP32[(0 + 84956 | 0) >> 2] = (HEAP32[(0 + 84956 | 0) >> 2] | 0) + -1 | 0;
    FUNCTION_TABLE[HEAP32[(85680 + ((HEAP32[(0 + 84960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0](HEAP32[(85168 + ((HEAP32[(0 + 84956 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0, (HEAPU8[((HEAP32[(0 + 84956 | 0) >> 2] | 0) + 85104 | 0) >> 0] | 0) & 255 | 0);
    break label$4;
   }
   label$8 : {
    if (!((HEAP32[(0 + 84956 | 0) >> 2] | 0 | 0) < ((HEAP32[(0 + 84948 | 0) >> 2] | 0) + 2 | 0 | 0) & 1 | 0)) {
     break label$8
    }
    $17(6 | 0, 0 & 1 | 0 | 0, 0 | 0) | 0;
    HEAP32[(0 + 84956 | 0) >> 2] = HEAP32[(0 + 84948 | 0) >> 2] | 0;
    break label$4;
   }
   $109_1 = 85168;
   HEAP32[(0 + 84956 | 0) >> 2] = (HEAP32[(0 + 84956 | 0) >> 2] | 0) - 2 | 0;
   FUNCTION_TABLE[HEAP32[(85680 + ((HEAP32[(0 + 84960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0](HEAP32[($109_1 + ((HEAP32[(0 + 84956 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0, HEAP32[($109_1 + (((HEAP32[(0 + 84956 | 0) >> 2] | 0) + 1 | 0) << 2 | 0) | 0) >> 2] | 0, (HEAPU8[((HEAP32[(0 + 84956 | 0) >> 2] | 0) + 85104 | 0) >> 0] | 0) & 255 | 0, (HEAPU8[(((HEAP32[(0 + 84956 | 0) >> 2] | 0) + 1 | 0) + 85104 | 0) >> 0] | 0) & 255 | 0);
  }
  label$9 : {
   $151_1 = $2_1 + 16 | 0;
   if ($151_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $151_1;
  }
  return;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $19_1 = 0, $43_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) >= (97 | 0) & 1 | 0)) {
     break label$2
    }
    $19_1 = 1;
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) <= (122 | 0) & 1 | 0) {
     break label$1
    }
   }
   label$3 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) >= (65 | 0) & 1 | 0)) {
     break label$3
    }
    $19_1 = 1;
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) <= (90 | 0) & 1 | 0) {
     break label$1
    }
   }
   $43_1 = 0;
   label$4 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) >= (48 | 0) & 1 | 0)) {
     break label$4
    }
    $43_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) <= (57 | 0);
   }
   $19_1 = $43_1;
  }
  return $19_1 & 1 | 0 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $19_1 = 0, $32_1 = 0, $41_1 = 0, $52_1 = 0, $63_1 = 0, $74_1 = 0, $87_1 = 0, $98_1 = 0, $104_1 = 0, $103_1 = 0, $100_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $103_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $103_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    $8_1 = 24;
    label$5 : {
     label$6 : {
      if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $8_1 | 0) >> $8_1 | 0 | 0) >= (48 | 0) & 1 | 0)) {
       break label$6
      }
      $19_1 = 24;
      if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $19_1 | 0) >> $19_1 | 0 | 0) <= (57 | 0) & 1 | 0)) {
       break label$6
      }
      $32_1 = 24;
      HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 4 | 0) + ((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $32_1 | 0) >> $32_1 | 0) - 48 | 0) | 0;
      break label$5;
     }
     $41_1 = 24;
     label$7 : {
      label$8 : {
       label$9 : {
        if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $41_1 | 0) >> $41_1 | 0 | 0) >= (97 | 0) & 1 | 0)) {
         break label$9
        }
        $52_1 = 24;
        if ((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $52_1 | 0) >> $52_1 | 0 | 0) <= (102 | 0) & 1 | 0) {
         break label$8
        }
       }
       $63_1 = 24;
       if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $63_1 | 0) >> $63_1 | 0 | 0) >= (65 | 0) & 1 | 0)) {
        break label$7
       }
       $74_1 = 24;
       if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $74_1 | 0) >> $74_1 | 0 | 0) <= (70 | 0) & 1 | 0)) {
        break label$7
       }
      }
      $87_1 = 24;
      HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 4 | 0) + (((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $87_1 | 0) >> $87_1 | 0) & 31 | 0) + 9 | 0) | 0;
      break label$5;
     }
     break label$3;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $98_1 = 0;
  $111(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $98_1 | 0, $98_1 | 0);
  $100_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$10 : {
   $104_1 = $3_1 + 16 | 0;
   if ($104_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $104_1;
  }
  return $100_1 | 0;
 }
 
 function $107($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0, $17_1 = 0, $24_1 = 0, $29_1 = 0, $28_1 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $28_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $28_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if (!(((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$4
    }
    $14_1 = 0;
    $17_1 = 24;
    $111(((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $17_1 | 0) >> $17_1 | 0 | 0, $14_1 | 0, $14_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    break label$3;
   }
   $24_1 = 0;
   $111(32 | 0, $24_1 | 0, $24_1 | 0);
  }
  $25_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $29_1 = $3_1 + 16 | 0;
   if ($29_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $29_1;
  }
  return $25_1 | 0;
 }
 
 function $108($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $13_1 = 0, $17_1 = 0, $32_1 = 0, $47_1 = 0, $46_1 = 0, $43_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $46_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $46_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $111(0 | 0, 8 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : while (1) {
   $10_1 = 24;
   $13_1 = 0;
   label$4 : {
    if (!(((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $10_1 | 0) >> $10_1 | 0)) {
     break label$4
    }
    $17_1 = 24;
    $13_1 = (((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $17_1 | 0) >> $17_1 | 0 | 0) != (34 | 0);
   }
   label$5 : {
    if (!($13_1 & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   }
   break label$3;
  };
  $32_1 = 24;
  label$6 : {
   if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $32_1 | 0) >> $32_1 | 0 | 0) == (34 | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  }
  $43_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   $47_1 = $3_1 + 16 | 0;
   if ($47_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $47_1;
  }
  return $43_1 | 0;
 }
 
 function $109($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $17_1 = 0, $21_1 = 0, $35_1 = 0, $44_1 = 0, $50_1 = 0, $49_1 = 0, $46_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $49_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $49_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$3 : while (1) {
   $9_1 = 24;
   $17_1 = 0;
   label$4 : {
    if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0 | 0) >= (48 | 0) & 1 | 0)) {
     break label$4
    }
    $21_1 = 24;
    $17_1 = (((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $21_1 | 0) >> $21_1 | 0 | 0) <= (55 | 0);
   }
   label$5 : {
    if (!($17_1 & 1 | 0)) {
     break label$5
    }
    $35_1 = 24;
    HEAP32[($3_1 + 8 | 0) >> 2] = ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 3 | 0) + ((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0) - 48 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   }
   break label$3;
  };
  $44_1 = 0;
  $111(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $44_1 | 0, $44_1 | 0);
  $46_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$6 : {
   $50_1 = $3_1 + 16 | 0;
   if ($50_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $50_1;
  }
  return $46_1 | 0;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $17_1 = 0, $21_1 = 0, $35_1 = 0, $44_1 = 0, $50_1 = 0, $49_1 = 0, $46_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $49_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $49_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$3 : while (1) {
   $9_1 = 24;
   $17_1 = 0;
   label$4 : {
    if (!((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0 | 0) >= (48 | 0) & 1 | 0)) {
     break label$4
    }
    $21_1 = 24;
    $17_1 = (((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $21_1 | 0) >> $21_1 | 0 | 0) <= (57 | 0);
   }
   label$5 : {
    if (!($17_1 & 1 | 0)) {
     break label$5
    }
    $35_1 = 24;
    HEAP32[($3_1 + 8 | 0) >> 2] = Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 10) + ((((HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) << $35_1 | 0) >> $35_1 | 0) - 48 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   }
   break label$3;
  };
  $44_1 = 0;
  $111(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $44_1 | 0, $44_1 | 0);
  $46_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$6 : {
   $50_1 = $3_1 + 16 | 0;
   if ($50_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $50_1;
  }
  return $46_1 | 0;
 }
 
 function $111($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $20_1 = 0, $27_1 = 0, $89_1 = 0, $110_1 = 0, $130_1 = 0, $129_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 48 | 0;
  label$1 : {
   $129_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $129_1;
  }
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  label$3 : {
   if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
    break label$3
   }
   $11_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[(0 + 84956 | 0) >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1;
   $173(6452 | 0, $5_1 | 0) | 0;
  }
  HEAP32[(0 + 84964 | 0) >> 2] = 0;
  label$4 : {
   if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0) & 8 | 0)) {
    break label$4
   }
   $20_1 = 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = $20_1;
   HEAP32[($5_1 + 44 | 0) >> 2] = $20_1;
   label$5 : while (1) {
    $27_1 = 0;
    label$6 : {
     if (!((HEAPU8[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0)) {
      break label$6
     }
     $27_1 = ((HEAPU8[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (34 | 0);
    }
    label$7 : {
     if (!($27_1 & 1 | 0)) {
      break label$7
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) << 8 | 0 | ((HEAPU8[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$5;
    }
    break label$5;
   };
   HEAP32[($5_1 + 24 | 0) >> 2] = $24((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
   $404(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   HEAP8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0) >> 0] = 0;
   HEAP32[($5_1 + 40 | 0) >> 2] = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) & -9 | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  }
  HEAP32[(85168 + ((HEAP32[(0 + 84956 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  HEAP32[(85424 + ((HEAP32[(0 + 84956 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
  HEAP8[((HEAP32[(0 + 84956 | 0) >> 2] | 0) + 85104 | 0) >> 0] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  $89_1 = (HEAP32[(0 + 84956 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 84956 | 0) >> 2] = $89_1;
  label$8 : {
   if (!(($89_1 | 0) == (64 | 0) & 1 | 0)) {
    break label$8
   }
   $197(6472 | 0) | 0;
   HEAP32[(0 + 84956 | 0) >> 2] = HEAP32[(0 + 84948 | 0) >> 2] | 0;
  }
  label$9 : while (1) {
   $110_1 = 0;
   label$10 : {
    if (!((HEAP32[(0 + 84960 | 0) >> 2] | 0 | 0) != (HEAP32[(0 + 84952 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$10
    }
    $110_1 = (HEAP32[(84976 + (((HEAP32[(0 + 84960 | 0) >> 2] | 0) - 1 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (128 | 0);
   }
   label$11 : {
    if (!($110_1 & 1 | 0)) {
     break label$11
    }
    $104();
    continue label$9;
   }
   break label$9;
  };
  label$12 : {
   $130_1 = $5_1 + 48 | 0;
   if ($130_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $130_1;
  }
  return;
 }
 
 function $112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(0 + 85824 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP8[(0 + 85820 | 0) >> 0] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return;
 }
 
 function $113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $73_1 = 0, $92_1 = 0, $103_1 = 0, $127_1 = 0, $136_1 = 0, $156_1 = 0, $194_1 = 0, $193_1 = 0, $121_1 = 0, $122_1 = 0, $148_1 = 0, $149_1 = 0, $190_1 = 0;
  $4_1 = global$0 - 1104 | 0;
  label$1 : {
   $193_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $193_1;
  }
  HEAP32[($4_1 + 1096 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 1092 | 0) >> 2] = $1_1;
  label$3 : {
   if (!((HEAP32[($4_1 + 1092 | 0) >> 2] | 0 | 0) > (1024 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($4_1 + 1092 | 0) >> 2] = 1024;
  }
  $16_1 = 24;
  label$4 : {
   label$5 : {
    label$6 : {
     if (!((((HEAPU8[(HEAP32[($4_1 + 1096 | 0) >> 2] | 0) >> 0] | 0) << $16_1 | 0) >> $16_1 | 0 | 0) == (46 | 0) & 1 | 0)) {
      break label$6
     }
     label$7 : {
      if (!((HEAP32[($4_1 + 1092 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$7
      }
      label$8 : {
       label$9 : {
        if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
         break label$9
        }
        HEAP8[(0 + 85844 | 0) >> 0] = ((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0) & 1 | 0;
        HEAP32[(0 + 85848 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
        break label$8;
       }
       HEAP8[(0 + 85844 | 0) >> 0] = ((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 1 | 0;
       HEAP32[(0 + 85848 | 0) >> 2] = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      }
      HEAP32[($4_1 + 1100 | 0) >> 2] = 85832;
      break label$4;
     }
     label$10 : {
      if (!((HEAP32[($4_1 + 1092 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$10
      }
      $73_1 = 24;
      if (!((((HEAPU8[((HEAP32[($4_1 + 1096 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $73_1 | 0) >> $73_1 | 0 | 0) == (46 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[($4_1 + 1100 | 0) >> 2] = 85808;
      break label$4;
     }
     label$11 : {
      if (!((HEAP32[($4_1 + 1092 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$11
      }
      $92_1 = 24;
      if (!((((HEAPU8[((HEAP32[($4_1 + 1096 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $92_1 | 0) >> $92_1 | 0 | 0) == (46 | 0) & 1 | 0)) {
       break label$11
      }
      $103_1 = 24;
      if (!((((HEAPU8[((HEAP32[($4_1 + 1096 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $103_1 | 0) >> $103_1 | 0 | 0) == (46 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP8[(0 + 85868 | 0) >> 0] = 0;
      HEAP32[(0 + 85872 | 0) >> 2] = HEAP32[(0 + 84912 | 0) >> 2] | 0;
      HEAP32[($4_1 + 1100 | 0) >> 2] = 85856;
      break label$4;
     }
     $121_1 = HEAP32[(0 + 84892 | 0) >> 2] | 0;
     $122_1 = HEAP32[($4_1 + 1092 | 0) >> 2] | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 1096 | 0) >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = $122_1;
     HEAP32[$4_1 >> 2] = $121_1;
     $213($4_1 + 32 | 0 | 0, 6498 | 0, $4_1 | 0) | 0;
     $127_1 = $4_1 + 32 | 0;
     HEAP32[($4_1 + 1092 | 0) >> 2] = $147($127_1 | 0) | 0;
     HEAP32[($4_1 + 1096 | 0) >> 2] = $127_1;
     break label$5;
    }
    $136_1 = 24;
    label$12 : {
     if (!((((HEAPU8[((HEAP32[($4_1 + 1096 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 1092 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $136_1 | 0) >> $136_1 | 0 | 0) == (36 | 0) & 1 | 0)) {
      break label$12
     }
     $148_1 = HEAP32[(0 + 84900 | 0) >> 2] | 0;
     $149_1 = HEAP32[($4_1 + 1092 | 0) >> 2] | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 1096 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $149_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $148_1;
     $213($4_1 + 32 | 0 | 0, 6506 | 0, $4_1 + 16 | 0 | 0) | 0;
     $156_1 = $4_1 + 32 | 0;
     HEAP32[($4_1 + 1092 | 0) >> 2] = $147($156_1 | 0) | 0;
     HEAP32[($4_1 + 1096 | 0) >> 2] = $156_1;
    }
   }
   HEAP32[($4_1 + 1088 | 0) >> 2] = $114(HEAP32[($4_1 + 1096 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 1092 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($4_1 + 1084 | 0) >> 2] = HEAP32[(75120 + ((HEAP32[($4_1 + 1088 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   label$13 : {
    label$14 : while (1) {
     if (!((HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$13
     }
     label$15 : {
      if (!((HEAP32[((HEAP32[($4_1 + 1084 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 1092 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      if ($148(HEAP32[((HEAP32[($4_1 + 1084 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 1096 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 1092 | 0) >> 2] | 0 | 0) | 0) {
       break label$15
      }
      break label$13;
     }
     HEAP32[($4_1 + 1084 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 1084 | 0) >> 2] | 0) >> 2] | 0;
     continue label$14;
    };
   }
   HEAP32[($4_1 + 1100 | 0) >> 2] = HEAP32[($4_1 + 1084 | 0) >> 2] | 0;
  }
  $190_1 = HEAP32[($4_1 + 1100 | 0) >> 2] | 0;
  label$16 : {
   $194_1 = $4_1 + 1104 | 0;
   if ($194_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $194_1;
  }
  return $190_1 | 0;
 }
 
 function $114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $12_1 = 0, $16_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $6_1 + -1 | 0;
    if (!$6_1) {
     break label$1
    }
    $11_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0;
    $12_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $12_1 + 1 | 0;
    $16_1 = 24;
    HEAP32[($4_1 + 4 | 0) >> 2] = $11_1 ^ (((HEAPU8[$12_1 >> 0] | 0) << $16_1 | 0) >> $16_1 | 0) | 0;
    continue label$2;
   };
  }
  return (HEAP32[($4_1 + 4 | 0) >> 2] | 0) & 1023 | 0 | 0;
 }
 
 function $115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $34_1 = 0, $43_1 = 0, $63_1 = 0, $65_1 = 0, $98_1 = 0, $97_1 = 0, $28_1 = 0, $29_1 = 0, $55_1 = 0, $56_1 = 0, $71_1 = 0, $94_1 = 0;
  $4_1 = global$0 - 1088 | 0;
  label$1 : {
   $97_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $97_1;
  }
  HEAP32[($4_1 + 1084 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 1080 | 0) >> 2] = $1_1;
  label$3 : {
   if (!((HEAP32[($4_1 + 1080 | 0) >> 2] | 0 | 0) > (1024 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[($4_1 + 1080 | 0) >> 2] = 1024;
  }
  $16_1 = 24;
  label$4 : {
   label$5 : {
    if (!((((HEAPU8[(HEAP32[($4_1 + 1084 | 0) >> 2] | 0) >> 0] | 0) << $16_1 | 0) >> $16_1 | 0 | 0) == (46 | 0) & 1 | 0)) {
     break label$5
    }
    $28_1 = HEAP32[(0 + 84892 | 0) >> 2] | 0;
    $29_1 = HEAP32[($4_1 + 1080 | 0) >> 2] | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 1084 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $29_1;
    HEAP32[$4_1 >> 2] = $28_1;
    $213($4_1 + 32 | 0 | 0, 6498 | 0, $4_1 | 0) | 0;
    $34_1 = $4_1 + 32 | 0;
    HEAP32[($4_1 + 1080 | 0) >> 2] = $147($34_1 | 0) | 0;
    HEAP32[($4_1 + 1084 | 0) >> 2] = $34_1;
    break label$4;
   }
   $43_1 = 24;
   label$6 : {
    if (!((((HEAPU8[((HEAP32[($4_1 + 1084 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 1080 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $43_1 | 0) >> $43_1 | 0 | 0) == (36 | 0) & 1 | 0)) {
     break label$6
    }
    $55_1 = HEAP32[(0 + 84900 | 0) >> 2] | 0;
    $56_1 = HEAP32[($4_1 + 1080 | 0) >> 2] | 0;
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 1084 | 0) >> 2] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $56_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $55_1;
    $213($4_1 + 32 | 0 | 0, 6506 | 0, $4_1 + 16 | 0 | 0) | 0;
    $63_1 = $4_1 + 32 | 0;
    HEAP32[($4_1 + 1080 | 0) >> 2] = $147($63_1 | 0) | 0;
    HEAP32[($4_1 + 1084 | 0) >> 2] = $63_1;
   }
  }
  $65_1 = 75120;
  HEAP32[($4_1 + 1076 | 0) >> 2] = $116() | 0;
  $71_1 = $16((HEAP32[($4_1 + 1080 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 1076 | 0) >> 2] | 0) + 4 | 0) >> 2] = $71_1;
  $404(HEAP32[((HEAP32[($4_1 + 1076 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 1080 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 1076 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($4_1 + 1080 | 0) >> 2] | 0;
  HEAP32[($4_1 + 1072 | 0) >> 2] = $114(HEAP32[($4_1 + 1084 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 1080 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[($4_1 + 1076 | 0) >> 2] | 0) >> 2] = HEAP32[($65_1 + ((HEAP32[($4_1 + 1072 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  HEAP8[((HEAP32[($4_1 + 1076 | 0) >> 2] | 0) + 12 | 0) >> 0] = 1;
  HEAP32[($65_1 + ((HEAP32[($4_1 + 1072 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 1076 | 0) >> 2] | 0;
  $94_1 = HEAP32[($4_1 + 1076 | 0) >> 2] | 0;
  label$7 : {
   $98_1 = $4_1 + 1088 | 0;
   if ($98_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $98_1;
  }
  return $94_1 | 0;
 }
 
 function $116() {
  var i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $29_1 = 0, $17_1 = 0, $28_1 = 0, $27_1 = 0, $24_1 = 0;
  $2_1 = global$0 - 16 | 0;
  label$1 : {
   $27_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $27_1;
  }
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 85880 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(0 + 85880 | 0) >> 2] | 0;
    HEAP32[(0 + 85880 | 0) >> 2] = HEAP32[(HEAP32[(0 + 85880 | 0) >> 2] | 0) >> 2] | 0;
    $17_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29_1 = 0;
    i64toi32_i32$1 = $17_1;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $17_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$3;
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = $16(24 | 0) | 0;
  }
  $24_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  label$5 : {
   $28_1 = $2_1 + 16 | 0;
   if ($28_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $28_1;
  }
  return $24_1 | 0;
 }
 
 function $117() {
  var $2_1 = 0, $18_1 = 0, $29_1 = 0, $45_1 = 0, $57_1 = 0, $71_1 = 0, $86_1 = 0, $105_1 = 0, $241_1 = 0, $240_1 = 0, $138_1 = 0, $142_1 = 0, $196_1 = 0;
  $2_1 = global$0 - 4160 | 0;
  label$1 : {
   $240_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $240_1;
  }
  HEAP32[($2_1 + 4148 | 0) >> 2] = HEAP32[(0 + 83324 | 0) >> 2] | 0;
  HEAP8[($2_1 + 4143 | 0) >> 0] = ((HEAPU8[((HEAP32[($2_1 + 4148 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0;
  label$3 : {
   label$4 : {
    if (!((HEAPU8[($2_1 + 4143 | 0) >> 0] | 0) & 255 | 0)) {
     break label$4
    }
    $18_1 = (HEAPU8[((HEAP32[($2_1 + 4148 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0;
    break label$3;
   }
   $18_1 = (HEAPU8[((HEAP32[($2_1 + 4148 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0;
  }
  HEAP8[($2_1 + 4142 | 0) >> 0] = $18_1;
  label$5 : {
   label$6 : {
    if (!((HEAPU8[($2_1 + 4143 | 0) >> 0] | 0) & 255 | 0)) {
     break label$6
    }
    $29_1 = HEAP32[((HEAP32[($2_1 + 4148 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    break label$5;
   }
   $29_1 = HEAP32[((HEAP32[($2_1 + 4148 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  }
  HEAP32[($2_1 + 4136 | 0) >> 2] = $29_1;
  HEAP32[(0 + 84940 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 4148 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  HEAP32[(0 + 84944 | 0) >> 2] = (HEAPU8[((HEAP32[($2_1 + 4148 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0;
  HEAP32[($2_1 + 4144 | 0) >> 2] = HEAP32[(0 + 83344 | 0) >> 2] | 0;
  $45_1 = 24;
  label$7 : {
   label$8 : {
    if (((HEAPU8[(HEAP32[($2_1 + 4144 | 0) >> 2] | 0) >> 0] | 0) << $45_1 | 0) >> $45_1 | 0) {
     break label$8
    }
    break label$7;
   }
   HEAP32[($2_1 + 4156 | 0) >> 2] = $147(HEAP32[($2_1 + 4144 | 0) >> 2] | 0 | 0) | 0;
   $57_1 = 24;
   label$9 : {
    if (!((((HEAPU8[((HEAP32[($2_1 + 4144 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 4156 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $57_1 | 0) >> $57_1 | 0 | 0) == (58 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP32[($2_1 + 4156 | 0) >> 2] = (HEAP32[($2_1 + 4156 | 0) >> 2] | 0) + -1 | 0;
   }
   $71_1 = 24;
   label$10 : {
    if (!((((HEAPU8[(HEAP32[($2_1 + 4144 | 0) >> 2] | 0) >> 0] | 0) << $71_1 | 0) >> $71_1 | 0 | 0) != (46 | 0) & 1 | 0)) {
     break label$10
    }
    $86_1 = 24;
    if (!((((HEAPU8[((HEAP32[($2_1 + 4144 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 4156 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $86_1 | 0) >> $86_1 | 0 | 0) != (36 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[(0 + 84904 | 0) >> 2] = (HEAP32[(0 + 84904 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[(0 + 84900 | 0) >> 2] = HEAP32[(0 + 84904 | 0) >> 2] | 0;
   }
   $105_1 = $113(HEAP32[($2_1 + 4144 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 4156 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 4152 | 0) >> 2] = $105_1;
   label$11 : {
    label$12 : {
     if (!(($105_1 | 0) != (0 | 0) & 1 | 0)) {
      break label$12
     }
     label$13 : {
      label$14 : {
       if (!((((HEAPU8[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 5 | 0 | 0) == (5 | 0) & 1 | 0)) {
        break label$14
       }
       HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 8192 | 0;
       label$15 : {
        if (!((HEAPU8[(0 + 84908 | 0) >> 0] | 0) & 1 | 0)) {
         break label$15
        }
        $138_1 = HEAP32[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        $142_1 = (HEAPU8[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0;
        HEAP32[($2_1 + 8 | 0) >> 2] = (HEAPU8[($2_1 + 4142 | 0) >> 0] | 0) & 255 | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = $142_1;
        HEAP32[$2_1 >> 2] = $138_1;
        $173(6515 | 0, $2_1 | 0) | 0;
       }
       break label$13;
      }
      label$16 : {
       label$17 : {
        if (!(((HEAPU8[($2_1 + 4142 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
         break label$17
        }
        if (!(((HEAPU8[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 4 | 0)) {
         break label$17
        }
        HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 8192 | 0;
        break label$16;
       }
       label$18 : {
        if (((HEAPU8[($2_1 + 4142 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
         break label$18
        }
        if (((HEAPU8[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
         break label$18
        }
        label$19 : {
         if (!((HEAP32[($2_1 + 4136 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$19
         }
         label$20 : {
          if ((HEAP32[(0 + 75104 | 0) >> 2] | 0) & 2 | 0) {
           break label$20
          }
          $196_1 = HEAP32[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
          HEAP32[($2_1 + 20 | 0) >> 2] = $5(HEAP32[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
          HEAP32[($2_1 + 16 | 0) >> 2] = $196_1;
          $213($2_1 + 32 | 0 | 0, 6540 | 0, $2_1 + 16 | 0 | 0) | 0;
          $17(24 | 0, 0 & 1 | 0 | 0, $2_1 + 32 | 0 | 0) | 0;
         }
         HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
         HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 16384 | 0;
        }
       }
      }
     }
     break label$11;
    }
    HEAP32[($2_1 + 4152 | 0) >> 2] = $115(HEAP32[($2_1 + 4144 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 4156 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($2_1 + 4136 | 0) >> 2] | 0;
   HEAP8[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 12 | 0) >> 0] = ((HEAPU8[((HEAP32[($2_1 + 4152 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & -2 | 0 | (((HEAPU8[($2_1 + 4142 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) | 0;
  }
  label$21 : {
   $241_1 = $2_1 + 4160 | 0;
   if ($241_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $241_1;
  }
  return;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $30_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $29_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $29_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(0 + 85880 | 0) >> 2] | 0;
    label$5 : {
     if (!(((HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 8 | 0)) {
      break label$5
     }
     $399(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
    }
    HEAP32[(0 + 85880 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    continue label$4;
   };
  }
  label$6 : {
   $30_1 = $3_1 + 16 | 0;
   if ($30_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $30_1;
  }
  return;
 }
 
 function $119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $35_1 = 0, $34_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $34_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $34_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $120(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 255 >>> 0 & 1 | 0)) {
    break label$3
   }
   $121(20 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
  }
  $122((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) & 255 | 0 | 0, ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & 255 | 0) & 255 | 0 | 0);
  label$4 : {
   $35_1 = $4_1 + 16 | 0;
   if ($35_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $35_1;
  }
  return;
 }
 
 function $120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $56_1 = 0, $55_1 = 0, $52_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $55_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $55_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = $5_1;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $76(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (($5_1 | 0) != (HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0) {
      break label$5
     }
     if (!((3 | 0) != ((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 13 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
      break label$4
     }
    }
    $17(6 | 0, 1 & 1 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    break label$3;
   }
   label$6 : {
    label$7 : {
     if (!(((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0) & 255 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[(0 + 75100 | 0) >> 2] = (HEAP32[(0 + 75100 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[(0 + 75092 | 0) >> 2] = HEAP32[(0 + 75092 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[$4_1 >> 2] = 1;
     break label$6;
    }
    HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
   }
  }
  $118(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  $52_1 = HEAP32[$4_1 >> 2] | 0;
  label$8 : {
   $56_1 = $4_1 + 16 | 0;
   if ($56_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $56_1;
  }
  return $52_1 | 0;
 }
 
 function $121($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $31_1 = 0, $30_1 = 0;
  $6_1 = global$0 - 32 | 0;
  label$1 : {
   $30_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $30_1;
  }
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP8[($6_1 + 19 | 0) >> 0] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $24((($147(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0) + ($147(HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0) | 0) + 64 | 0 | 0) | 0;
  $145(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $141(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, 8659 | 0) | 0;
  $141(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $17(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, (HEAPU8[($6_1 + 19 | 0) >> 0] | 0) & 1 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $399(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $31_1 = $6_1 + 32 | 0;
   if ($31_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $31_1;
  }
  return;
 }
 
 function $122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $13_1;
  }
  HEAP8[($4_1 + 15 | 0) >> 0] = $0_1;
  HEAP8[($4_1 + 14 | 0) >> 0] = $1_1;
  HEAP32[(0 + 75056 | 0) >> 2] = 2;
  HEAP8[(0 + 74032 | 0) >> 0] = HEAPU8[($4_1 + 15 | 0) >> 0] | 0;
  HEAP8[(0 + 74033 | 0) >> 0] = HEAPU8[($4_1 + 14 | 0) >> 0] | 0;
  $38();
  label$3 : {
   $14_1 = $4_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $14_1;
  }
  return;
 }
 
 function $123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $20_1 = 0, $19_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $19_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $19_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $124(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 7 | 0 | 0) | 0;
  $125((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | ((HEAPU8[($4_1 + 7 | 0) >> 0] | 0) & 255 | 0) | 0) & 255 | 0 | 0);
  label$3 : {
   $20_1 = $4_1 + 16 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $20_1;
  }
  return;
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $73_1 = 0, $72_1 = 0, $69_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $72_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $72_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!($143(8661 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
      break label$5
     }
     if ($143(8663 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
      break label$4
     }
    }
    HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] = 12;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$3;
   }
   label$6 : {
    label$7 : {
     if (!($143(8668 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
      break label$7
     }
     if ($143(8670 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
      break label$6
     }
    }
    HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] = 13;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$3;
   }
   label$8 : {
    label$9 : {
     if (!($143(8676 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
      break label$9
     }
     if ($143(8678 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
      break label$8
     }
    }
    HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] = 14;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$3;
   }
   label$10 : {
    if ($143(8684 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$10
    }
    HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] = 9;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$3;
   }
   label$11 : {
    if ($143(8686 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$11
    }
    HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] = 10;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$3;
   }
   label$12 : {
    if ($143(8689 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$12
    }
    HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] = 11;
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$3;
   }
   label$13 : {
    if (!($120(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$13
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$3;
   }
   label$14 : {
    if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 > 14 >>> 0 & 1 | 0)) {
     break label$14
    }
    $17(35 | 0, 1 & 1 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP8[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 0] = HEAP32[$4_1 >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $69_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$15 : {
   $73_1 = $4_1 + 16 | 0;
   if ($73_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $73_1;
  }
  return $69_1 | 0;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  HEAP32[(0 + 75056 | 0) >> 2] = 1;
  HEAP8[(0 + 74032 | 0) >> 0] = HEAPU8[($3_1 + 15 | 0) >> 0] | 0;
  $38();
  label$3 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $11_1;
  }
  return;
 }
 
 function $126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $127((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) & 255 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $13_1 = $4_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $13_1;
  }
  return;
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $59_1 = 0, $58_1 = 0;
  $4_1 = global$0 - 96 | 0;
  label$1 : {
   $58_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $58_1;
  }
  HEAP8[($4_1 + 95 | 0) >> 0] = $0_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = $1_1;
  $117();
  label$3 : {
   label$4 : {
    if (!($120(HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0, $4_1 + 84 | 0 | 0) | 0)) {
     break label$4
    }
    $10_1 = 0;
    $122($10_1 & 255 | 0 | 0, $10_1 & 255 | 0 | 0);
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!($137() | 0)) {
      break label$6
     }
     HEAP32[($4_1 + 80 | 0) >> 2] = ((HEAP32[($4_1 + 84 | 0) >> 2] | 0) - ($138() | 0) | 0) - 1 | 0;
     label$7 : {
      label$8 : {
       if ((HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) > (127 | 0) & 1 | 0) {
        break label$8
       }
       if (!((HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) < (-128 | 0) & 1 | 0)) {
        break label$7
       }
      }
      HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
      $213($4_1 + 16 | 0 | 0, 8692 | 0, $4_1 | 0) | 0;
      $17(16 | 0, 0 & 1 | 0 | 0, $4_1 + 16 | 0 | 0) | 0;
     }
     break label$5;
    }
    HEAP32[($4_1 + 80 | 0) >> 2] = 0;
   }
   $122((HEAPU8[($4_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0, ((HEAP32[($4_1 + 80 | 0) >> 2] | 0) & 255 | 0) & 255 | 0 | 0);
  }
  label$9 : {
   $59_1 = $4_1 + 96 | 0;
   if ($59_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $59_1;
  }
  return;
 }
 
 function $128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $23_1 = 0, $65_1 = 0, $78_1 = 0, $130_1 = 0, $129_1 = 0;
  $4_1 = global$0 - 32 | 0;
  label$1 : {
   $129_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $129_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : while (1) {
    if (!(((HEAPU8[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $23_1 = 24;
    label$5 : {
     if (!((44 | 0) == (((HEAPU8[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0) << $23_1 | 0) >> $23_1 | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$6 : {
   label$7 : {
    if (!((1 | 0) != (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $121(6 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
    break label$6;
   }
   HEAP8[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0) >> 0] = 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 1 | 0) | 0;
   label$8 : {
    if (!($120(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$8
    }
    $65_1 = 0;
    $122($65_1 & 255 | 0 | 0, $65_1 & 255 | 0 | 0);
    break label$6;
   }
   HEAP8[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0) >> 0] = 44;
   $78_1 = 24;
   label$9 : {
    label$10 : {
     if (!((102 | 0) == (((HEAPU8[((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $78_1 | 0) >> $78_1 | 0 | 0) & 1 | 0)) {
      break label$10
     }
     label$11 : {
      if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 > 15 >>> 0 & 1 | 0)) {
       break label$11
      }
      $121(33 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
      HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & 15 | 0;
     }
     break label$9;
    }
    label$12 : {
     if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 > 7 >>> 0 & 1 | 0)) {
      break label$12
     }
     $121(34 | 0, HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
     HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & 7 | 0;
    }
   }
   $127((HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | (HEAP32[$4_1 >> 2] | 0) | 0) & 255 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  }
  label$13 : {
   $130_1 = $4_1 + 32 | 0;
   if ($130_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $130_1;
  }
  return;
 }
 
 function $129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $42_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $41_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $41_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $120(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 65535 >>> 0 & 1 | 0)) {
    break label$3
   }
   $121(36 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
  }
  $130((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) & 255 | 0 | 0, (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 8 | 0) & 255 | 0) & 255 | 0 | 0, ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & 255 | 0) & 255 | 0 | 0);
  label$4 : {
   $42_1 = $4_1 + 16 | 0;
   if ($42_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $42_1;
  }
  return;
 }
 
 function $130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $17_1 = 0, $16_1 = 0;
  $5_1 = global$0 - 16 | 0;
  label$1 : {
   $16_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $16_1;
  }
  HEAP8[($5_1 + 15 | 0) >> 0] = $0_1;
  HEAP8[($5_1 + 14 | 0) >> 0] = $1_1;
  HEAP8[($5_1 + 13 | 0) >> 0] = $2_1;
  HEAP32[(0 + 75056 | 0) >> 2] = 3;
  HEAP8[(0 + 74032 | 0) >> 0] = HEAPU8[($5_1 + 15 | 0) >> 0] | 0;
  HEAP8[(0 + 74033 | 0) >> 0] = HEAPU8[($5_1 + 14 | 0) >> 0] | 0;
  HEAP8[(0 + 74034 | 0) >> 0] = HEAPU8[($5_1 + 13 | 0) >> 0] | 0;
  $38();
  label$3 : {
   $17_1 = $5_1 + 16 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  return;
 }
 
 function $131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $34_1 = 0, $33_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $33_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $33_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $120(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 15 >>> 0 & 1 | 0)) {
    break label$3
   }
   $121(33 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
  }
  $125((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & 15 | 0) | 0) & 255 | 0 | 0);
  label$4 : {
   $34_1 = $4_1 + 16 | 0;
   if ($34_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $34_1;
  }
  return;
 }
 
 function $132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $33_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $32_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $32_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $120(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 15 >>> 0 & 1 | 0)) {
    break label$3
   }
   $121(33 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
  }
  $125(((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & 15 | 0 | 112 | 0) & 255 | 0 | 0);
  label$4 : {
   $33_1 = $4_1 + 16 | 0;
   if ($33_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $33_1;
  }
  return;
 }
 
 function $133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $34_1 = 0, $33_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $33_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $33_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  $120(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
  label$3 : {
   if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 > 7 >>> 0 & 1 | 0)) {
    break label$3
   }
   $121(34 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
  }
  $125((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & 7 | 0) | 0) & 255 | 0 | 0);
  label$4 : {
   $34_1 = $4_1 + 16 | 0;
   if ($34_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $34_1;
  }
  return;
 }
 
 function $134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $23_1 = 0, $75_1 = 0, $87_1 = 0, $150_1 = 0, $167_1 = 0, $172_1 = 0, $196_1 = 0, $373_1 = 0, $372_1 = 0;
  $4_1 = global$0 - 48 | 0;
  label$1 : {
   $372_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $372_1;
  }
  $5_1 = 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $117();
  HEAP32[($4_1 + 32 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : while (1) {
    if (!(((HEAPU8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (HEAP32[($4_1 + 36 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $23_1 = 24;
    label$5 : {
     if (!((44 | 0) == (((HEAPU8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (HEAP32[($4_1 + 36 | 0) >> 2] | 0) | 0) >> 0] | 0) << $23_1 | 0) >> $23_1 | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  label$6 : {
   label$7 : {
    if (!((1 | 0) != (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $121(6 | 0, HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
    break label$6;
   }
   HEAP8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
   HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0) | 0;
   label$8 : {
    if (!((0 | 0) != (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    $75_1 = 24;
    if (!($149(((HEAPU8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $75_1 | 0) >> $75_1 | 0 | 0) | 0)) {
     break label$8
    }
    HEAP8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] = 0;
   }
   $87_1 = 24;
   label$9 : {
    if (!($149(((HEAPU8[(HEAP32[($4_1 + 20 | 0) >> 2] | 0) >> 0] | 0) << $87_1 | 0) >> $87_1 | 0 | 0) | 0)) {
     break label$9
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($4_1 + 19 | 0) >> 0] = $135(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
   label$10 : {
    if (!((29 | 0) == ((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
     break label$10
    }
    label$11 : {
     if (!($124(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 19 | 0 | 0) | 0)) {
      break label$11
     }
     $125(0 & 255 | 0 | 0);
     break label$6;
    }
   }
   HEAP8[($4_1 + 18 | 0) >> 0] = $135(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   label$12 : {
    if (!((29 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
     break label$12
    }
    label$13 : {
     if (!($124(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $4_1 + 18 | 0 | 0) | 0)) {
      break label$13
     }
     $125(0 & 255 | 0 | 0);
     break label$6;
    }
   }
   HEAP8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (HEAP32[($4_1 + 28 | 0) >> 2] | 0) | 0) >> 0] = 44;
   label$14 : {
    if (!((0 | 0) != (HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$14
    }
    $150_1 = 24;
    if (!((0 | 0) == (((HEAPU8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $150_1 | 0) >> $150_1 | 0 | 0) & 1 | 0)) {
     break label$14
    }
    HEAP8[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 28 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] = 32;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = -1;
   $167_1 = (HEAPU8[($4_1 + 19 | 0) >> 0] | 0) + -16 | 0;
   label$15 : {
    label$16 : {
     if ($167_1 >>> 0 > 12 >>> 0) {
      break label$16
     }
     label$17 : {
      switch ($167_1 | 0) {
      default:
       $172_1 = (HEAPU8[($4_1 + 18 | 0) >> 0] | 0) + -19 | 0;
       label$30 : {
        label$31 : {
         if ($172_1 >>> 0 > 8 >>> 0) {
          break label$31
         }
         label$32 : {
          switch ($172_1 | 0) {
          default:
           HEAP32[($4_1 + 12 | 0) >> 2] = 10;
           break label$30;
          case 3:
           HEAP32[($4_1 + 12 | 0) >> 2] = 1;
           break label$30;
          case 2:
           HEAP32[($4_1 + 12 | 0) >> 2] = 0;
           break label$30;
          case 8:
           HEAP32[($4_1 + 12 | 0) >> 2] = 3;
           break label$30;
          case 1:
          case 4:
          case 5:
          case 6:
           break label$31;
          case 7:
           break label$32;
          };
         }
         HEAP32[($4_1 + 12 | 0) >> 2] = 2;
         break label$30;
        }
        label$37 : {
         if (!(((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) < (15 | 0) & 1 | 0)) {
          break label$37
         }
         HEAP32[($4_1 + 12 | 0) >> 2] = (HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 64 | 0;
        }
       }
       break label$15;
      case 1:
       $196_1 = (HEAPU8[($4_1 + 18 | 0) >> 0] | 0) + -18 | 0;
       label$38 : {
        if ($196_1 >>> 0 > 7 >>> 0) {
         break label$38
        }
        label$39 : {
         switch ($196_1 | 0) {
         default:
          HEAP32[($4_1 + 12 | 0) >> 2] = 16;
          break label$38;
         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
          break label$38;
         case 7:
          break label$39;
         };
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 15;
       }
       break label$15;
      case 2:
       label$41 : {
        if (!((17 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$41
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 17;
       }
       break label$15;
      case 3:
       label$42 : {
        if (!((16 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$42
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 11;
       }
       break label$15;
      case 4:
       label$43 : {
        if (!((24 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$43
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 8;
       }
       break label$15;
      case 6:
       label$44 : {
        if (!((16 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$44
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 5;
       }
       break label$15;
      case 5:
       label$45 : {
        if (!((16 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$45
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 4;
       }
       break label$15;
      case 7:
       label$46 : {
        if (!((25 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$46
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 13;
       }
       break label$15;
      case 8:
       label$47 : {
        if (!((20 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$47
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 9;
       }
       break label$15;
      case 9:
       label$48 : {
        if (!((17 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$48
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 14;
       }
       break label$15;
      case 11:
       label$49 : {
        if (!((16 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$49
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 7;
       }
       break label$15;
      case 10:
       label$50 : {
        if (!((16 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
         break label$50
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 6;
       }
       break label$15;
      case 12:
       break label$17;
      };
     }
     label$51 : {
      if (!((9 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$51
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = 29;
     }
     break label$15;
    }
    label$52 : {
     label$53 : {
      if (!((15 | 0) > ((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$53
      }
      if (!((16 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$53
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = (HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 80 | 0;
      break label$52;
     }
     label$54 : {
      if (!((9 | 0) == ((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$54
      }
      if (!((28 | 0) == ((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$54
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = 30;
     }
    }
   }
   label$55 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$55
    }
    $121(37 | 0, HEAP32[((HEAP32[($4_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0, 1 & 1 | 0 | 0);
    break label$6;
   }
   $125((HEAP32[($4_1 + 12 | 0) >> 2] | 0) & 255 | 0 | 0);
  }
  label$56 : {
   $373_1 = $4_1 + 48 | 0;
   if ($373_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $373_1;
  }
  return;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $70_1 = 0, $69_1 = 0, $66_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $69_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $69_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if ($143(8695 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$4
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 16;
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (!($143(8697 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
      break label$6
     }
     if ($143(8701 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
      break label$5
     }
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 17;
    break label$3;
   }
   label$7 : {
    if ($143(8704 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$7
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 18;
    break label$3;
   }
   label$8 : {
    if ($143(8706 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$8
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 19;
    break label$3;
   }
   label$9 : {
    if ($143(8709 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$9
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 20;
    break label$3;
   }
   label$10 : {
    if ($143(8711 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$10
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 21;
    break label$3;
   }
   label$11 : {
    if ($143(8714 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$11
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 22;
    break label$3;
   }
   label$12 : {
    label$13 : {
     if (!($143(8717 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
      break label$13
     }
     if ($143(8721 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
      break label$12
     }
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 23;
    break label$3;
   }
   label$14 : {
    label$15 : {
     if (!($143(8724 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
      break label$15
     }
     if ($143(8728 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
      break label$14
     }
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 24;
    break label$3;
   }
   label$16 : {
    if ($143(8730 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$16
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 25;
    break label$3;
   }
   label$17 : {
    if ($143(8732 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$17
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 26;
    break label$3;
   }
   label$18 : {
    if ($143(8735 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$18
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 27;
    break label$3;
   }
   label$19 : {
    if ($143(8738 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$19
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 28;
    break label$3;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 29;
  }
  $66_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$20 : {
   $70_1 = $3_1 + 16 | 0;
   if ($70_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $70_1;
  }
  return $66_1 | 0;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $41_1 = 0, $40_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   $40_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $40_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $117();
  label$3 : {
   label$4 : {
    if (!($120(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 4 | 0 | 0) | 0)) {
     break label$4
    }
    $125(0 & 255 | 0 | 0);
    break label$3;
   }
   $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   label$5 : {
    label$6 : {
     if ($15_1 >>> 0 > 3 >>> 0) {
      break label$6
     }
     label$7 : {
      switch ($15_1 | 0) {
      default:
       $125((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) & 255 | 0 | 0);
       break label$5;
      case 1:
      case 2:
       break label$6;
      case 3:
       break label$7;
      };
     }
     $125(((HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + 2 | 0) & 255 | 0 | 0);
     break label$5;
    }
    $121(32 | 0, HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0);
    $125(0 & 255 | 0 | 0);
   }
  }
  label$9 : {
   $41_1 = $4_1 + 16 | 0;
   if ($41_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $41_1;
  }
  return;
 }
 
 function $137() {
  var $2_1 = 0, $15_1 = 0;
  $2_1 = global$0 - 16 | 0;
  label$1 : {
   label$2 : {
    if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
     break label$2
    }
    $15_1 = (HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0;
    break label$1;
   }
   $15_1 = (HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0;
  }
  HEAP8[($2_1 + 15 | 0) >> 0] = $15_1;
  return (((HEAPU8[($2_1 + 15 | 0) >> 0] | 0) & 255 | 0) & 3 | 0 ? 0 : 1) | 0;
 }
 
 function $138() {
  var $10_1 = 0;
  label$1 : {
   label$2 : {
    if (!(((HEAPU8[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
     break label$2
    }
    $10_1 = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    break label$1;
   }
   $10_1 = HEAP32[((HEAP32[(0 + 83324 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
  }
  return $10_1 | 0;
 }
 
 function $139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $146($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $140($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $4_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 & 255 | 0 | 0) != ($5_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$3
     }
     if (!$5_1) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $3_1 = $4_1;
  }
  return ($3_1 & 255 | 0) - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $145($0_1 + ($147($0_1 | 0) | 0) | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $142($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if ($4_1) {
      break label$3
     }
     $2_1 = $3_1;
     break label$1;
    }
    label$4 : {
     $3_1 = $3_1 & 255 | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$4
     }
     if (($150($3_1 | 0) | 0 | 0) == ($150(HEAPU8[$1_1 >> 0] | 0 | 0) | 0 | 0)) {
      break label$4
     }
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     break label$1;
    }
    $1_1 = $1_1 + 1 | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $0_1 = $0_1 + 1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($150($2_1 & 255 | 0 | 0) | 0) - ($150(HEAPU8[$1_1 >> 0] | 0 | 0) | 0) | 0 | 0;
 }
 
 function $144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $144($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($147($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $147($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     $1_1 = $0_1;
     break label$1;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    $1_1 = $2_1;
    break label$1;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $148($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = HEAPU8[$0_1 >> 0] | 0;
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $4_1 - $5_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $150($0_1) {
  $0_1 = $0_1 | 0;
  return ($151($0_1 | 0) | 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $152($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 144 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 | 0) < (0 | 0) ? -1 : $0_1 + 2147483647 | 0;
  i64toi32_i32$0 = 0;
  $162($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $165($4_1 | 0, $2_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 120 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0;
  }
  label$4 : {
   $6_1 = $4_1 + 144 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $6_1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $153($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $152($0_1 | 0, $1_1 | 0, $2_1 | 0, -2147483648 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $154($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $39_1 = 0;
  label$1 : {
   $4_1 = global$0 - 208 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = 1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  label$3 : {
   $5_1 = Math_imul($2_1, $1_1);
   if (!$5_1) {
    break label$3
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
   $6_1 = 0 - $2_1 | 0;
   $1_1 = $2_1;
   $7_1 = $1_1;
   $8_1 = 2;
   label$4 : while (1) {
    $39_1 = $7_1 + $2_1 | 0;
    $7_1 = $1_1;
    $1_1 = $39_1 + $1_1 | 0;
    HEAP32[(($4_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] = $1_1;
    $8_1 = $8_1 + 1 | 0;
    if ($1_1 >>> 0 < $5_1 >>> 0) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    label$6 : {
     $7_1 = ($0_1 + $5_1 | 0) + $6_1 | 0;
     if ($7_1 >>> 0 > $0_1 >>> 0) {
      break label$6
     }
     $8_1 = 1;
     $1_1 = 1;
     break label$5;
    }
    $8_1 = 1;
    $1_1 = 1;
    label$7 : while (1) {
     label$8 : {
      label$9 : {
       if (($8_1 & 3 | 0 | 0) != (3 | 0)) {
        break label$9
       }
       $155($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 + 16 | 0 | 0);
       $156($4_1 + 8 | 0 | 0, 2 | 0);
       $1_1 = $1_1 + 2 | 0;
       break label$8;
      }
      label$10 : {
       label$11 : {
        $8_1 = $1_1 + -1 | 0;
        if ((HEAP32[(($4_1 + 16 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($7_1 - $0_1 | 0) >>> 0) {
         break label$11
        }
        $157($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $4_1 + 16 | 0 | 0);
        break label$10;
       }
       $155($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 + 16 | 0 | 0);
      }
      label$12 : {
       if (($1_1 | 0) != (1 | 0)) {
        break label$12
       }
       $158($4_1 + 8 | 0 | 0, 1 | 0);
       $1_1 = 0;
       break label$8;
      }
      $158($4_1 + 8 | 0 | 0, $8_1 | 0);
      $1_1 = 1;
     }
     $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
     $0_1 = $0_1 + $2_1 | 0;
     if ($0_1 >>> 0 < $7_1 >>> 0) {
      continue label$7
     }
     break label$7;
    };
   }
   $157($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 | 0, 0 | 0, $4_1 + 16 | 0 | 0);
   label$13 : while (1) {
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        if (($1_1 | 0) != (1 | 0)) {
         break label$17
        }
        if (($8_1 | 0) != (1 | 0)) {
         break label$17
        }
        if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
         break label$16
        }
        break label$3;
       }
       if (($1_1 | 0) > (1 | 0)) {
        break label$15
       }
      }
      $8_1 = $159($4_1 + 8 | 0 | 0) | 0;
      $156($4_1 + 8 | 0 | 0, $8_1 | 0);
      $1_1 = $8_1 + $1_1 | 0;
      $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      break label$14;
     }
     $158($4_1 + 8 | 0 | 0, 2 | 0);
     HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     $156($4_1 + 8 | 0 | 0, 1 | 0);
     $5_1 = $0_1 + $6_1 | 0;
     $7_1 = $1_1 + -2 | 0;
     $157($5_1 - (HEAP32[(($4_1 + 16 | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $1_1 + -1 | 0 | 0, 1 | 0, $4_1 + 16 | 0 | 0);
     $158($4_1 + 8 | 0 | 0, 1 | 0);
     $8_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
     $157($5_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 8 | 0 | 0, $7_1 | 0, 1 | 0, $4_1 + 16 | 0 | 0);
     $1_1 = $7_1;
    }
    $0_1 = $0_1 + $6_1 | 0;
    continue label$13;
   };
  }
  label$18 : {
   $10_1 = $4_1 + 208 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
 }
 
 function $155($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $7_1 = 0;
  label$1 : {
   $5_1 = global$0 - 240 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $11_1;
  }
  HEAP32[$5_1 >> 2] = $0_1;
  $6_1 = 1;
  label$3 : {
   if (($3_1 | 0) < (2 | 0)) {
    break label$3
   }
   $7_1 = 0 - $1_1 | 0;
   $6_1 = 1;
   $8_1 = $0_1;
   label$4 : while (1) {
    label$5 : {
     $9_1 = $8_1 + $7_1 | 0;
     $10_1 = $3_1 + -2 | 0;
     $8_1 = $9_1 - (HEAP32[($4_1 + ($10_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2_1]($0_1, $8_1) | 0 | 0) < (0 | 0)) {
      break label$5
     }
     if ((FUNCTION_TABLE[$2_1]($0_1, $9_1) | 0 | 0) > (-1 | 0)) {
      break label$3
     }
    }
    $0_1 = $5_1 + ($6_1 << 2 | 0) | 0;
    label$6 : {
     label$7 : {
      if ((FUNCTION_TABLE[$2_1]($8_1, $9_1) | 0 | 0) < (0 | 0)) {
       break label$7
      }
      HEAP32[$0_1 >> 2] = $8_1;
      $10_1 = $3_1 + -1 | 0;
      break label$6;
     }
     HEAP32[$0_1 >> 2] = $9_1;
     $8_1 = $9_1;
    }
    $6_1 = $6_1 + 1 | 0;
    if (($10_1 | 0) < (2 | 0)) {
     break label$3
    }
    $0_1 = HEAP32[$5_1 >> 2] | 0;
    $3_1 = $10_1;
    continue label$4;
   };
  }
  $160($1_1 | 0, $5_1 | 0, $6_1 | 0);
  label$8 : {
   $12_1 = $5_1 + 240 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = $3_1;
   $1_1 = $1_1 + -32 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 >>> $1_1 | 0;
  HEAP32[$0_1 >> 2] = $2_1 << (32 - $1_1 | 0) | 0 | ($3_1 >>> $1_1 | 0) | 0;
 }
 
 function $157($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $13_1 = 0, $12_1 = 0, $10_1 = 0;
  label$1 : {
   $7_1 = global$0 - 240 | 0;
   $12_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  $8_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($7_1 + 232 | 0) >> 2] = $8_1;
  $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = $0_1;
  HEAP32[($7_1 + 236 | 0) >> 2] = $3_1;
  $9_1 = 1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (($8_1 | 0) != (1 | 0)) {
        break label$7
       }
       if (!$3_1) {
        break label$6
       }
      }
      $9_1 = 1;
      $8_1 = $0_1 - (HEAP32[($6_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      if ((FUNCTION_TABLE[$2_1]($8_1, $0_1) | 0 | 0) < (1 | 0)) {
       break label$6
      }
      $10_1 = 0 - $1_1 | 0;
      $11_1 = !$5_1;
      $9_1 = 1;
      label$8 : {
       label$9 : while (1) {
        $3_1 = $8_1;
        label$10 : {
         if (!($11_1 & 1 | 0)) {
          break label$10
         }
         if (($4_1 | 0) < (2 | 0)) {
          break label$10
         }
         $8_1 = HEAP32[((($4_1 << 2 | 0) + $6_1 | 0) + -8 | 0) >> 2] | 0;
         $11_1 = $0_1 + $10_1 | 0;
         if ((FUNCTION_TABLE[$2_1]($11_1, $3_1) | 0 | 0) > (-1 | 0)) {
          break label$8
         }
         if ((FUNCTION_TABLE[$2_1]($11_1 - $8_1 | 0, $3_1) | 0 | 0) > (-1 | 0)) {
          break label$8
         }
        }
        HEAP32[($7_1 + ($9_1 << 2 | 0) | 0) >> 2] = $3_1;
        $9_1 = $9_1 + 1 | 0;
        $0_1 = $159($7_1 + 232 | 0 | 0) | 0;
        $156($7_1 + 232 | 0 | 0, $0_1 | 0);
        $4_1 = $0_1 + $4_1 | 0;
        label$11 : {
         if ((HEAP32[($7_1 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
          break label$11
         }
         if (!(HEAP32[($7_1 + 236 | 0) >> 2] | 0)) {
          break label$4
         }
        }
        $5_1 = 0;
        $11_1 = 1;
        $0_1 = $3_1;
        $8_1 = $3_1 - (HEAP32[($6_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
        if ((FUNCTION_TABLE[$2_1]($8_1, HEAP32[$7_1 >> 2] | 0) | 0 | 0) > (0 | 0)) {
         continue label$9
        }
        break label$5;
       };
      }
      $3_1 = $0_1;
      break label$4;
     }
     $3_1 = $0_1;
    }
    if ($5_1) {
     break label$3
    }
   }
   $160($1_1 | 0, $7_1 | 0, $9_1 | 0);
   $155($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, $6_1 | 0);
  }
  label$12 : {
   $13_1 = $7_1 + 240 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $13_1;
  }
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
   $2_1 = 0;
   HEAP32[$0_1 >> 2] = 0;
   $1_1 = $1_1 + -32 | 0;
  }
  HEAP32[$0_1 >> 2] = $2_1 << $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 >>> (32 - $1_1 | 0) | 0 | ($3_1 << $1_1 | 0) | 0;
 }
 
 function $159($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $161((HEAP32[$0_1 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $0_1 = $161(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   return ($0_1 ? $0_1 + 32 | 0 : 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $160($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $3_1 = global$0 - 256 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if (($2_1 | 0) < (2 | 0)) {
    break label$3
   }
   $4_1 = $1_1 + ($2_1 << 2 | 0) | 0;
   HEAP32[$4_1 >> 2] = $3_1;
   if (!$0_1) {
    break label$3
   }
   $5_1 = $3_1;
   label$4 : while (1) {
    $6_1 = $0_1 >>> 0 < 256 >>> 0 ? $0_1 : 256;
    $404($5_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
    $5_1 = 0;
    label$5 : while (1) {
     $7_1 = $1_1 + ($5_1 << 2 | 0) | 0;
     $5_1 = $5_1 + 1 | 0;
     $404(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[($1_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0 | 0, $6_1 | 0) | 0;
     HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + $6_1 | 0;
     if (($5_1 | 0) != ($2_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $0_1 = $0_1 - $6_1 | 0;
    if (!$0_1) {
     break label$3
    }
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    continue label$4;
   };
  }
  label$6 : {
   $9_1 = $3_1 + 256 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 32 | 0;
  }
  $1_1 = 0;
  label$2 : {
   if ($0_1 & 1 | 0) {
    break label$2
   }
   label$3 : while (1) {
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $0_1 & 2 | 0;
    $0_1 = $0_1 >>> 1 | 0;
    if (!$2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  return $1_1 | 0;
 }
 
 function $162($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $13_1 = $12_1;
    } else {
     $13_1 = 0
    }
    $11_1 = $13_1;
   }
   if ($11_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $1_1 | 0;
   return;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $4$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $10$hi = 0, $27_1 = 0, $27$hi = 0, $35_1 = 0, $35$hi = 0, $47_1 = 0, $49_1 = 0, $49$hi = 0, $56_1 = 0, $56$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $22_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $23_1 = 0
       } else {
        $23_1 = 1
       }
       $24_1 = $23_1;
      } else {
       $24_1 = 0
      }
      $22_1 = $24_1;
     }
     if ($22_1) {
      break label$2
     }
    }
    $1_1 = $227($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$2 = $27_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = $2_1 - $3_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
    $35_1 = i64toi32_i32$0;
    $35$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = $35$hi;
    i64toi32_i32$2 = $35_1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $25_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       $26_1 = 0
      } else {
       $26_1 = 1
      }
      $28_1 = $26_1;
     } else {
      $28_1 = 0
     }
     $25_1 = $28_1;
    }
    if ($25_1) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $4_1 | 0;
    break label$4;
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
  }
  label$6 : {
   label$7 : {
    if ($2_1) {
     break label$7
    }
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    break label$6;
   }
   $47_1 = $0_1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $49_1 = i64toi32_i32$3;
   $49$hi = i64toi32_i32$5;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$3 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $56_1 = i64toi32_i32$3;
   $56$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $49$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$3 = $56$hi;
   i64toi32_i32$0 = $56_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$2 = $47_1;
   HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$8 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$8
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $164() {
  return 85884 | 0;
 }
 
 function $165($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $11$hi = 0, i64toi32_i32$1 = 0, $11_1 = 0, $12$hi = 0, $7_1 = 0, $13$hi = 0, $12_1 = 0, $13_1 = 0, $4_1 = 0, $6_1 = 0, $14_1 = 0, $14$hi = 0, $8_1 = 0, $34_1 = 0, $35_1 = 0, $10_1 = 0, $9_1 = 0, $194_1 = 0, $194$hi = 0, $251_1 = 0, $251$hi = 0, $333$hi = 0, $336_1 = 0, $336$hi = 0, $415$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$12
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$11;
           }
           $5_1 = $163($0_1 | 0) | 0;
          }
          if ($149($5_1 | 0) | 0) {
           continue label$10
          }
          break label$10;
         };
         $6_1 = 0;
         label$13 : {
          $7_1 = $5_1 + -43 | 0;
          if ($7_1 >>> 0 > 2 >>> 0) {
           break label$13
          }
          label$14 : {
           switch ($7_1 | 0) {
           case 1:
            break label$13;
           default:
            break label$14;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$15 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$15
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$13;
          }
          $5_1 = $163($0_1 | 0) | 0;
         }
         label$16 : {
          label$17 : {
           if ($1_1 & -17 | 0) {
            break label$17
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$17
           }
           label$18 : {
            label$19 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$19
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$18;
            }
            $5_1 = $163($0_1 | 0) | 0;
           }
           label$20 : {
            if (($5_1 | 32 | 0 | 0) != (120 | 0)) {
             break label$20
            }
            label$21 : {
             label$22 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$22
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$21;
             }
             $5_1 = $163($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 8753 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$7
            }
            label$23 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$23
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$3
             }
             break label$4;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$4
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$3;
           }
           if ($1_1) {
            break label$16
           }
           $1_1 = 8;
           break label$7;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 8753 | 0) >> 0] | 0) >>> 0) {
           break label$16
          }
          label$24 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$24
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $162($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($164() | 0) >> 2] = 28;
          break label$3;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$7
         }
         i64toi32_i32$0 = 0;
         $11_1 = 0;
         $11$hi = i64toi32_i32$0;
         label$25 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$25
          }
          $1_1 = 0;
          label$26 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$27 : {
            label$28 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$28
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$27;
            }
            $5_1 = $163($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$29 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$29
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$26
            }
           }
           break label$26;
          };
          i64toi32_i32$0 = 0;
          $11_1 = $1_1;
          $11$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$8
         }
         i64toi32_i32$0 = $11$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $12_1 = i64toi32_i32$1;
         $12$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $13_1 = $2_1;
         $13$hi = i64toi32_i32$0;
         label$30 : while (1) {
          label$31 : {
           label$32 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$32
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$31;
           }
           $5_1 = $163($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$0 = $13$hi;
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$2 = $12_1;
          i64toi32_i32$1 = $13$hi;
          i64toi32_i32$3 = $13_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $11_1 = i64toi32_i32$4;
          $11$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$8
          }
          i64toi32_i32$5 = $11$hi;
          i64toi32_i32$0 = $11_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$8
          }
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $12_1 = i64toi32_i32$5;
          $12$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $13_1 = $2_1;
          $13$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $194_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $194$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $12$hi;
          i64toi32_i32$0 = $12_1;
          i64toi32_i32$3 = $194$hi;
          i64toi32_i32$2 = $194_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$30
          }
          break label$30;
         };
         $1_1 = 10;
         break label$6;
        }
        HEAP32[($164() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$3;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$6
       }
       break label$5;
      }
      label$33 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$33
       }
       i64toi32_i32$0 = 0;
       $11_1 = 0;
       $11$hi = i64toi32_i32$0;
       label$34 : {
        $2_1 = HEAPU8[($5_1 + 8753 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$34
        }
        $7_1 = 0;
        label$35 : while (1) {
         $7_1 = $2_1 + Math_imul($7_1, $1_1) | 0;
         label$36 : {
          label$37 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$37
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$36;
          }
          $5_1 = $163($0_1 | 0) | 0;
         }
         $2_1 = HEAPU8[($5_1 + 8753 | 0) >> 0] | 0;
         label$38 : {
          if ($7_1 >>> 0 > 119304646 >>> 0) {
           break label$38
          }
          if ($1_1 >>> 0 > $2_1 >>> 0) {
           continue label$35
          }
         }
         break label$35;
        };
        i64toi32_i32$0 = 0;
        $11_1 = $7_1;
        $11$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$6
       }
       i64toi32_i32$0 = 0;
       $12_1 = $1_1;
       $12$hi = i64toi32_i32$0;
       label$39 : while (1) {
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $13_1 = i64toi32_i32$5;
        $13$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $14_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $14$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $14_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $251_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $251$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$5 = $13_1;
        i64toi32_i32$0 = $251$hi;
        i64toi32_i32$3 = $251_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$6
        }
        label$40 : {
         label$41 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$41
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$40;
         }
         $5_1 = $163($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$3 = $13_1;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$0 = $14_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $11_1 = i64toi32_i32$1;
        $11$hi = i64toi32_i32$4;
        $2_1 = HEAPU8[($5_1 + 8753 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$6
        }
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$0 = 0;
        $230($4_1 | 0, $12_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$6
        }
        continue label$39;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 9009 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $11_1 = 0;
      $11$hi = i64toi32_i32$3;
      label$42 : {
       $2_1 = HEAPU8[($5_1 + 8753 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$42
       }
       $7_1 = 0;
       label$43 : while (1) {
        $7_1 = $2_1 | ($7_1 << $8_1 | 0) | 0;
        label$44 : {
         label$45 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$45
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$44;
         }
         $5_1 = $163($0_1 | 0) | 0;
        }
        $2_1 = HEAPU8[($5_1 + 8753 | 0) >> 0] | 0;
        label$46 : {
         if ($7_1 >>> 0 > 134217727 >>> 0) {
          break label$46
         }
         if ($1_1 >>> 0 > $2_1 >>> 0) {
          continue label$43
         }
        }
        break label$43;
       };
       i64toi32_i32$3 = 0;
       $11_1 = $7_1;
       $11$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = 0;
      $12_1 = $8_1;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $34_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $34_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $13_1 = $34_1;
      $13$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$0 = $11_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$6
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$6
      }
      label$47 : while (1) {
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$4 = $12_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $35_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $35_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $333$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $336_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $336$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $333$hi;
       i64toi32_i32$5 = $35_1;
       i64toi32_i32$3 = $336$hi;
       i64toi32_i32$4 = $336_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $11_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $11$hi = i64toi32_i32$3;
       label$48 : {
        label$49 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$49
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$48;
        }
        $5_1 = $163($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$5 = $13$hi;
       i64toi32_i32$4 = $13_1;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$6
       }
       $2_1 = HEAPU8[($5_1 + 8753 | 0) >> 0] | 0;
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        continue label$47
       }
       break label$47;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 8753 | 0) >> 0] | 0) >>> 0) {
      break label$5
     }
     label$50 : while (1) {
      label$51 : {
       label$52 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$52
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$51;
       }
       $5_1 = $163($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 8753 | 0) >> 0] | 0) >>> 0) {
       continue label$50
      }
      break label$50;
     };
     HEAP32[($164() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $11_1 = i64toi32_i32$4;
     $11$hi = i64toi32_i32$0;
    }
    label$53 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$53
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$54 : {
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$54
     }
     label$55 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$55
      }
      if ($6_1) {
       break label$55
      }
      HEAP32[($164() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$3;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($11$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($11$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$54
     }
     HEAP32[($164() | 0) >> 2] = 68;
     break label$3;
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $415$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $415$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$3;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $162($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  label$56 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $166($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $168($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($195($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   $6_1 = 0;
   label$4 : {
    if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4_1 = $1_1;
    label$5 : while (1) {
     $3_1 = $4_1;
     if (!$3_1) {
      break label$4
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $1_1 = $1_1 - $3_1 | 0;
    $0_1 = $0_1 + $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $6_1 = $3_1;
   }
   $404($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $6_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $169($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $168($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $166($3_1 | 0) | 0;
   $0_1 = $168($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $167($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($166($1_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP8[($1_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $224($1_1 | 0, $0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP8[($1_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    break label$4;
   }
   $2_1 = $224($1_1 | 0, $0_1 | 0) | 0;
  }
  $167($1_1 | 0);
  return $2_1 | 0;
 }
 
 function $171($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      if (!($0_1 & 3 | 0)) {
       break label$4
      }
      $4_1 = $1_1 & 255 | 0;
      label$5 : while (1) {
       if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
        break label$3
       }
       $0_1 = $0_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = ($2_1 | 0) != (0 | 0);
       if (!$2_1) {
        break label$4
       }
       if ($0_1 & 3 | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$3_1) {
      break label$2
     }
    }
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      if ($2_1 >>> 0 < 4 >>> 0) {
       break label$7
      }
      $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
      $3_1 = $2_1 + -4 | 0;
      $5_1 = $3_1 & 3 | 0;
      $6_1 = (($3_1 & -4 | 0) + $0_1 | 0) + 4 | 0;
      label$8 : while (1) {
       $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
       if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
        break label$6
       }
       $0_1 = $0_1 + 4 | 0;
       $2_1 = $2_1 + -4 | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$8
       }
       break label$8;
      };
      $2_1 = $5_1;
      $0_1 = $6_1;
     }
     if (!$2_1) {
      break label$2
     }
    }
    $3_1 = $1_1 & 255 | 0;
    label$9 : while (1) {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($3_1 | 0)) {
      break label$1
     }
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$9
     }
     break label$9;
    };
   }
   return 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $172($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = $166($2_1 | 0) | 0;
  }
  $4_1 = $1_1 + -1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 | 0) < (2 | 0)) {
     break label$3
    }
    $1_1 = $0_1;
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       if (!$4_1) {
        break label$5
       }
       label$7 : {
        label$8 : {
         $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $6_1 = $171($5_1 | 0, 10 | 0, (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $5_1 | 0 | 0) | 0;
         if (!$6_1) {
          break label$8
         }
         $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $5_1 = ($6_1 - $7_1 | 0) + 1 | 0;
         break label$7;
        }
        $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        $5_1 = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
       }
       $5_1 = $5_1 >>> 0 < $4_1 >>> 0 ? $5_1 : $4_1;
       $404($1_1 | 0, $7_1 | 0, $5_1 | 0) | 0;
       $7_1 = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + $5_1 | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
       $1_1 = $1_1 + $5_1 | 0;
       if ($6_1) {
        break label$5
       }
       $4_1 = $4_1 - $5_1 | 0;
       if (!$4_1) {
        break label$5
       }
       label$9 : {
        label$10 : {
         if ($7_1 >>> 0 >= (HEAP32[($2_1 + 8 | 0) >> 2] | 0) >>> 0) {
          break label$10
         }
         HEAP32[($2_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
         $5_1 = HEAPU8[$7_1 >> 0] | 0;
         break label$9;
        }
        $5_1 = $227($2_1 | 0) | 0;
        if (($5_1 | 0) > (-1 | 0)) {
         break label$9
        }
        $5_1 = 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$4
        }
        if (!((HEAPU8[$2_1 >> 0] | 0) & 16 | 0)) {
         break label$4
        }
        break label$5;
       }
       HEAP8[$1_1 >> 0] = $5_1;
       $1_1 = $1_1 + 1 | 0;
       $4_1 = $4_1 + -1 | 0;
       if (($5_1 & 255 | 0 | 0) != (10 | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     label$11 : {
      if ($0_1) {
       break label$11
      }
      $5_1 = 0;
      break label$4;
     }
     HEAP8[$1_1 >> 0] = 0;
     $5_1 = $0_1;
    }
    if (!$3_1) {
     break label$2
    }
    $167($2_1 | 0);
    break label$2;
   }
   $1_1 = HEAPU8[($2_1 + 74 | 0) >> 0] | 0;
   HEAP8[($2_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
   label$12 : {
    if (!$3_1) {
     break label$12
    }
    $167($2_1 | 0);
   }
   $5_1 = 0;
   if ($4_1) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 0;
   return $0_1 | 0;
  }
  return $5_1 | 0;
 }
 
 function $173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $3_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $189(HEAP32[(0 + 9712 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $175() {
  return 68904 | 0;
 }
 
 function $176($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($177() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($164() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($164() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $177() {
  return $175() | 0 | 0;
 }
 
 function $178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $176($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $179($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$179(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $180($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $5_1 = global$0 - 208 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $8_1;
  }
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $405($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (($181(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$4
    }
    $1_1 = -1;
    break label$3;
   }
   label$5 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$5
    }
    $2_1 = $166($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$6 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$6
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$7 : {
    label$8 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$8
     }
     $1_1 = $181($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$7;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $181($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$7
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$3
   }
   $167($0_1 | 0);
  }
  label$9 : {
   $9_1 = $5_1 + 208 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  return $1_1 | 0;
 }
 
 function $181($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $19_1 = 0, i64toi32_i32$5 = 0, $12_1 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $11_1 = 0, $17_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $24_1 = 0, $24$hi = 0, $10_1 = 0, $21_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $23_1 = 0, $22_1 = 0, $8_1 = 0, $282_1 = 0;
  label$1 : {
   $7_1 = global$0 - 80 | 0;
   $22_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $22_1;
  }
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$3 : {
   label$4 : while (1) {
    label$5 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
       break label$6
      }
      HEAP32[($164() | 0) >> 2] = 61;
      $11_1 = -1;
      break label$5;
     }
     $11_1 = $1_1 + $11_1 | 0;
    }
    $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $1_1 = $12_1;
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                label$19 : {
                 label$20 : {
                  label$21 : {
                   $13_1 = HEAPU8[$1_1 >> 0] | 0;
                   if (!$13_1) {
                    break label$21
                   }
                   label$22 : {
                    label$23 : while (1) {
                     label$24 : {
                      label$25 : {
                       label$26 : {
                        $13_1 = $13_1 & 255 | 0;
                        if ($13_1) {
                         break label$26
                        }
                        $13_1 = $1_1;
                        break label$25;
                       }
                       if (($13_1 | 0) != (37 | 0)) {
                        break label$24
                       }
                       $13_1 = $1_1;
                       label$27 : while (1) {
                        if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
                         break label$25
                        }
                        $14_1 = $1_1 + 2 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                        $13_1 = $13_1 + 1 | 0;
                        $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
                        $1_1 = $14_1;
                        if (($15_1 | 0) == (37 | 0)) {
                         continue label$27
                        }
                        break label$27;
                       };
                      }
                      $1_1 = $13_1 - $12_1 | 0;
                      label$28 : {
                       if (!$0_1) {
                        break label$28
                       }
                       $182($0_1 | 0, $12_1 | 0, $1_1 | 0);
                      }
                      if ($1_1) {
                       continue label$4
                      }
                      $14_1 = $174(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
                      $16_1 = -1;
                      $13_1 = 1;
                      $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      label$29 : {
                       if (!$14_1) {
                        break label$29
                       }
                       if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                        break label$29
                       }
                       $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                       $10_1 = 1;
                       $13_1 = 3;
                      }
                      $1_1 = $1_1 + $13_1 | 0;
                      HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                      $13_1 = 0;
                      label$30 : {
                       label$31 : {
                        $17_1 = HEAP8[$1_1 >> 0] | 0;
                        $15_1 = $17_1 + -32 | 0;
                        if ($15_1 >>> 0 <= 31 >>> 0) {
                         break label$31
                        }
                        $14_1 = $1_1;
                        break label$30;
                       }
                       $14_1 = $1_1;
                       $15_1 = 1 << $15_1 | 0;
                       if (!($15_1 & 75913 | 0)) {
                        break label$30
                       }
                       label$32 : while (1) {
                        $14_1 = $1_1 + 1 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                        $13_1 = $15_1 | $13_1 | 0;
                        $17_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
                        $15_1 = $17_1 + -32 | 0;
                        if ($15_1 >>> 0 > 31 >>> 0) {
                         break label$30
                        }
                        $1_1 = $14_1;
                        $15_1 = 1 << $15_1 | 0;
                        if ($15_1 & 75913 | 0) {
                         continue label$32
                        }
                        break label$32;
                       };
                      }
                      label$33 : {
                       label$34 : {
                        if (($17_1 | 0) != (42 | 0)) {
                         break label$34
                        }
                        label$35 : {
                         label$36 : {
                          if (!($174(HEAP8[($14_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                           break label$36
                          }
                          $14_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                          if ((HEAPU8[($14_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                           break label$36
                          }
                          HEAP32[((((HEAP8[($14_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                          $1_1 = $14_1 + 3 | 0;
                          $18_1 = HEAP32[((((HEAP8[($14_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                          $10_1 = 1;
                          break label$35;
                         }
                         if ($10_1) {
                          break label$20
                         }
                         $10_1 = 0;
                         $18_1 = 0;
                         label$37 : {
                          if (!$0_1) {
                           break label$37
                          }
                          $1_1 = HEAP32[$2_1 >> 2] | 0;
                          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                          $18_1 = HEAP32[$1_1 >> 2] | 0;
                         }
                         $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
                        }
                        HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                        if (($18_1 | 0) > (-1 | 0)) {
                         break label$33
                        }
                        $18_1 = 0 - $18_1 | 0;
                        $13_1 = $13_1 | 8192 | 0;
                        break label$33;
                       }
                       $18_1 = $183($7_1 + 76 | 0 | 0) | 0;
                       if (($18_1 | 0) < (0 | 0)) {
                        break label$20
                       }
                       $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $19_1 = -1;
                      label$38 : {
                       if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
                        break label$38
                       }
                       label$39 : {
                        if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                         break label$39
                        }
                        label$40 : {
                         if (!($174(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                          break label$40
                         }
                         $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                         if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                          break label$40
                         }
                         HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                         $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                         $1_1 = $1_1 + 4 | 0;
                         HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                         break label$38;
                        }
                        if ($10_1) {
                         break label$20
                        }
                        label$41 : {
                         label$42 : {
                          if ($0_1) {
                           break label$42
                          }
                          $19_1 = 0;
                          break label$41;
                         }
                         $1_1 = HEAP32[$2_1 >> 2] | 0;
                         HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                         $19_1 = HEAP32[$1_1 >> 2] | 0;
                        }
                        $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                        break label$38;
                       }
                       HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
                       $19_1 = $183($7_1 + 76 | 0 | 0) | 0;
                       $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $14_1 = 0;
                      label$43 : while (1) {
                       $15_1 = $14_1;
                       $20_1 = -1;
                       if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
                        break label$3
                       }
                       $17_1 = $1_1 + 1 | 0;
                       HEAP32[($7_1 + 76 | 0) >> 2] = $17_1;
                       $14_1 = HEAP8[$1_1 >> 0] | 0;
                       $1_1 = $17_1;
                       $14_1 = HEAPU8[(($14_1 + Math_imul($15_1, 58) | 0) + 8975 | 0) >> 0] | 0;
                       if (($14_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                        continue label$43
                       }
                       break label$43;
                      };
                      if (!$14_1) {
                       break label$3
                      }
                      label$44 : {
                       label$45 : {
                        label$46 : {
                         label$47 : {
                          if (($14_1 | 0) != (19 | 0)) {
                           break label$47
                          }
                          $20_1 = -1;
                          if (($16_1 | 0) <= (-1 | 0)) {
                           break label$46
                          }
                          break label$3;
                         }
                         if (($16_1 | 0) < (0 | 0)) {
                          break label$45
                         }
                         HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $14_1;
                         i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                         $282_1 = i64toi32_i32$0;
                         i64toi32_i32$0 = $7_1;
                         HEAP32[($7_1 + 64 | 0) >> 2] = $282_1;
                         HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                        }
                        $1_1 = 0;
                        if (!$0_1) {
                         continue label$4
                        }
                        break label$44;
                       }
                       if (!$0_1) {
                        break label$7
                       }
                       $184($7_1 + 64 | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
                       $17_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $21_1 = $13_1 & -65537 | 0;
                      $13_1 = $13_1 & 8192 | 0 ? $21_1 : $13_1;
                      $20_1 = 0;
                      $16_1 = 9018;
                      $14_1 = $9_1;
                      $1_1 = HEAP8[($17_1 + -1 | 0) >> 0] | 0;
                      $1_1 = $15_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                      $17_1 = $1_1 + -88 | 0;
                      if ($17_1 >>> 0 <= 32 >>> 0) {
                       break label$22
                      }
                      label$48 : {
                       label$49 : {
                        label$50 : {
                         label$51 : {
                          label$52 : {
                           $15_1 = $1_1 + -65 | 0;
                           if ($15_1 >>> 0 <= 6 >>> 0) {
                            break label$52
                           }
                           if (($1_1 | 0) != (83 | 0)) {
                            break label$8
                           }
                           if (!$19_1) {
                            break label$51
                           }
                           $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                           break label$49;
                          }
                          switch ($15_1 | 0) {
                          case 2:
                           break label$50;
                          case 1:
                          case 3:
                           break label$8;
                          default:
                           break label$19;
                          };
                         }
                         $1_1 = 0;
                         $185($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                         break label$48;
                        }
                        HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$1;
                        HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
                        $19_1 = -1;
                        $14_1 = $7_1 + 8 | 0;
                       }
                       $1_1 = 0;
                       label$53 : {
                        label$54 : while (1) {
                         $15_1 = HEAP32[$14_1 >> 2] | 0;
                         if (!$15_1) {
                          break label$53
                         }
                         label$55 : {
                          $15_1 = $178($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                          $12_1 = ($15_1 | 0) < (0 | 0);
                          if ($12_1) {
                           break label$55
                          }
                          if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                           break label$55
                          }
                          $14_1 = $14_1 + 4 | 0;
                          $1_1 = $15_1 + $1_1 | 0;
                          if ($19_1 >>> 0 > $1_1 >>> 0) {
                           continue label$54
                          }
                          break label$53;
                         }
                         break label$54;
                        };
                        $20_1 = -1;
                        if ($12_1) {
                         break label$3
                        }
                       }
                       $185($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
                       label$56 : {
                        if ($1_1) {
                         break label$56
                        }
                        $1_1 = 0;
                        break label$48;
                       }
                       $15_1 = 0;
                       $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                       label$57 : while (1) {
                        $12_1 = HEAP32[$14_1 >> 2] | 0;
                        if (!$12_1) {
                         break label$48
                        }
                        $12_1 = $178($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
                        $15_1 = $12_1 + $15_1 | 0;
                        if (($15_1 | 0) > ($1_1 | 0)) {
                         break label$48
                        }
                        $182($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
                        $14_1 = $14_1 + 4 | 0;
                        if ($15_1 >>> 0 < $1_1 >>> 0) {
                         continue label$57
                        }
                        break label$57;
                       };
                      }
                      $185($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
                      $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
                      continue label$4;
                     }
                     $14_1 = $1_1 + 1 | 0;
                     HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                     $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                     $1_1 = $14_1;
                     continue label$23;
                    };
                   }
                   switch ($17_1 | 0) {
                   case 29:
                    break label$11;
                   case 22:
                    break label$12;
                   case 24:
                    break label$14;
                   case 23:
                    break label$15;
                   case 12:
                   case 17:
                    break label$16;
                   case 11:
                    break label$17;
                   case 27:
                    break label$18;
                   case 9:
                   case 13:
                   case 14:
                   case 15:
                    break label$19;
                   case 1:
                   case 2:
                   case 3:
                   case 4:
                   case 5:
                   case 6:
                   case 7:
                   case 8:
                   case 10:
                   case 16:
                   case 18:
                   case 19:
                   case 20:
                   case 21:
                   case 25:
                   case 26:
                   case 28:
                   case 30:
                   case 31:
                    break label$8;
                   default:
                    break label$13;
                   };
                  }
                  $20_1 = $11_1;
                  if ($0_1) {
                   break label$3
                  }
                  if (!$10_1) {
                   break label$7
                  }
                  $1_1 = 1;
                  label$58 : {
                   label$59 : while (1) {
                    $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
                    if (!$13_1) {
                     break label$58
                    }
                    $184($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                    $20_1 = 1;
                    $1_1 = $1_1 + 1 | 0;
                    if (($1_1 | 0) != (10 | 0)) {
                     continue label$59
                    }
                    break label$3;
                   };
                  }
                  $20_1 = 1;
                  if ($1_1 >>> 0 >= 10 >>> 0) {
                   break label$3
                  }
                  label$60 : while (1) {
                   if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
                    break label$20
                   }
                   $20_1 = 1;
                   $13_1 = $1_1 >>> 0 > 8 >>> 0;
                   $1_1 = $1_1 + 1 | 0;
                   if ($13_1) {
                    break label$3
                   }
                   continue label$60;
                  };
                 }
                 $20_1 = -1;
                 break label$3;
                }
                $1_1 = FUNCTION_TABLE[$5_1]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
                continue label$4;
               }
               $20_1 = 0;
               $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               $12_1 = $1_1 ? $1_1 : 9028;
               $1_1 = $171($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
               $14_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
               $13_1 = $21_1;
               $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
               break label$8;
              }
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
              HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$0;
              $19_1 = 1;
              $12_1 = $8_1;
              $14_1 = $9_1;
              $13_1 = $21_1;
              break label$8;
             }
             label$61 : {
              i64toi32_i32$2 = $7_1;
              i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
              $24_1 = i64toi32_i32$1;
              $24$hi = i64toi32_i32$0;
              i64toi32_i32$2 = i64toi32_i32$1;
              i64toi32_i32$1 = -1;
              i64toi32_i32$3 = -1;
              if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
               $32_1 = 1
              } else {
               if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                 $33_1 = 0
                } else {
                 $33_1 = 1
                }
                $34_1 = $33_1;
               } else {
                $34_1 = 0
               }
               $32_1 = $34_1;
              }
              if ($32_1) {
               break label$61
              }
              i64toi32_i32$2 = $24$hi;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = $24$hi;
              i64toi32_i32$1 = $24_1;
              i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
              i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
              $24_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
              $24$hi = i64toi32_i32$5;
              i64toi32_i32$3 = $7_1;
              HEAP32[($7_1 + 64 | 0) >> 2] = $24_1;
              HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
              $20_1 = 1;
              $16_1 = 9018;
              break label$10;
             }
             label$62 : {
              if (!($13_1 & 2048 | 0)) {
               break label$62
              }
              $20_1 = 1;
              $16_1 = 9019;
              break label$10;
             }
             $20_1 = $13_1 & 1 | 0;
             $16_1 = $20_1 ? 9020 : 9018;
             break label$10;
            }
            i64toi32_i32$2 = $7_1;
            i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
            i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
            $12_1 = $186(i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, $9_1 | 0) | 0;
            $20_1 = 0;
            $16_1 = 9018;
            if (!($13_1 & 8 | 0)) {
             break label$9
            }
            $1_1 = $9_1 - $12_1 | 0;
            $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
            break label$9;
           }
           $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
           $13_1 = $13_1 | 8 | 0;
           $1_1 = 120;
          }
          i64toi32_i32$2 = $7_1;
          i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
          $12_1 = $187(i64toi32_i32$3 | 0, i64toi32_i32$5 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
          $20_1 = 0;
          $16_1 = 9018;
          if (!($13_1 & 8 | 0)) {
           break label$9
          }
          i64toi32_i32$2 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
          if (!(i64toi32_i32$5 | i64toi32_i32$3 | 0)) {
           break label$9
          }
          $16_1 = ($1_1 >>> 4 | 0) + 9018 | 0;
          $20_1 = 2;
          break label$9;
         }
         $1_1 = 0;
         $13_1 = $15_1 & 255 | 0;
         if ($13_1 >>> 0 > 7 >>> 0) {
          continue label$4
         }
         label$63 : {
          switch ($13_1 | 0) {
          default:
           HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
           continue label$4;
          case 1:
           HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
           continue label$4;
          case 2:
           i64toi32_i32$5 = $11_1;
           i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           HEAP32[i64toi32_i32$5 >> 2] = $11_1;
           HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
           continue label$4;
          case 3:
           HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
           continue label$4;
          case 4:
           HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
           continue label$4;
          case 6:
           HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
           continue label$4;
          case 5:
           continue label$4;
          case 7:
           break label$63;
          };
         }
         i64toi32_i32$5 = $11_1;
         i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
         HEAP32[i64toi32_i32$5 >> 2] = $11_1;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
         continue label$4;
        }
        $20_1 = 0;
        $16_1 = 9018;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
        $24_1 = i64toi32_i32$3;
        $24$hi = i64toi32_i32$5;
       }
       i64toi32_i32$5 = $24$hi;
       $12_1 = $188($24_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
      }
      $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
      $24_1 = i64toi32_i32$5;
      $24$hi = i64toi32_i32$3;
      label$70 : {
       label$71 : {
        if ($19_1) {
         break label$71
        }
        i64toi32_i32$3 = $24$hi;
        if (!!($24_1 | i64toi32_i32$3 | 0)) {
         break label$71
        }
        $19_1 = 0;
        $12_1 = $9_1;
        break label$70;
       }
       i64toi32_i32$3 = $24$hi;
       $1_1 = ($9_1 - $12_1 | 0) + !($24_1 | i64toi32_i32$3 | 0) | 0;
       $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
      }
      $14_1 = $9_1;
     }
     $15_1 = $14_1 - $12_1 | 0;
     $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
     $14_1 = $20_1 + $17_1 | 0;
     $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
     $185($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
     $182($0_1 | 0, $16_1 | 0, $20_1 | 0);
     $185($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
     $185($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
     $182($0_1 | 0, $12_1 | 0, $15_1 | 0);
     $185($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
     continue label$4;
    }
    break label$4;
   };
   $20_1 = 0;
  }
  label$72 : {
   $23_1 = $7_1 + 80 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $23_1;
  }
  return $20_1 | 0;
 }
 
 function $182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $168($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $183($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($174(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($174(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $184($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $26_1 = 0, $34_1 = 0, $44_1 = 0, $52_1 = 0, $60_1 = 0, $68_1 = 0, $76_1 = 0, $86_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   $1_1 = $1_1 + -9 | 0;
   if ($1_1 >>> 0 > 9 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 | 0) {
    default:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $26_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $26_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $34_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $44_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $44_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $52_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $52_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $60_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $60_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $68_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $68_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $76_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $76_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $86_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $86_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 9:
     break label$2;
    };
   }
   FUNCTION_TABLE[$3_1]($0_1, $2_1);
  }
 }
 
 function $185($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $5_1 = global$0 - 256 | 0;
   $7_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $7_1;
  }
  label$3 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$3
   }
   if ($4_1 & 73728 | 0) {
    break label$3
   }
   $4_1 = $2_1 - $3_1 | 0;
   $6_1 = $4_1 >>> 0 < 256 >>> 0;
   $405($5_1 | 0, $1_1 | 0, ($6_1 ? $4_1 : 256) | 0) | 0;
   label$4 : {
    if ($6_1) {
     break label$4
    }
    $2_1 = $2_1 - $3_1 | 0;
    label$5 : while (1) {
     $182($0_1 | 0, $5_1 | 0, 256 | 0);
     $4_1 = $4_1 + -256 | 0;
     if ($4_1 >>> 0 > 255 >>> 0) {
      continue label$5
     }
     break label$5;
    };
    $4_1 = $2_1 & 255 | 0;
   }
   $182($0_1 | 0, $5_1 | 0, $4_1 | 0);
  }
  label$6 : {
   $8_1 = $5_1 + 256 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $8_1;
  }
 }
 
 function $186($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $187($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 9504 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $188($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $189($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $180($0_1 | 0, $1_1 | 0, $2_1 | 0, 70 | 0, 71 | 0) | 0 | 0;
 }
 
 function $190($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $14_1 = 0, $17_1 = 0, $16_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $20_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $15_1 = 0, $21_1 = 0, $11_1 = 0, $12_1 = 0, $18_1 = 0, $26_1 = 0.0, $7_1 = 0, $24_1 = 0, $19_1 = 0, $24$hi = 0, $8_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $23_1 = 0, $22_1 = 0, $25_1 = 0, $163_1 = 0, $165$hi = 0, $167$hi = 0, $169_1 = 0, $169$hi = 0, $171$hi = 0, $175_1 = 0, $175$hi = 0, $812 = 0;
  label$1 : {
   $6_1 = global$0 - 560 | 0;
   $22_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $22_1;
  }
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $192(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$4
    }
    $1_1 = -$1_1;
    i64toi32_i32$2 = $192(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    $7_1 = 1;
    $8_1 = 9520;
    break label$3;
   }
   label$5 : {
    if (!($4_1 & 2048 | 0)) {
     break label$5
    }
    $7_1 = 1;
    $8_1 = 9523;
    break label$3;
   }
   $7_1 = $4_1 & 1 | 0;
   $8_1 = $7_1 ? 9526 : 9521;
  }
  label$6 : {
   label$7 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$7
    }
    $9_1 = $7_1 + 3 | 0;
    $185($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 & -65537 | 0 | 0);
    $182($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $10_1 = ($5_1 >>> 5 | 0) & 1 | 0;
    $182($0_1 | 0, ($1_1 != $1_1 ? ($10_1 ? 9547 : 9551) : $10_1 ? 9539 : 9543) | 0, 3 | 0);
    $185($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$6;
   }
   $11_1 = $6_1 + 16 | 0;
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       $1_1 = +$179(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$11
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $12_1 = $5_1 | 32 | 0;
       if (($12_1 | 0) != (97 | 0)) {
        break label$10
       }
       break label$8;
      }
      $12_1 = $5_1 | 32 | 0;
      if (($12_1 | 0) == (97 | 0)) {
       break label$8
      }
      $13_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $14_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$9;
     }
     $14_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $14_1;
     $13_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $15_1 = ($14_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $16_1 = $15_1;
    label$12 : while (1) {
     label$13 : {
      label$14 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$14
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$13;
      }
      $10_1 = 0;
     }
     HEAP32[$16_1 >> 2] = $10_1;
     $16_1 = $16_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$12
     }
     break label$12;
    };
    label$15 : {
     label$16 : {
      if (($14_1 | 0) >= (1 | 0)) {
       break label$16
      }
      $10_1 = $16_1;
      $17_1 = $15_1;
      break label$15;
     }
     $17_1 = $15_1;
     label$17 : while (1) {
      $14_1 = ($14_1 | 0) < (29 | 0) ? $14_1 : 29;
      label$18 : {
       $10_1 = $16_1 + -4 | 0;
       if ($10_1 >>> 0 < $17_1 >>> 0) {
        break label$18
       }
       i64toi32_i32$1 = 0;
       $25_1 = $14_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$19 : while (1) {
        $163_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $165$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $165$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $167$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $169_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $169$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $167$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $169$hi;
        i64toi32_i32$3 = $169_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $171$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $175_1 = i64toi32_i32$1;
        $175$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $171$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $175$hi;
        i64toi32_i32$3 = $175_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$163_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $17_1 >>> 0) {
         continue label$19
        }
        break label$19;
       };
       i64toi32_i32$4 = $24$hi;
       $10_1 = $24_1;
       if (!$10_1) {
        break label$18
       }
       $17_1 = $17_1 + -4 | 0;
       HEAP32[$17_1 >> 2] = $10_1;
      }
      label$20 : {
       label$21 : while (1) {
        $10_1 = $16_1;
        if ($10_1 >>> 0 <= $17_1 >>> 0) {
         break label$20
        }
        $16_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$16_1 >> 2] | 0)) {
         continue label$21
        }
        break label$21;
       };
      }
      $14_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $14_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $14_1;
      $16_1 = $10_1;
      if (($14_1 | 0) > (0 | 0)) {
       continue label$17
      }
      break label$17;
     };
    }
    label$22 : {
     if (($14_1 | 0) > (-1 | 0)) {
      break label$22
     }
     $18_1 = (($13_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $19_1 = ($12_1 | 0) == (102 | 0);
     label$23 : while (1) {
      $9_1 = ($14_1 | 0) < (-9 | 0) ? 9 : 0 - $14_1 | 0;
      label$24 : {
       label$25 : {
        if ($17_1 >>> 0 < $10_1 >>> 0) {
         break label$25
        }
        $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
        break label$24;
       }
       $20_1 = 1e9 >>> $9_1 | 0;
       $21_1 = (-1 << $9_1 | 0) ^ -1 | 0;
       $14_1 = 0;
       $16_1 = $17_1;
       label$26 : while (1) {
        $3_1 = HEAP32[$16_1 >> 2] | 0;
        HEAP32[$16_1 >> 2] = ($3_1 >>> $9_1 | 0) + $14_1 | 0;
        $14_1 = Math_imul($3_1 & $21_1 | 0, $20_1);
        $16_1 = $16_1 + 4 | 0;
        if ($16_1 >>> 0 < $10_1 >>> 0) {
         continue label$26
        }
        break label$26;
       };
       $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
       if (!$14_1) {
        break label$24
       }
       HEAP32[$10_1 >> 2] = $14_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $14_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $9_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $14_1;
      $16_1 = $19_1 ? $15_1 : $17_1;
      $10_1 = (($10_1 - $16_1 | 0) >> 2 | 0 | 0) > ($18_1 | 0) ? $16_1 + ($18_1 << 2 | 0) | 0 : $10_1;
      if (($14_1 | 0) < (0 | 0)) {
       continue label$23
      }
      break label$23;
     };
    }
    $16_1 = 0;
    label$27 : {
     if ($17_1 >>> 0 >= $10_1 >>> 0) {
      break label$27
     }
     $16_1 = Math_imul(($15_1 - $17_1 | 0) >> 2 | 0, 9);
     $14_1 = 10;
     $3_1 = HEAP32[$17_1 >> 2] | 0;
     if ($3_1 >>> 0 < 10 >>> 0) {
      break label$27
     }
     label$28 : while (1) {
      $16_1 = $16_1 + 1 | 0;
      $14_1 = Math_imul($14_1, 10);
      if ($3_1 >>> 0 >= $14_1 >>> 0) {
       continue label$28
      }
      break label$28;
     };
    }
    label$29 : {
     $14_1 = ($13_1 - (($12_1 | 0) == (102 | 0) ? 0 : $16_1) | 0) - (($13_1 | 0) != (0 | 0) & ($12_1 | 0) == (103 | 0) | 0) | 0;
     if (($14_1 | 0) >= (Math_imul(($10_1 - $15_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$29
     }
     $14_1 = $14_1 + 9216 | 0;
     $9_1 = ($14_1 | 0) / (9 | 0) | 0;
     $20_1 = (($9_1 << 2 | 0) + $15_1 | 0) + -4092 | 0;
     $3_1 = 10;
     label$30 : {
      $14_1 = $14_1 - Math_imul($9_1, 9) | 0;
      if (($14_1 | 0) > (7 | 0)) {
       break label$30
      }
      label$31 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $9_1 = ($14_1 | 0) < (7 | 0);
       $14_1 = $14_1 + 1 | 0;
       if ($9_1) {
        continue label$31
       }
       break label$31;
      };
     }
     $9_1 = HEAP32[$20_1 >> 2] | 0;
     $21_1 = ($9_1 >>> 0) / ($3_1 >>> 0) | 0;
     $14_1 = $9_1 - Math_imul($21_1, $3_1) | 0;
     label$32 : {
      label$33 : {
       $18_1 = $20_1 + 4 | 0;
       if (($18_1 | 0) != ($10_1 | 0)) {
        break label$33
       }
       if (!$14_1) {
        break label$32
       }
      }
      $19_1 = $3_1 >>> 1 | 0;
      $26_1 = $14_1 >>> 0 < $19_1 >>> 0 ? .5 : ($18_1 | 0) == ($10_1 | 0) ? (($14_1 | 0) == ($19_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $21_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$34 : {
       if (!$7_1) {
        break label$34
       }
       if ((HEAPU8[$8_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $14_1 = $9_1 - $14_1 | 0;
      HEAP32[$20_1 >> 2] = $14_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$32
      }
      $16_1 = $14_1 + $3_1 | 0;
      HEAP32[$20_1 >> 2] = $16_1;
      label$35 : {
       if ($16_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$20_1 >> 2] = 0;
        label$37 : {
         $20_1 = $20_1 + -4 | 0;
         if ($20_1 >>> 0 >= $17_1 >>> 0) {
          break label$37
         }
         $17_1 = $17_1 + -4 | 0;
         HEAP32[$17_1 >> 2] = 0;
        }
        $16_1 = (HEAP32[$20_1 >> 2] | 0) + 1 | 0;
        HEAP32[$20_1 >> 2] = $16_1;
        if ($16_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $16_1 = Math_imul(($15_1 - $17_1 | 0) >> 2 | 0, 9);
      $14_1 = 10;
      $3_1 = HEAP32[$17_1 >> 2] | 0;
      if ($3_1 >>> 0 < 10 >>> 0) {
       break label$32
      }
      label$38 : while (1) {
       $16_1 = $16_1 + 1 | 0;
       $14_1 = Math_imul($14_1, 10);
       if ($3_1 >>> 0 >= $14_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $14_1 = $20_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $14_1 >>> 0 ? $14_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      label$41 : {
       $14_1 = $10_1;
       if ($10_1 >>> 0 > $17_1 >>> 0) {
        break label$41
       }
       $19_1 = 0;
       break label$39;
      }
      $10_1 = $14_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
     $19_1 = 1;
    }
    label$42 : {
     label$43 : {
      if (($12_1 | 0) == (103 | 0)) {
       break label$43
      }
      $21_1 = $4_1 & 8 | 0;
      break label$42;
     }
     $10_1 = $13_1 ? $13_1 : 1;
     $3_1 = ($10_1 | 0) > ($16_1 | 0) & ($16_1 | 0) > (-5 | 0) | 0;
     $13_1 = ($3_1 ? $16_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($3_1 ? -1 : -2) + $5_1 | 0;
     $21_1 = $4_1 & 8 | 0;
     if ($21_1) {
      break label$42
     }
     $10_1 = 9;
     label$44 : {
      if (!$19_1) {
       break label$44
      }
      $10_1 = 9;
      $9_1 = HEAP32[($14_1 + -4 | 0) >> 2] | 0;
      if (!$9_1) {
       break label$44
      }
      $3_1 = 10;
      $10_1 = 0;
      if (($9_1 >>> 0) % (10 >>> 0) | 0) {
       break label$44
      }
      label$45 : while (1) {
       $10_1 = $10_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if (!(($9_1 >>> 0) % ($3_1 >>> 0) | 0)) {
        continue label$45
       }
       break label$45;
      };
     }
     $3_1 = Math_imul(($14_1 - $15_1 | 0) >> 2 | 0, 9) + -9 | 0;
     label$46 : {
      if (($5_1 | 32 | 0 | 0) != (102 | 0)) {
       break label$46
      }
      $21_1 = 0;
      $10_1 = $3_1 - $10_1 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $13_1 = ($13_1 | 0) < ($10_1 | 0) ? $13_1 : $10_1;
      break label$42;
     }
     $21_1 = 0;
     $10_1 = ($3_1 + $16_1 | 0) - $10_1 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $13_1 = ($13_1 | 0) < ($10_1 | 0) ? $13_1 : $10_1;
    }
    $12_1 = $13_1 | $21_1 | 0;
    $3_1 = ($12_1 | 0) != (0 | 0);
    label$47 : {
     label$48 : {
      $20_1 = $5_1 | 32 | 0;
      if (($20_1 | 0) != (102 | 0)) {
       break label$48
      }
      $10_1 = ($16_1 | 0) > (0 | 0) ? $16_1 : 0;
      break label$47;
     }
     label$49 : {
      $10_1 = $16_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10_1 = $188(($16_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$4 | 0, $11_1 | 0) | 0;
      if (($11_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$49
      }
      label$50 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($11_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$50
       }
       break label$50;
      };
     }
     $18_1 = $10_1 + -2 | 0;
     HEAP8[$18_1 >> 0] = $5_1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($16_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $11_1 - $18_1 | 0;
    }
    $9_1 = ((($7_1 + $13_1 | 0) + $3_1 | 0) + $10_1 | 0) + 1 | 0;
    $185($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
    $182($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $185($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$51 : {
     label$52 : {
      label$53 : {
       label$54 : {
        if (($20_1 | 0) != (102 | 0)) {
         break label$54
        }
        $20_1 = $6_1 + 16 | 0 | 8 | 0;
        $16_1 = $6_1 + 16 | 0 | 9 | 0;
        $3_1 = $17_1 >>> 0 > $15_1 >>> 0 ? $15_1 : $17_1;
        $17_1 = $3_1;
        label$55 : while (1) {
         i64toi32_i32$5 = $17_1;
         i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $10_1 = $188(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $16_1 | 0) | 0;
         label$56 : {
          label$57 : {
           if (($17_1 | 0) == ($3_1 | 0)) {
            break label$57
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$56
           }
           label$58 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$58
            }
            break label$56;
           };
          }
          if (($10_1 | 0) != ($16_1 | 0)) {
           break label$56
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $20_1;
         }
         $182($0_1 | 0, $10_1 | 0, $16_1 - $10_1 | 0 | 0);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 <= $15_1 >>> 0) {
          continue label$55
         }
         break label$55;
        };
        label$59 : {
         if (!$12_1) {
          break label$59
         }
         $182($0_1 | 0, 9555 | 0, 1 | 0);
        }
        if ($17_1 >>> 0 >= $14_1 >>> 0) {
         break label$53
        }
        if (($13_1 | 0) < (1 | 0)) {
         break label$53
        }
        label$60 : while (1) {
         label$61 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$0 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $188(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $16_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$61
          }
          label$62 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$62
           }
           break label$62;
          };
         }
         $182($0_1 | 0, $10_1 | 0, (($13_1 | 0) < (9 | 0) ? $13_1 : 9) | 0);
         $10_1 = $13_1 + -9 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $14_1 >>> 0) {
          break label$52
         }
         $3_1 = ($13_1 | 0) > (9 | 0);
         $13_1 = $10_1;
         if ($3_1) {
          continue label$60
         }
         break label$52;
        };
       }
       label$63 : {
        if (($13_1 | 0) < (0 | 0)) {
         break label$63
        }
        $20_1 = $19_1 ? $14_1 : $17_1 + 4 | 0;
        $15_1 = $6_1 + 16 | 0 | 8 | 0;
        $14_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $17_1;
        label$64 : while (1) {
         label$65 : {
          i64toi32_i32$5 = $16_1;
          i64toi32_i32$4 = HEAP32[$16_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $10_1 = $188(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $14_1 | 0) | 0;
          if (($10_1 | 0) != ($14_1 | 0)) {
           break label$65
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $15_1;
         }
         label$66 : {
          label$67 : {
           if (($16_1 | 0) == ($17_1 | 0)) {
            break label$67
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$66
           }
           label$68 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$68
            }
            break label$66;
           };
          }
          $182($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          label$69 : {
           if ($21_1) {
            break label$69
           }
           if (($13_1 | 0) < (1 | 0)) {
            break label$66
           }
          }
          $182($0_1 | 0, 9555 | 0, 1 | 0);
         }
         $3_1 = $14_1 - $10_1 | 0;
         $182($0_1 | 0, $10_1 | 0, (($13_1 | 0) > ($3_1 | 0) ? $3_1 : $13_1) | 0);
         $13_1 = $13_1 - $3_1 | 0;
         $16_1 = $16_1 + 4 | 0;
         if ($16_1 >>> 0 >= $20_1 >>> 0) {
          break label$63
         }
         if (($13_1 | 0) > (-1 | 0)) {
          continue label$64
         }
         break label$64;
        };
       }
       $185($0_1 | 0, 48 | 0, $13_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $182($0_1 | 0, $18_1 | 0, $11_1 - $18_1 | 0 | 0);
       break label$51;
      }
      $10_1 = $13_1;
     }
     $185($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $185($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$6;
   }
   $16_1 = $5_1 & 32 | 0;
   $13_1 = $16_1 ? $8_1 + 9 | 0 : $8_1;
   label$70 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$70
    }
    $10_1 = 12 - $3_1 | 0;
    if (!$10_1) {
     break label$70
    }
    $26_1 = 8.0;
    label$71 : while (1) {
     $26_1 = $26_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$71
     }
     break label$71;
    };
    label$72 : {
     if ((HEAPU8[$13_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$72
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$70;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$73 : {
    $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $812 = $10_1;
    $10_1 = $10_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $10_1 = $188(($812 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$0 | 0, $11_1 | 0) | 0;
    if (($10_1 | 0) != ($11_1 | 0)) {
     break label$73
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $10_1 = $6_1 + 15 | 0;
   }
   $21_1 = $7_1 | 2 | 0;
   $17_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $20_1 = $10_1 + -2 | 0;
   HEAP8[$20_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
   $14_1 = $4_1 & 8 | 0;
   $17_1 = $6_1 + 16 | 0;
   label$74 : while (1) {
    $10_1 = $17_1;
    label$75 : {
     label$76 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$76
      }
      $17_1 = ~~$1_1;
      break label$75;
     }
     $17_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($17_1 + 9504 | 0) >> 0] | 0 | $16_1 | 0;
    $1_1 = ($1_1 - +($17_1 | 0)) * 16.0;
    label$77 : {
     $17_1 = $10_1 + 1 | 0;
     if (($17_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$77
     }
     label$78 : {
      if ($14_1) {
       break label$78
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$78
      }
      if ($1_1 == 0.0) {
       break label$77
      }
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $17_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$74
    }
    break label$74;
   };
   label$79 : {
    label$80 : {
     if (!$3_1) {
      break label$80
     }
     if ((($17_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$80
     }
     $10_1 = (($3_1 + $11_1 | 0) - $20_1 | 0) + 2 | 0;
     break label$79;
    }
    $10_1 = (($11_1 - ($6_1 + 16 | 0) | 0) - $20_1 | 0) + $17_1 | 0;
   }
   $9_1 = $10_1 + $21_1 | 0;
   $185($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
   $182($0_1 | 0, $13_1 | 0, $21_1 | 0);
   $185($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $17_1 = $17_1 - ($6_1 + 16 | 0) | 0;
   $182($0_1 | 0, $6_1 + 16 | 0 | 0, $17_1 | 0);
   $16_1 = $11_1 - $20_1 | 0;
   $185($0_1 | 0, 48 | 0, $10_1 - ($17_1 + $16_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $182($0_1 | 0, $20_1 | 0, $16_1 | 0);
   $185($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  label$81 : {
   $23_1 = $6_1 + 560 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $23_1;
  }
  return (($9_1 | 0) < ($2_1 | 0) ? $2_1 : $9_1) | 0;
 }
 
 function $191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$233($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $192($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $193() {
  fimport$1(85952 | 0);
  return 85960 | 0;
 }
 
 function $194() {
  fimport$2(85952 | 0);
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $4_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $189($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  label$3 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 9712 | 0) >> 2] | 0;
   if ((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $166($2_1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    if (($201($0_1 | 0, $2_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$3
    }
    $0_1 = -1;
    break label$2;
   }
   label$4 : {
    if ((HEAPU8[($2_1 + 75 | 0) >> 0] | 0 | 0) == (10 | 0)) {
     break label$4
    }
    $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if ($0_1 >>> 0 >= (HEAP32[($2_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$4
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = 10;
    $0_1 = 0;
    break label$2;
   }
   $0_1 = ($224($2_1 | 0, 10 | 0) | 0) >> 31 | 0;
  }
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   $167($2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $1_1 = 0, $28_1 = 0, $28$hi = 0, $29$hi = 0, $35_1 = 0, $35$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 ? 2 : 1;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   if ($16_1) {
    break label$2
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $28_1 = i64toi32_i32$1;
   $28$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $28$hi;
   i64toi32_i32$0 = $28_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $29$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $29$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$0 = $35_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
  return i64toi32_i32$2 | 0;
 }
 
 function $199($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $198($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $166($0_1 | 0) | 0;
  i64toi32_i32$0 = $198($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $167($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $200($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $1_1 = 0, $1$hi = 0, i64toi32_i32$3 = 0;
  label$1 : {
   i64toi32_i32$0 = $199($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$1
   }
   HEAP32[($164() | 0) >> 2] = 61;
   return -1 | 0;
  }
  i64toi32_i32$2 = $1$hi;
  return $1_1 | 0;
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $147($0_1 | 0) | 0;
  return (($2_1 | 0) != ($169($0_1 | 0, 1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) ? -1 : 0) | 0;
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $203($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $166($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAPU8[($3_1 + 74 | 0) >> 0] | 0;
  HEAP8[($3_1 + 74 | 0) >> 0] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
    if (($6_1 | 0) >= (1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $8_1 = $6_1 >>> 0 < $5_1 >>> 0 ? $6_1 : $5_1;
   $404($0_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $8_1 | 0;
   $6_1 = $5_1 - $8_1 | 0;
   $0_1 = $0_1 + $8_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($202($3_1 | 0) | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0]($3_1, $0_1, $6_1) | 0;
      if (($8_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $167($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $8_1 | 0;
    $6_1 = $6_1 - $8_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $167($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $204($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $11_1 = 0, $11$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $205($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $204($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $166($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $204($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $167($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $206($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  return $205($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($139($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $139($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $139($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $208($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($164() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if ($139(9557 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$5
     }
     HEAP32[($164() | 0) >> 2] = 28;
     break label$4;
    }
    $3_1 = $207($1_1 | 0) | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = 438;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 | 32768 | 0;
    $0_1 = 0;
    $3_1 = $208(fimport$3(5 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($3_1 | 0) < (0 | 0)) {
     break label$3
    }
    $0_1 = $222($3_1 | 0, $1_1 | 0) | 0;
    if ($0_1) {
     break label$3
    }
    fimport$4($3_1 | 0) | 0;
   }
   $0_1 = 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  return $0_1 | 0;
 }
 
 function $210($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 160 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $6_1;
  }
  $404($4_1 + 8 | 0 | 0, 9568 | 0, 144 | 0) | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$5
     }
     if ($1_1) {
      break label$4
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $189($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$3;
   }
   HEAP32[($164() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  label$6 : {
   $7_1 = $4_1 + 160 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $211($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $404($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $212($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $210($0_1 | 0, 2147483647 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $213($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $4_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $212($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  label$3 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $215($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $166($0_1 | 0) | 0;
  }
  $214($0_1 | 0);
  label$2 : {
   $2_1 = (HEAP32[$0_1 >> 2] | 0) & 1 | 0;
   if ($2_1) {
    break label$2
   }
   $3_1 = $193() | 0;
   label$3 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$5 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   $194();
  }
  $3_1 = $225($0_1 | 0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0]($0_1) | 0;
  label$6 : {
   $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$6
   }
   $399($5_1 | 0);
  }
  $3_1 = $4_1 | $3_1 | 0;
  label$7 : {
   if ($2_1) {
    break label$7
   }
   $399($0_1 | 0);
   return $3_1 | 0;
  }
  label$8 : {
   if (!$1_1) {
    break label$8
   }
   $167($0_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $217($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $218($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $1$hi;
    if ($229($424(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = -1;
   $1_1 = -1;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = -1;
   HEAP32[($3_1 + 8 | 0) >> 2] = -1;
   HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
  label$5 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $219($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!($229(fimport$7(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
       break label$6
      }
      $2_1 = -1;
      HEAP32[($3_1 + 12 | 0) >> 2] = -1;
      break label$5;
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$4
     }
     $2_1 = $4_1;
    }
    HEAP32[$0_1 >> 2] = ($2_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$3;
   }
   label$7 : {
    $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    if ($4_1 >>> 0 > $6_1 >>> 0) {
     break label$7
    }
    $2_1 = $4_1;
    break label$3;
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
    break label$3
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
   HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
  }
  label$8 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $8_1;
  }
  return $2_1 | 0;
 }
 
 function $220($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$4($220(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($139(9716 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$6
      }
      HEAP32[($164() | 0) >> 2] = 28;
      break label$5;
     }
     $3_1 = $398(1176 | 0) | 0;
     if ($3_1) {
      break label$4
     }
    }
    $3_1 = 0;
    break label$3;
   }
   $405($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$7 : {
    if ($139($1_1 | 0, 43 | 0) | 0) {
     break label$7
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$8 : {
    label$9 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$9
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$8;
    }
    HEAP32[($2_1 + 36 | 0) >> 2] = 3;
    HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
    label$10 : {
     $1_1 = fimport$5(221 | 0, $2_1 + 32 | 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$10
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = 4;
     HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $1_1 | 1024 | 0;
     fimport$5(221 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP8[($3_1 + 75 | 0) >> 0] = 255;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$11 : {
    if ($1_1 & 8 | 0) {
     break label$11
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = 21523;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $2_1 + 40 | 0;
    if (fimport$6(54 | 0, $2_1 | 0) | 0) {
     break label$11
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 76;
   HEAP32[($3_1 + 36 | 0) >> 2] = 74;
   HEAP32[($3_1 + 32 | 0) >> 2] = 77;
   HEAP32[($3_1 + 12 | 0) >> 2] = 78;
   label$12 : {
    if (HEAP32[(0 + 85892 | 0) >> 2] | 0) {
     break label$12
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $228($3_1 | 0) | 0;
  }
  label$13 : {
   $5_1 = $2_1 + 48 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $223($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = $1_1 + $2_1 | 0;
  $6_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($229(fimport$8(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$6
      }
      label$7 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$5
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$4
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $8_1 = $4_1 >>> 0 > $7_1 >>> 0;
       $1_1 = $8_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $4_1 - ($8_1 ? $7_1 : 0) | 0;
       HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + $7_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
       $5_1 = $5_1 - $4_1 | 0;
       $6_1 = $6_1 - $8_1 | 0;
       if (!($229(fimport$8(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = -1;
     if (($5_1 | 0) != (-1 | 0)) {
      break label$4
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$3;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($6_1 | 0) == (2 | 0)) {
    break label$3
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  label$8 : {
   $10_1 = $3_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return $4_1 | 0;
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$4
    }
    $3_1 = -1;
    if ($195($0_1 | 0) | 0) {
     break label$3
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   label$5 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if ($4_1 >>> 0 >= $3_1 >>> 0) {
     break label$5
    }
    $3_1 = $1_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP8[($0_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break label$3;
   }
   $3_1 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  label$6 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $226($0_1 | 0) | 0 | 0;
    }
    $1_1 = $166($0_1 | 0) | 0;
    $2_1 = $226($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $167($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 69280 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $225(HEAP32[(0 + 69280 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($193() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $166($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $226($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $167($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $194();
  }
  return $2_1 | 0;
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $3_1;
  }
  $2_1 = -1;
  label$3 : {
   if ($202($0_1 | 0) | 0) {
    break label$3
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  label$4 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $193() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $194();
  return $0_1 | 0;
 }
 
 function $229($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($164() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $230($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $231($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $232($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $233($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7$hi = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $44_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $51_1 = 0, $52_1 = 0, $5_1 = 0, $4_1 = 0, $18_1 = 0, $18$hi = 0, $20$hi = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $43_1 = 0, $45_1 = 0, $50_1 = 0, $50$hi = 0, $52$hi = 0, $80_1 = 0, $80$hi = 0, $84$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $89$hi = 0, $93_1 = 0, $93$hi = 0, $95_1 = 0, $96$hi = 0, $106$hi = 0, $117_1 = 0, $117$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $6_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $23_1 = $44_1;
    $23$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $46_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $25$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $23_1;
    i64toi32_i32$5 = $25$hi;
    i64toi32_i32$1 = $46_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $6_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $6$hi = i64toi32_i32$5;
    label$5 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$5
     }
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7_1 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$2;
     break label$3;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $39$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $39$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$4;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$4 = $0$hi;
    $43_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $45_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $43_1 : $45_1) {
     break label$6
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $47_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $47_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $50_1 = $47_1;
    $50$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $48_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $48_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $52$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $50$hi;
    i64toi32_i32$5 = $50_1;
    i64toi32_i32$2 = $52$hi;
    i64toi32_i32$4 = $48_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $7$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = 2146435072;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$5 = $6_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$5 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $49_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$3
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $6_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $6$hi;
   $231($2_1 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0, i64toi32_i32$0 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   $232($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$5 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $51_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $51_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $80_1 = $51_1;
   $80$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $52_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $52_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $84$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $80$hi;
   i64toi32_i32$4 = $80_1;
   i64toi32_i32$0 = $84$hi;
   i64toi32_i32$2 = $52_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$0;
   label$7 : {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $87_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $89_1 = i64toi32_i32$4;
    $89$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $93_1 = i64toi32_i32$5;
    $93$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $89$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = $93$hi;
    i64toi32_i32$2 = $93_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $95_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $96$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = $96$hi;
    i64toi32_i32$0 = $95_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $6_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$7
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$3;
    $7$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $106$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $106$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  label$8 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $117_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $117$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = $117$hi;
  i64toi32_i32$4 = $117_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = ($147($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $398($1_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $404($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $234($236(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $237() {
  var $18_1 = 0;
  $18_1 = 4;
  fimport$9($238() | 0 | 0, 9720 | 0);
  fimport$10($239() | 0 | 0, 9725 | 0, 1 | 0, 1 & 1 | 0 | 0, 0 & 1 | 0 | 0);
  $240(9730 | 0);
  $241(9735 | 0);
  $242(9747 | 0);
  $243(9761 | 0);
  $244(9767 | 0);
  $245(9782 | 0);
  $246(9786 | 0);
  $247(9799 | 0);
  $248(9804 | 0);
  $249(9818 | 0);
  $250(9824 | 0);
  fimport$11($251() | 0 | 0, 9831 | 0);
  fimport$11($252() | 0 | 0, 9843 | 0);
  fimport$12($253() | 0 | 0, $18_1 | 0, 9876 | 0);
  fimport$12($254() | 0 | 0, 2 | 0, 9889 | 0);
  fimport$12($255() | 0 | 0, $18_1 | 0, 9904 | 0);
  fimport$13($256() | 0 | 0, 9919 | 0);
  $257(9935 | 0);
  $258(9965 | 0);
  $259(10002 | 0);
  $260(10041 | 0);
  $261(10072 | 0);
  $262(10112 | 0);
  $263(10141 | 0);
  $264(10179 | 0);
  $265(10209 | 0);
  $258(10248 | 0);
  $259(10280 | 0);
  $260(10313 | 0);
  $261(10346 | 0);
  $262(10380 | 0);
  $263(10413 | 0);
  $266(10447 | 0);
  $267(10478 | 0);
  return;
 }
 
 function $238() {
  return $268() | 0 | 0;
 }
 
 function $239() {
  return $269() | 0 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $12_1 = 0, $18_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $17_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = 24;
  $12_1 = 24;
  fimport$14($270() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($271() | 0) << $8_1 | 0) >> $8_1 | 0 | 0, (($272() | 0) << $12_1 | 0) >> $12_1 | 0 | 0);
  label$3 : {
   $18_1 = $3_1 + 16 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $18_1;
  }
  return;
 }
 
 function $241($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $12_1 = 0, $18_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $17_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = 24;
  $12_1 = 24;
  fimport$14($273() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, (($274() | 0) << $8_1 | 0) >> $8_1 | 0 | 0, (($275() | 0) << $12_1 | 0) >> $12_1 | 0 | 0);
  label$3 : {
   $18_1 = $3_1 + 16 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $18_1;
  }
  return;
 }
 
 function $242($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $15_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($276() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, ($277() | 0) & 255 | 0 | 0, ($278() | 0) & 255 | 0 | 0);
  label$3 : {
   $16_1 = $3_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $16_1;
  }
  return;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $12_1 = 0, $18_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $17_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $17_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $8_1 = 16;
  $12_1 = 16;
  fimport$14($279() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, (($280() | 0) << $8_1 | 0) >> $8_1 | 0 | 0, (($281() | 0) << $12_1 | 0) >> $12_1 | 0 | 0);
  label$3 : {
   $18_1 = $3_1 + 16 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $18_1;
  }
  return;
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $15_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($282() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 2 | 0, ($283() | 0) & 65535 | 0 | 0, ($284() | 0) & 65535 | 0 | 0);
  label$3 : {
   $16_1 = $3_1 + 16 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $16_1;
  }
  return;
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($285() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $286() | 0 | 0, $287() | 0 | 0);
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $246($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($288() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $289() | 0 | 0, $290() | 0 | 0);
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $247($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($291() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $292() | 0 | 0, $293() | 0 | 0);
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $248($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $11_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$14($294() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0, $295() | 0 | 0, $296() | 0 | 0);
  label$3 : {
   $12_1 = $3_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  return;
 }
 
 function $249($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$15($297() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 4 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $250($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$15($298() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 8 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $251() {
  return $299() | 0 | 0;
 }
 
 function $252() {
  return $300() | 0 | 0;
 }
 
 function $253() {
  return $301() | 0 | 0;
 }
 
 function $254() {
  return $302() | 0 | 0;
 }
 
 function $255() {
  return $303() | 0 | 0;
 }
 
 function $256() {
  return $304() | 0 | 0;
 }
 
 function $257($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($305() | 0 | 0, $306() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $258($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($307() | 0 | 0, $308() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $259($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($309() | 0 | 0, $310() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($311() | 0 | 0, $312() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $261($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($313() | 0 | 0, $314() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($315() | 0 | 0, $316() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($317() | 0 | 0, $318() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $264($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($319() | 0 | 0, $320() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($321() | 0 | 0, $322() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($323() | 0 | 0, $324() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $9_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  fimport$16($325() | 0 | 0, $326() | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  label$3 : {
   $10_1 = $3_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $10_1;
  }
  return;
 }
 
 function $268() {
  return 11676 | 0;
 }
 
 function $269() {
  return 11688 | 0;
 }
 
 function $270() {
  return $329() | 0 | 0;
 }
 
 function $271() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($330() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $272() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($331() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $273() {
  return $332() | 0 | 0;
 }
 
 function $274() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($333() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $275() {
  var $1_1 = 0;
  $1_1 = 24;
  return (($334() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $276() {
  return $335() | 0 | 0;
 }
 
 function $277() {
  return ($336() | 0) & 255 | 0 | 0;
 }
 
 function $278() {
  return ($337() | 0) & 255 | 0 | 0;
 }
 
 function $279() {
  return $338() | 0 | 0;
 }
 
 function $280() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($339() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $281() {
  var $1_1 = 0;
  $1_1 = 16;
  return (($340() | 0) << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $282() {
  return $341() | 0 | 0;
 }
 
 function $283() {
  return ($342() | 0) & 65535 | 0 | 0;
 }
 
 function $284() {
  return ($343() | 0) & 65535 | 0 | 0;
 }
 
 function $285() {
  return $344() | 0 | 0;
 }
 
 function $286() {
  return $345() | 0 | 0;
 }
 
 function $287() {
  return $346() | 0 | 0;
 }
 
 function $288() {
  return $347() | 0 | 0;
 }
 
 function $289() {
  return $348() | 0 | 0;
 }
 
 function $290() {
  return $349() | 0 | 0;
 }
 
 function $291() {
  return $350() | 0 | 0;
 }
 
 function $292() {
  return $351() | 0 | 0;
 }
 
 function $293() {
  return $352() | 0 | 0;
 }
 
 function $294() {
  return $353() | 0 | 0;
 }
 
 function $295() {
  return $354() | 0 | 0;
 }
 
 function $296() {
  return $355() | 0 | 0;
 }
 
 function $297() {
  return $356() | 0 | 0;
 }
 
 function $298() {
  return $357() | 0 | 0;
 }
 
 function $299() {
  return 10620 | 0;
 }
 
 function $300() {
  return 10708 | 0;
 }
 
 function $301() {
  return 10796 | 0;
 }
 
 function $302() {
  return 10888 | 0;
 }
 
 function $303() {
  return 10980 | 0;
 }
 
 function $304() {
  return 11024 | 0;
 }
 
 function $305() {
  return $358() | 0 | 0;
 }
 
 function $306() {
  return 0 | 0;
 }
 
 function $307() {
  return $359() | 0 | 0;
 }
 
 function $308() {
  return 0 | 0;
 }
 
 function $309() {
  return $360() | 0 | 0;
 }
 
 function $310() {
  return 1 | 0;
 }
 
 function $311() {
  return $361() | 0 | 0;
 }
 
 function $312() {
  return 2 | 0;
 }
 
 function $313() {
  return $362() | 0 | 0;
 }
 
 function $314() {
  return 3 | 0;
 }
 
 function $315() {
  return $363() | 0 | 0;
 }
 
 function $316() {
  return 4 | 0;
 }
 
 function $317() {
  return $364() | 0 | 0;
 }
 
 function $318() {
  return 5 | 0;
 }
 
 function $319() {
  return $365() | 0 | 0;
 }
 
 function $320() {
  return 4 | 0;
 }
 
 function $321() {
  return $366() | 0 | 0;
 }
 
 function $322() {
  return 5 | 0;
 }
 
 function $323() {
  return $367() | 0 | 0;
 }
 
 function $324() {
  return 6 | 0;
 }
 
 function $325() {
  return $368() | 0 | 0;
 }
 
 function $326() {
  return 7 | 0;
 }
 
 function $327() {
  FUNCTION_TABLE[79](87e3) | 0;
  return;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  label$1 : {
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $237();
  label$3 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $329() {
  return 11700 | 0;
 }
 
 function $330() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $331() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $332() {
  return 11724 | 0;
 }
 
 function $333() {
  var $1_1 = 0;
  $1_1 = 24;
  return (128 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $334() {
  var $1_1 = 0;
  $1_1 = 24;
  return (127 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $335() {
  return 11712 | 0;
 }
 
 function $336() {
  return 0 & 255 | 0 | 0;
 }
 
 function $337() {
  return 255 & 255 | 0 | 0;
 }
 
 function $338() {
  return 11736 | 0;
 }
 
 function $339() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32768 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $340() {
  var $1_1 = 0;
  $1_1 = 16;
  return (32767 << $1_1 | 0) >> $1_1 | 0 | 0;
 }
 
 function $341() {
  return 11748 | 0;
 }
 
 function $342() {
  return 0 & 65535 | 0 | 0;
 }
 
 function $343() {
  return 65535 & 65535 | 0 | 0;
 }
 
 function $344() {
  return 11760 | 0;
 }
 
 function $345() {
  return -2147483648 | 0;
 }
 
 function $346() {
  return 2147483647 | 0;
 }
 
 function $347() {
  return 11772 | 0;
 }
 
 function $348() {
  return 0 | 0;
 }
 
 function $349() {
  return -1 | 0;
 }
 
 function $350() {
  return 11784 | 0;
 }
 
 function $351() {
  return -2147483648 | 0;
 }
 
 function $352() {
  return 2147483647 | 0;
 }
 
 function $353() {
  return 11796 | 0;
 }
 
 function $354() {
  return 0 | 0;
 }
 
 function $355() {
  return -1 | 0;
 }
 
 function $356() {
  return 11808 | 0;
 }
 
 function $357() {
  return 11820 | 0;
 }
 
 function $358() {
  return 11064 | 0;
 }
 
 function $359() {
  return 11104 | 0;
 }
 
 function $360() {
  return 11144 | 0;
 }
 
 function $361() {
  return 11184 | 0;
 }
 
 function $362() {
  return 11224 | 0;
 }
 
 function $363() {
  return 11264 | 0;
 }
 
 function $364() {
  return 11304 | 0;
 }
 
 function $365() {
  return 11344 | 0;
 }
 
 function $366() {
  return 11384 | 0;
 }
 
 function $367() {
  return 11424 | 0;
 }
 
 function $368() {
  return 11464 | 0;
 }
 
 function $369() {
  $327();
  return;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  $399($0_1 | 0);
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  $371($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  $372($0_1 | 0) | 0;
  $370($0_1 | 0);
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  $372($0_1 | 0) | 0;
  $370($0_1 | 0);
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  $372($0_1 | 0) | 0;
  $370($0_1 | 0);
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  $372($0_1 | 0) | 0;
  $370($0_1 | 0);
 }
 
 function $379($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $380($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return ($0_1 | 0) == ($1_1 | 0) | 0;
  }
  return !($142($236($0_1 | 0) | 0 | 0, $236($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $381($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $5_1;
  }
  $4_1 = 1;
  label$3 : {
   if ($380($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$3
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$3
   }
   $4_1 = 0;
   $1_1 = $382($1_1 | 0, 11532 | 0, 11580 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$3
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   $4_1 = 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   $405($3_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   $4_1 = 1;
  }
  label$4 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $382($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $7_1;
  }
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $405($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $6_1 | 0;
  label$3 : {
   label$4 : {
    if (!($380($5_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($5_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$3;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($5_1, $4_1 + 8 | 0, $0_1, 1, 0);
   $0_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
   if ($0_1 >>> 0 > 1 >>> 0) {
    break label$3
   }
   label$5 : {
    switch ($0_1 | 0) {
    default:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$3;
    case 1:
     break label$5;
    };
   }
   label$7 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$7
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$3
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$3
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$3
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  label$8 : {
   $8_1 = $4_1 + 64 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $8_1;
  }
  return $1_1 | 0;
 }
 
 function $383($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $384($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $383($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $385($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $383($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $386($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $387($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $383($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $386($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $386($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $388($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = 1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
    if (($4_1 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   label$3 : {
    if (($3_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    label$4 : {
     $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     if (($3_1 | 0) != (2 | 0)) {
      break label$4
     }
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     $3_1 = $4_1;
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $389($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $390($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $389($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($380($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $391($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $8_1 = $0_1 + 16 | 0;
   $392($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   if (($5_1 | 0) < (2 | 0)) {
    break label$2
   }
   $8_1 = $8_1 + ($5_1 << 3 | 0) | 0;
   $5_1 = $0_1 + 24 | 0;
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $392($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $392($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $392($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $391($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[((HEAP32[$3_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $392($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $393($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $389($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($380($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $394($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $389($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($380($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $395($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $388($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $391($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   if (($7_1 | 0) < (2 | 0)) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $391($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $396($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $388($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $397($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($380($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $388($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $10_1 = 0, $13_1 = 0, $12_1 = 0, $88_1 = 0, $101_1 = 0, $112_1 = 0, $120_1 = 0, $128_1 = 0, $222_1 = 0, $233_1 = 0, $241_1 = 0, $249_1 = 0, $284_1 = 0, $362_1 = 0, $369_1 = 0, $462 = 0, $473 = 0, $481 = 0, $489 = 0, $1200 = 0, $1207 = 0, $1329 = 0, $1331 = 0, $1401 = 0, $1408 = 0, $1652 = 0, $1659 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $12_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$14
              }
              label$15 : {
               $2_1 = HEAP32[(0 + 87004 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$15
               }
               $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
               $5_1 = $3_1 << 3 | 0;
               $4_1 = HEAP32[($5_1 + 87052 | 0) >> 2] | 0;
               $0_1 = $4_1 + 8 | 0;
               label$16 : {
                label$17 : {
                 $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 87044 | 0;
                 if (($6_1 | 0) != ($5_1 | 0)) {
                  break label$17
                 }
                 HEAP32[(0 + 87004 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                 break label$16;
                }
                HEAP32[(0 + 87020 | 0) >> 2] | 0;
                HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
               }
               $6_1 = $3_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
               $4_1 = $4_1 + $6_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$3;
              }
              $7_1 = HEAP32[(0 + 87012 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $7_1 >>> 0) {
               break label$13
              }
              label$18 : {
               if (!$0_1) {
                break label$18
               }
               label$19 : {
                label$20 : {
                 $88_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $88_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $101_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $101_1 >>> $0_1 | 0;
                 $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $112_1 = $6_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $6_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $120_1 = $112_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $128_1 = $120_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $6_1 = ($128_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $5_1 = $6_1 << 3 | 0;
                 $4_1 = HEAP32[($5_1 + 87052 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 87044 | 0;
                 if (($0_1 | 0) != ($5_1 | 0)) {
                  break label$20
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                 HEAP32[(0 + 87004 | 0) >> 2] = $2_1;
                 break label$19;
                }
                HEAP32[(0 + 87020 | 0) >> 2] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               }
               $0_1 = $4_1 + 8 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $5_1 = $4_1 + $3_1 | 0;
               $8_1 = $6_1 << 3 | 0;
               $6_1 = $8_1 - $3_1 | 0;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
               label$21 : {
                if (!$7_1) {
                 break label$21
                }
                $8_1 = $7_1 >>> 3 | 0;
                $3_1 = ($8_1 << 3 | 0) + 87044 | 0;
                $4_1 = HEAP32[(0 + 87024 | 0) >> 2] | 0;
                label$22 : {
                 label$23 : {
                  $8_1 = 1 << $8_1 | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$23
                  }
                  HEAP32[(0 + 87004 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$22;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               HEAP32[(0 + 87024 | 0) >> 2] = $5_1;
               HEAP32[(0 + 87012 | 0) >> 2] = $6_1;
               break label$3;
              }
              $9_1 = HEAP32[(0 + 87008 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$13
              }
              $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
              $222_1 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $222_1 >>> $0_1 | 0;
              $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $233_1 = $6_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $6_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $241_1 = $233_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $249_1 = $241_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $5_1 = HEAP32[(((($249_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 87308 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $6_1 = $5_1;
              label$24 : {
               label$25 : while (1) {
                label$26 : {
                 $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$26
                 }
                 $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$24
                 }
                }
                $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $284_1 = $6_1;
                $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $6_1 ? $284_1 : $4_1;
                $5_1 = $6_1 ? $0_1 : $5_1;
                $6_1 = $0_1;
                continue label$25;
               };
              }
              $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
              label$27 : {
               $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($5_1 | 0)) {
                break label$27
               }
               label$28 : {
                $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 87020 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$28
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$4;
              }
              label$29 : {
               $6_1 = $5_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$29
               }
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$12
               }
               $6_1 = $5_1 + 16 | 0;
              }
              label$30 : while (1) {
               $11_1 = $6_1;
               $8_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$30
               }
               $6_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$30
               }
               break label$30;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$4;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$13
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $7_1 = HEAP32[(0 + 87008 | 0) >> 2] | 0;
             if (!$7_1) {
              break label$13
             }
             $11_1 = 0;
             label$31 : {
              $0_1 = $0_1 >>> 8 | 0;
              if (!$0_1) {
               break label$31
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$31
              }
              $4_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $0_1 = $0_1 << $4_1 | 0;
              $362_1 = $0_1;
              $0_1 = (($0_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $6_1 = $362_1 << $0_1 | 0;
              $369_1 = $6_1;
              $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($369_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $6_1 = 0 - $3_1 | 0;
             label$32 : {
              label$33 : {
               label$34 : {
                label$35 : {
                 $4_1 = HEAP32[(($11_1 << 2 | 0) + 87308 | 0) >> 2] | 0;
                 if ($4_1) {
                  break label$35
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$34;
                }
                $5_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $0_1 = 0;
                $8_1 = 0;
                label$36 : while (1) {
                 label$37 : {
                  $2_1 = ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $6_1 >>> 0) {
                   break label$37
                  }
                  $6_1 = $2_1;
                  $8_1 = $4_1;
                  if ($6_1) {
                   break label$37
                  }
                  $6_1 = 0;
                  $8_1 = $4_1;
                  $0_1 = $4_1;
                  break label$33;
                 }
                 $2_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
                 $4_1 = HEAP32[(($4_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($4_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $5_1 = $5_1 << (($4_1 | 0) != (0 | 0)) | 0;
                 if ($4_1) {
                  continue label$36
                 }
                 break label$36;
                };
               }
               label$38 : {
                if ($0_1 | $8_1 | 0) {
                 break label$38
                }
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                if (!$0_1) {
                 break label$13
                }
                $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                $462 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $4_1 = $462 >>> $0_1 | 0;
                $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                $473 = $5_1 | $0_1 | 0;
                $0_1 = $4_1 >>> $5_1 | 0;
                $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $481 = $473 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $489 = $481 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($489 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 87308 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$32
               }
              }
              label$39 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $5_1 = $2_1 >>> 0 < $6_1 >>> 0;
               label$40 : {
                $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($4_1) {
                 break label$40
                }
                $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $6_1 = $5_1 ? $2_1 : $6_1;
               $8_1 = $5_1 ? $0_1 : $8_1;
               $0_1 = $4_1;
               if ($0_1) {
                continue label$39
               }
               break label$39;
              };
             }
             if (!$8_1) {
              break label$13
             }
             if ($6_1 >>> 0 >= ((HEAP32[(0 + 87012 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$13
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$41 : {
              $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($5_1 | 0) == ($8_1 | 0)) {
               break label$41
              }
              label$42 : {
               $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
               if ((HEAP32[(0 + 87020 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                break label$42
               }
               HEAP32[($0_1 + 12 | 0) >> 2] | 0;
              }
              HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
              break label$5;
             }
             label$43 : {
              $4_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               break label$43
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$11
              }
              $4_1 = $8_1 + 16 | 0;
             }
             label$44 : while (1) {
              $2_1 = $4_1;
              $5_1 = $0_1;
              $4_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               continue label$44
              }
              $4_1 = $5_1 + 16 | 0;
              $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$44
              }
              break label$44;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$5;
            }
            label$45 : {
             $0_1 = HEAP32[(0 + 87012 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$45
             }
             $4_1 = HEAP32[(0 + 87024 | 0) >> 2] | 0;
             label$46 : {
              label$47 : {
               $6_1 = $0_1 - $3_1 | 0;
               if ($6_1 >>> 0 < 16 >>> 0) {
                break label$47
               }
               HEAP32[(0 + 87012 | 0) >> 2] = $6_1;
               $5_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 87024 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$46;
              }
              HEAP32[(0 + 87024 | 0) >> 2] = 0;
              HEAP32[(0 + 87012 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$3;
            }
            label$48 : {
             $5_1 = HEAP32[(0 + 87016 | 0) >> 2] | 0;
             if ($5_1 >>> 0 <= $3_1 >>> 0) {
              break label$48
             }
             $4_1 = $5_1 - $3_1 | 0;
             HEAP32[(0 + 87016 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 87028 | 0) >> 2] | 0;
             $6_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 87028 | 0) >> 2] = $6_1;
             HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$3;
            }
            label$49 : {
             label$50 : {
              if (!(HEAP32[(0 + 87476 | 0) >> 2] | 0)) {
               break label$50
              }
              $4_1 = HEAP32[(0 + 87484 | 0) >> 2] | 0;
              break label$49;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 87488 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 87492 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 87480 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 87484 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 87476 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 87496 | 0) >> 2] = 0;
             HEAP32[(0 + 87448 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $7_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $7_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$3
            }
            $0_1 = 0;
            label$51 : {
             $4_1 = HEAP32[(0 + 87444 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$51
             }
             $6_1 = HEAP32[(0 + 87436 | 0) >> 2] | 0;
             $9_1 = $6_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $6_1 >>> 0) {
              break label$3
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$3
             }
            }
            if ((HEAPU8[(0 + 87448 | 0) >> 0] | 0) & 4 | 0) {
             break label$8
            }
            label$52 : {
             label$53 : {
              label$54 : {
               $4_1 = HEAP32[(0 + 87028 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$54
               }
               $0_1 = 87452;
               label$55 : while (1) {
                label$56 : {
                 $6_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($6_1 >>> 0 > $4_1 >>> 0) {
                  break label$56
                 }
                 if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$53
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$55
                }
                break label$55;
               };
              }
              $5_1 = $403(0 | 0) | 0;
              if (($5_1 | 0) == (-1 | 0)) {
               break label$9
              }
              $2_1 = $8_1;
              label$57 : {
               $0_1 = HEAP32[(0 + 87480 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $5_1 | 0)) {
                break label$57
               }
               $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$9
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$9
              }
              label$58 : {
               $0_1 = HEAP32[(0 + 87444 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$58
               }
               $4_1 = HEAP32[(0 + 87436 | 0) >> 2] | 0;
               $6_1 = $4_1 + $2_1 | 0;
               if ($6_1 >>> 0 <= $4_1 >>> 0) {
                break label$9
               }
               if ($6_1 >>> 0 > $0_1 >>> 0) {
                break label$9
               }
              }
              $0_1 = $403($2_1 | 0) | 0;
              if (($0_1 | 0) != ($5_1 | 0)) {
               break label$52
              }
              break label$7;
             }
             $2_1 = ($2_1 - $5_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$9
             }
             $5_1 = $403($2_1 | 0) | 0;
             if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$10
             }
             $0_1 = $5_1;
            }
            $5_1 = $0_1;
            label$59 : {
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$59
             }
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$59
             }
             if (($5_1 | 0) == (-1 | 0)) {
              break label$59
             }
             $0_1 = HEAP32[(0 + 87484 | 0) >> 2] | 0;
             $0_1 = (($7_1 - $2_1 | 0) + $0_1 | 0) & (0 - $0_1 | 0) | 0;
             if ($0_1 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             label$60 : {
              if (($403($0_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$60
              }
              $2_1 = $0_1 + $2_1 | 0;
              break label$7;
             }
             $403(0 - $2_1 | 0 | 0) | 0;
             break label$9;
            }
            if (($5_1 | 0) != (-1 | 0)) {
             break label$7
            }
            break label$9;
           }
           $8_1 = 0;
           break label$4;
          }
          $5_1 = 0;
          break label$5;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$7
         }
        }
        HEAP32[(0 + 87448 | 0) >> 2] = HEAP32[(0 + 87448 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$6
       }
       $5_1 = $403($8_1 | 0) | 0;
       $0_1 = $403(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$6
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$6
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$6
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$6
       }
      }
      $0_1 = (HEAP32[(0 + 87436 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 87436 | 0) >> 2] = $0_1;
      label$61 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 87440 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 87440 | 0) >> 2] = $0_1;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4_1 = HEAP32[(0 + 87028 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$65
          }
          $0_1 = 87452;
          label$66 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0_1 = HEAP32[(0 + 87020 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$68
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 87020 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 87456 | 0) >> 2] = $2_1;
         HEAP32[(0 + 87452 | 0) >> 2] = $5_1;
         HEAP32[(0 + 87036 | 0) >> 2] = -1;
         HEAP32[(0 + 87040 | 0) >> 2] = HEAP32[(0 + 87476 | 0) >> 2] | 0;
         HEAP32[(0 + 87464 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 87044 | 0;
          HEAP32[($4_1 + 87052 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 87056 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 87016 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 87028 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 87032 | 0) >> 2] = HEAP32[(0 + 87492 | 0) >> 2] | 0;
         break label$62;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$63
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$63
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$63
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 87028 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 87016 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 87016 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 87032 | 0) >> 2] = HEAP32[(0 + 87492 | 0) >> 2] | 0;
        break label$62;
       }
       label$70 : {
        $8_1 = HEAP32[(0 + 87020 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 87020 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 87452;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$77
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0_1 = 87452;
            label$79 : while (1) {
             label$80 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$80
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$74
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $5_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $0_1 = ($5_1 - $11_1 | 0) - $3_1 | 0;
           $6_1 = $11_1 + $3_1 | 0;
           label$81 : {
            if (($4_1 | 0) != ($5_1 | 0)) {
             break label$81
            }
            HEAP32[(0 + 87028 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 87016 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 87016 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 87024 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 87012 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 87012 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
            break label$72;
           }
           label$83 : {
            $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7_1 = $4_1 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$86 : {
               $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $9_1 = $4_1 >>> 3 | 0;
               $4_1 = ($9_1 << 3 | 0) + 87044 | 0;
               if (($2_1 | 0) == ($4_1 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($3_1 | 0) != ($2_1 | 0)) {
                break label$87
               }
               HEAP32[(0 + 87004 | 0) >> 2] = (HEAP32[(0 + 87004 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
               break label$84;
              }
              label$88 : {
               if (($3_1 | 0) == ($4_1 | 0)) {
                break label$88
               }
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              break label$84;
             }
             $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$90
               }
               label$91 : {
                $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $4_1 >>> 0) {
                 break label$91
                }
                HEAP32[($4_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
               HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
               break label$89;
              }
              label$92 : {
               $4_1 = $5_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $4_1 = $5_1 + 16 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $2_1 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8_1 = $4_1;
               $2_1 = $3_1;
               $4_1 = $3_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               $4_1 = $2_1 + 16 | 0;
               $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($3_1 << 2 | 0) + 87308 | 0;
               if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                break label$95
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if ($2_1) {
                break label$94
               }
               HEAP32[(0 + 87008 | 0) >> 2] = (HEAP32[(0 + 87008 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
               break label$84;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
              if (!$2_1) {
               break label$84
              }
             }
             HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
             label$96 : {
              $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$96
              }
              HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
             }
             $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$84
             }
             HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            $0_1 = $7_1 + $0_1 | 0;
            $5_1 = $5_1 + $7_1 | 0;
           }
           HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
           label$97 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4_1 = $0_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 87044 | 0;
            label$98 : {
             label$99 : {
              $3_1 = HEAP32[(0 + 87004 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($3_1 & $4_1 | 0) {
               break label$99
              }
              HEAP32[(0 + 87004 | 0) >> 2] = $3_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$98;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
            break label$72;
           }
           $4_1 = 0;
           label$100 : {
            $3_1 = $0_1 >>> 8 | 0;
            if (!$3_1) {
             break label$100
            }
            $4_1 = 31;
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $4_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3_1 = $3_1 << $4_1 | 0;
            $1200 = $3_1;
            $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1200 << $3_1 | 0;
            $1207 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1207 << $5_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$0 = 0;
           HEAP32[($6_1 + 16 | 0) >> 2] = 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = ($4_1 << 2 | 0) + 87308 | 0;
           label$101 : {
            label$102 : {
             $5_1 = HEAP32[(0 + 87008 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 87008 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$3_1 >> 2] = $6_1;
             HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
             break label$101;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            label$103 : while (1) {
             $3_1 = $5_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$73
             }
             $5_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$103
             }
             break label$103;
            };
            HEAP32[$8_1 >> 2] = $6_1;
            HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
           }
           HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
           break label$72;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 87016 | 0) >> 2] = $11_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 87028 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 87032 | 0) >> 2] = HEAP32[(0 + 87492 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87460 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87464 | 0) >> 2] | 0;
          $1329 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1329;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87452 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87456 | 0) >> 2] | 0;
          $1331 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1331;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 87460 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 87456 | 0) >> 2] = $2_1;
          HEAP32[(0 + 87452 | 0) >> 2] = $5_1;
          HEAP32[(0 + 87464 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$104 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($6_1 >>> 0 > $5_1 >>> 0) {
            continue label$104
           }
           break label$104;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$62
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$105 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$105
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 87044 | 0;
           label$106 : {
            label$107 : {
             $5_1 = HEAP32[(0 + 87004 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$107
             }
             HEAP32[(0 + 87004 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$106;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$62;
          }
          $0_1 = 0;
          label$108 : {
           $6_1 = $2_1 >>> 8 | 0;
           if (!$6_1) {
            break label$108
           }
           $0_1 = 31;
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$108
           }
           $0_1 = (($6_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $6_1 << $0_1 | 0;
           $1401 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1401 << $6_1 | 0;
           $1408 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1408 << $5_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 87308 | 0;
          label$109 : {
           label$110 : {
            $5_1 = HEAP32[(0 + 87008 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$110
            }
            HEAP32[(0 + 87008 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$109;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$111 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$71
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$111
            }
            break label$111;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$62;
         }
         $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 24 | 0) >> 2] = 0;
         HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$3;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 87016 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$6
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 87016 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 87028 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 87028 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$3;
     }
     HEAP32[($164() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$3;
    }
    label$112 : {
     if (!$11_1) {
      break label$112
     }
     label$113 : {
      label$114 : {
       $4_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($4_1 << 2 | 0) + 87308 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$114
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$113
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       HEAP32[(0 + 87008 | 0) >> 2] = $7_1;
       break label$112;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$112
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $11_1;
     label$115 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$115
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$112
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$116 : {
     label$117 : {
      if ($6_1 >>> 0 > 15 >>> 0) {
       break label$117
      }
      $0_1 = $6_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$116;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $5_1 = $8_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
     HEAP32[($5_1 + $6_1 | 0) >> 2] = $6_1;
     label$118 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$118
      }
      $4_1 = $6_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 87044 | 0;
      label$119 : {
       label$120 : {
        $6_1 = HEAP32[(0 + 87004 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$120
        }
        HEAP32[(0 + 87004 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$119;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
      break label$116;
     }
     label$121 : {
      label$122 : {
       $4_1 = $6_1 >>> 8 | 0;
       if ($4_1) {
        break label$122
       }
       $0_1 = 0;
       break label$121;
      }
      $0_1 = 31;
      if ($6_1 >>> 0 > 16777215 >>> 0) {
       break label$121
      }
      $0_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $4_1 = $4_1 << $0_1 | 0;
      $1652 = $4_1;
      $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1652 << $4_1 | 0;
      $1659 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1659 << $3_1 | 0) >>> 15 | 0) - ($4_1 | $0_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($6_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = 0;
     HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = ($0_1 << 2 | 0) + 87308 | 0;
     label$123 : {
      label$124 : {
       label$125 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$125
        }
        HEAP32[(0 + 87008 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$4_1 >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
        break label$124;
       }
       $0_1 = $6_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       label$126 : while (1) {
        $4_1 = $3_1;
        if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6_1 | 0)) {
         break label$123
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($4_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$126
        }
        break label$126;
       };
       HEAP32[$2_1 >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
      break label$116;
     }
     $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$3;
   }
   label$127 : {
    if (!$10_1) {
     break label$127
    }
    label$128 : {
     label$129 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 87308 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$129
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$128
      }
      HEAP32[(0 + 87008 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
      break label$127;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$127
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$130 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$130
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$127
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$131 : {
    label$132 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$132
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$131;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $6_1 = $5_1 + $3_1 | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($6_1 + $4_1 | 0) >> 2] = $4_1;
    label$133 : {
     if (!$7_1) {
      break label$133
     }
     $8_1 = $7_1 >>> 3 | 0;
     $3_1 = ($8_1 << 3 | 0) + 87044 | 0;
     $0_1 = HEAP32[(0 + 87024 | 0) >> 2] | 0;
     label$134 : {
      label$135 : {
       $8_1 = 1 << $8_1 | 0;
       if ($8_1 & $2_1 | 0) {
        break label$135
       }
       HEAP32[(0 + 87004 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$134;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 87024 | 0) >> 2] = $6_1;
    HEAP32[(0 + 87012 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  label$136 : {
   $13_1 = $1_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $13_1;
  }
  return $0_1 | 0;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $408_1 = 0, $415_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 87020 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 87044 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 87004 | 0) >> 2] = (HEAP32[(0 + 87004 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 87308 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       HEAP32[(0 + 87008 | 0) >> 2] = (HEAP32[(0 + 87008 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 87012 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 87028 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 87028 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 87016 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 87016 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 87012 | 0) >> 2] = 0;
      HEAP32[(0 + 87024 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 87024 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 87012 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 87012 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 87044 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 87020 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 87004 | 0) >> 2] = (HEAP32[(0 + 87004 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 87020 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 87020 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 87308 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        HEAP32[(0 + 87008 | 0) >> 2] = (HEAP32[(0 + 87008 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 87012 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 87044 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 87004 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 87004 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 0;
   label$36 : {
    $4_1 = $0_1 >>> 8 | 0;
    if (!$4_1) {
     break label$36
    }
    $2_1 = 31;
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $4_1 << $2_1 | 0;
    $408_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $408_1 << $4_1 | 0;
    $415_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($415_1 << $5_1 | 0) >>> 15 | 0) - ($4_1 | $2_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 87308 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5_1 = HEAP32[(0 + 87008 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($5_1 & $3_1 | 0) {
        break label$40
       }
       HEAP32[(0 + 87008 | 0) >> 2] = $5_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$39;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$41 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$38
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 87036 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 87036 | 0) >> 2] = $1_1;
   if ($1_1) {
    break label$1
   }
   $1_1 = 87460;
   label$42 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue label$42
    }
    break label$42;
   };
   HEAP32[(0 + 87036 | 0) >> 2] = -1;
  }
 }
 
 function $400($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $398($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($164() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $401($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $398($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & -8 | 0) - ($3_1 & 3 | 0 ? 4 : 8) | 0;
  $404($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $399($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & 3 | 0;
  $4_1 = $2_1 & -8 | 0;
  $5_1 = $0_1 + $4_1 | 0;
  label$1 : {
   $6_1 = HEAP32[(0 + 87020 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > $0_1 >>> 0) {
    break label$1
   }
   if (($3_1 | 0) == (1 | 0)) {
    break label$1
   }
  }
  label$2 : {
   label$3 : {
    if ($3_1) {
     break label$3
    }
    $3_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$2
    }
    label$4 : {
     if ($4_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $3_1 = $0_1;
     if (($4_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 87484 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$2
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $4_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $402($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $3_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 87028 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $5_1 = (HEAP32[(0 + 87016 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $1_1 = $5_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 87016 | 0) >> 2] = $1_1;
     HEAP32[(0 + 87028 | 0) >> 2] = $3_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $3_1 = 0;
     $5_1 = (HEAP32[(0 + 87012 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $3_1 = $5_1 - $1_1 | 0;
       if ($3_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
       $5_1 = $0_1 + $5_1 | 0;
       HEAP32[$5_1 >> 2] = $3_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $5_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $3_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 87024 | 0) >> 2] = $1_1;
     HEAP32[(0 + 87012 | 0) >> 2] = $3_1;
     break label$5;
    }
    $3_1 = 0;
    $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($7_1 & 2 | 0) {
     break label$2
    }
    $8_1 = ($7_1 & -8 | 0) + $4_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $9_1 = $8_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      label$13 : {
       $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       $7_1 = $7_1 >>> 3 | 0;
       $4_1 = ($7_1 << 3 | 0) + 87044 | 0;
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$13
       }
      }
      label$14 : {
       if (($3_1 | 0) != ($5_1 | 0)) {
        break label$14
       }
       HEAP32[(0 + 87004 | 0) >> 2] = (HEAP32[(0 + 87004 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$11;
      }
      label$15 : {
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$15
       }
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($5_1 | 0)) {
        break label$17
       }
       label$18 : {
        $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if ($6_1 >>> 0 > $3_1 >>> 0) {
         break label$18
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
       break label$16;
      }
      label$19 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $7_1 = 0;
       break label$16;
      }
      label$20 : while (1) {
       $6_1 = $3_1;
       $7_1 = $4_1;
       $3_1 = $7_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       $3_1 = $7_1 + 16 | 0;
       $4_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$21 : {
      label$22 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 87308 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$22
       }
       HEAP32[$3_1 >> 2] = $7_1;
       if ($7_1) {
        break label$21
       }
       HEAP32[(0 + 87008 | 0) >> 2] = (HEAP32[(0 + 87008 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$11
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $10_1;
     label$23 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$23
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
     }
     $5_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
    }
    label$24 : {
     if ($9_1 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $8_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $9_1 | 3 | 0;
    $5_1 = $0_1 + $8_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $402($1_1 | 0, $9_1 | 0);
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $391_1 = 0, $398_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     $0_1 = $0_1 - $3_1 | 0;
     if ((HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[(0 + 87020 | 0) >> 2] | 0;
     label$4 : {
      if ($3_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $7_1 = $3_1 >>> 3 | 0;
       $3_1 = ($7_1 << 3 | 0) + 87044 | 0;
       if (($6_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 87004 | 0) >> 2] = (HEAP32[(0 + 87004 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($3_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($0_1 | 0)) {
        break label$9
       }
       label$10 : {
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $3_1 >>> 0) {
         break label$10
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$8;
      }
      label$11 : {
       $3_1 = $0_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $3_1 = $0_1 + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $6_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $4_1 = $3_1;
       $6_1 = $5_1;
       $3_1 = $6_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       $3_1 = $6_1 + 16 | 0;
       $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($5_1 << 2 | 0) + 87308 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$14
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$13
       }
       HEAP32[(0 + 87008 | 0) >> 2] = (HEAP32[(0 + 87008 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$15
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 87012 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    return;
   }
   label$16 : {
    label$17 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 87028 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 87028 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 87016 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 87016 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 87012 | 0) >> 2] = 0;
      HEAP32[(0 + 87024 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 87024 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 87012 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 87012 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $4_1 = HEAP32[(0 + 87020 | 0) >> 2] | 0;
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$20 : {
      label$21 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        $2_1 = $3_1 >>> 3 | 0;
        $3_1 = ($2_1 << 3 | 0) + 87044 | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$22
        }
       }
       label$23 : {
        if (($5_1 | 0) != ($6_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 87004 | 0) >> 2] = (HEAP32[(0 + 87004 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$24
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       break label$20;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$26
        }
        label$27 : {
         $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 > $3_1 >>> 0) {
          break label$27
         }
         HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$25;
       }
       label$28 : {
        $3_1 = $2_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $3_1 = $2_1 + 16 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $6_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $4_1 = $3_1;
        $6_1 = $5_1;
        $3_1 = $6_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        $3_1 = $6_1 + 16 | 0;
        $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$4_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($5_1 << 2 | 0) + 87308 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$31
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$30
        }
        HEAP32[(0 + 87008 | 0) >> 2] = (HEAP32[(0 + 87008 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$20
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$32
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 87024 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 87012 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$33 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 87044 | 0;
    label$34 : {
     label$35 : {
      $5_1 = HEAP32[(0 + 87004 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($5_1 & $3_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 87004 | 0) >> 2] = $5_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$34;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 0;
   label$36 : {
    $5_1 = $1_1 >>> 8 | 0;
    if (!$5_1) {
     break label$36
    }
    $3_1 = 31;
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $3_1 = (($5_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $5_1 = $5_1 << $3_1 | 0;
    $391_1 = $5_1;
    $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $391_1 << $5_1 | 0;
    $398_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($398_1 << $6_1 | 0) >>> 15 | 0) - ($5_1 | $3_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $5_1 = ($3_1 << 2 | 0) + 87308 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      $6_1 = HEAP32[(0 + 87008 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$39
      }
      HEAP32[(0 + 87008 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$5_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
      break label$38;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$40 : while (1) {
      $5_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$37
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $403($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $0() | 0;
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   $0_1 = $2_1 + (($0_1 + 3 | 0) & -4 | 0) | 0;
   if (($0_1 | 0) > (-1 | 0)) {
    break label$1
   }
   HEAP32[($164() | 0) >> 2] = 48;
   return -1 | 0;
  }
  label$2 : {
   if ($0_1 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
    break label$2
   }
   if (fimport$17($0_1 | 0) | 0) {
    break label$2
   }
   HEAP32[($164() | 0) >> 2] = 48;
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  return $2_1 | 0;
 }
 
 function $404($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 8192 >>> 0) {
    break label$1
   }
   fimport$18($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $405($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $406($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($1_1 + $2_1 | 0) >>> 0 <= $0_1 >>> 0) {
      break label$3
     }
     $3_1 = $0_1 + $2_1 | 0;
     if ($3_1 >>> 0 > $1_1 >>> 0) {
      break label$2
     }
    }
    return $404($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$6
      }
      label$7 : {
       if (!$4_1) {
        break label$7
       }
       $4_1 = $0_1;
       break label$4;
      }
      label$8 : {
       if ($0_1 & 3 | 0) {
        break label$8
       }
       $4_1 = $0_1;
       break label$5;
      }
      $4_1 = $0_1;
      label$9 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$4_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $4_1 = $4_1 + 1 | 0;
       if (!($4_1 & 3 | 0)) {
        break label$5
       }
       continue label$9;
      };
     }
     label$10 : {
      if ($4_1) {
       break label$10
      }
      label$11 : {
       if (!($3_1 & 3 | 0)) {
        break label$11
       }
       label$12 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $4_1 = $0_1 + $2_1 | 0;
        HEAP8[$4_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($4_1 & 3 | 0) {
         continue label$12
        }
        break label$12;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$10
      }
      label$13 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$13
       }
       break label$13;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$14 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$14
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$4
    }
    $3_1 = $2_1;
    label$15 : while (1) {
     HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $4_1 = $4_1 + 4 | 0;
     $3_1 = $3_1 + -4 | 0;
     if ($3_1 >>> 0 > 3 >>> 0) {
      continue label$15
     }
     break label$15;
    };
    $2_1 = $2_1 & 3 | 0;
   }
   if (!$2_1) {
    break label$1
   }
   label$16 : while (1) {
    HEAP8[$4_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$16
    }
    break label$16;
   };
  }
  return $0_1 | 0;
 }
 
 function $407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 87500 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 87504 | 0) >> 2] = $1_1;
   HEAP32[(0 + 87500 | 0) >> 2] = $0_1;
  }
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  global$2 = $0_1;
 }
 
 function $409() {
  return global$0 | 0;
 }
 
 function $410($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$19()
   }
   global$0 = $2_1;
  }
  return $1_1 | 0;
 }
 
 function $411($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1;
  if ($1_1 >>> 0 < global$2 >>> 0) {
   fimport$19()
  }
  global$0 = $1_1;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  return abort() | 0;
 }
 
 function $413($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1);
 }
 
 function $414($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1) | 0 | 0;
 }
 
 function $415($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1);
 }
 
 function $416($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1) | 0 | 0;
 }
 
 function $417($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $418($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1) | 0 | 0;
 }
 
 function $419($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1);
 }
 
 function $421($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1);
 }
 
 function $422($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $423($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $419($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$20($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $424($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$21($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $0$hi;
  $2_1 = $0_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$wasm2js_scratch_store_i64($2_1 | 0, $8_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             legalfunc$wasm2js_scratch_store_i64(var$0 - Math_imul(var$2, var$3) | 0 | 0, i64toi32_i32$1 | 0);
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            legalfunc$wasm2js_scratch_store_i64(i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        legalfunc$wasm2js_scratch_store_i64($41_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      legalfunc$wasm2js_scratch_store_i64(var$4 & var$0 | 0 | 0, i64toi32_i32$2 | 0);
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    legalfunc$wasm2js_scratch_store_i64(var$5 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   legalfunc$wasm2js_scratch_store_i64(var$0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 FUNCTION_TABLE[1] = $62;
 FUNCTION_TABLE[2] = $33;
 FUNCTION_TABLE[3] = $34;
 FUNCTION_TABLE[4] = $40;
 FUNCTION_TABLE[5] = $41;
 FUNCTION_TABLE[6] = $46;
 FUNCTION_TABLE[7] = $47;
 FUNCTION_TABLE[8] = $49;
 FUNCTION_TABLE[9] = $50;
 FUNCTION_TABLE[10] = $51;
 FUNCTION_TABLE[11] = $63;
 FUNCTION_TABLE[12] = $39;
 FUNCTION_TABLE[13] = $53;
 FUNCTION_TABLE[14] = $54;
 FUNCTION_TABLE[15] = $55;
 FUNCTION_TABLE[16] = $56;
 FUNCTION_TABLE[17] = $57;
 FUNCTION_TABLE[18] = $58;
 FUNCTION_TABLE[19] = $59;
 FUNCTION_TABLE[20] = $61;
 FUNCTION_TABLE[21] = $13;
 FUNCTION_TABLE[22] = $64;
 FUNCTION_TABLE[23] = $65;
 FUNCTION_TABLE[24] = $66;
 FUNCTION_TABLE[25] = $68;
 FUNCTION_TABLE[26] = $69;
 FUNCTION_TABLE[27] = $70;
 FUNCTION_TABLE[28] = $71;
 FUNCTION_TABLE[29] = $72;
 FUNCTION_TABLE[30] = $73;
 FUNCTION_TABLE[31] = $60;
 FUNCTION_TABLE[32] = $36;
 FUNCTION_TABLE[33] = $43;
 FUNCTION_TABLE[34] = $74;
 FUNCTION_TABLE[35] = $77;
 FUNCTION_TABLE[36] = $80;
 FUNCTION_TABLE[37] = $81;
 FUNCTION_TABLE[38] = $83;
 FUNCTION_TABLE[39] = $84;
 FUNCTION_TABLE[40] = $85;
 FUNCTION_TABLE[41] = $86;
 FUNCTION_TABLE[42] = $87;
 FUNCTION_TABLE[43] = $88;
 FUNCTION_TABLE[44] = $89;
 FUNCTION_TABLE[45] = $90;
 FUNCTION_TABLE[46] = $91;
 FUNCTION_TABLE[47] = $92;
 FUNCTION_TABLE[48] = $93;
 FUNCTION_TABLE[49] = $94;
 FUNCTION_TABLE[50] = $95;
 FUNCTION_TABLE[51] = $96;
 FUNCTION_TABLE[52] = $97;
 FUNCTION_TABLE[53] = $98;
 FUNCTION_TABLE[54] = $99;
 FUNCTION_TABLE[55] = $100;
 FUNCTION_TABLE[56] = $101;
 FUNCTION_TABLE[57] = $102;
 FUNCTION_TABLE[58] = $103;
 FUNCTION_TABLE[59] = $37;
 FUNCTION_TABLE[60] = $119;
 FUNCTION_TABLE[61] = $123;
 FUNCTION_TABLE[62] = $126;
 FUNCTION_TABLE[63] = $128;
 FUNCTION_TABLE[64] = $129;
 FUNCTION_TABLE[65] = $131;
 FUNCTION_TABLE[66] = $132;
 FUNCTION_TABLE[67] = $133;
 FUNCTION_TABLE[68] = $134;
 FUNCTION_TABLE[69] = $136;
 FUNCTION_TABLE[70] = $190;
 FUNCTION_TABLE[71] = $191;
 FUNCTION_TABLE[72] = $211;
 FUNCTION_TABLE[73] = $216;
 FUNCTION_TABLE[74] = $223;
 FUNCTION_TABLE[75] = $217;
 FUNCTION_TABLE[76] = $218;
 FUNCTION_TABLE[77] = $219;
 FUNCTION_TABLE[78] = $221;
 FUNCTION_TABLE[79] = $328;
 FUNCTION_TABLE[80] = $372;
 FUNCTION_TABLE[81] = $375;
 FUNCTION_TABLE[82] = $373;
 FUNCTION_TABLE[83] = $374;
 FUNCTION_TABLE[84] = $379;
 FUNCTION_TABLE[85] = $376;
 FUNCTION_TABLE[86] = $381;
 FUNCTION_TABLE[87] = $397;
 FUNCTION_TABLE[88] = $394;
 FUNCTION_TABLE[89] = $384;
 FUNCTION_TABLE[90] = $377;
 FUNCTION_TABLE[91] = $396;
 FUNCTION_TABLE[92] = $393;
 FUNCTION_TABLE[93] = $385;
 FUNCTION_TABLE[94] = $378;
 FUNCTION_TABLE[95] = $395;
 FUNCTION_TABLE[96] = $390;
 FUNCTION_TABLE[97] = $387;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $1, 
  "malloc": $398, 
  "free": $399, 
  "main": $25, 
  "__errno_location": $164, 
  "fflush": $225, 
  "setThrew": $407, 
  "__getTypeName": $235, 
  "__embind_register_native_and_builtin_types": $237, 
  "__set_stack_limit": $408, 
  "stackSave": $409, 
  "stackAlloc": $410, 
  "stackRestore": $411, 
  "__growWasmMemory": $412, 
  "dynCall_vii": $413, 
  "dynCall_iii": $414, 
  "dynCall_viiii": $415, 
  "dynCall_iidiiii": $416, 
  "dynCall_iiii": $417, 
  "dynCall_ii": $418, 
  "dynCall_jiji": $423, 
  "dynCall_vi": $420, 
  "dynCall_viiiiii": $421, 
  "dynCall_viiiii": $422
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2);
    if (b64[bLength-2] == '=') --end;
    if (b64[bLength-1] == '=') --end;
    for (; i < bLength; i += 4, j += 3) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j+1 < end) uint8Array[j+1] = b1 << 4 | b2 >> 2;
      if (j+2 < end) uint8Array[j+2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1024, "");
base64DecodeToExistingUint8Array(bufferView, 12064, "");
base64DecodeToExistingUint8Array(bufferView
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary, info))
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 98,
  'maximum': 98 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5330560,
    STACKTOP = STACK_BASE,
    STACK_MAX = 87680,
    DYNAMIC_BASE = 5330560,
    DYNAMICTOP_PTR = 87520;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;





// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'dasm-exe.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 86656;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
              //ensure null termination at one-past-end byte if not present yet
              var endChar = HEAP[(value + 4 + length * charSize) >> shift];
              var endCharSwap = 0;
              if(endChar != 0)
              {
                  endCharSwap = endChar;
                  HEAP[(value + 4 + length * charSize) >> shift] = 0;
              }
  
              var decodeStartPtr = value + 4;
              //looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if(HEAP[currentBytePtr >> shift] == 0)
                  {
                      var stringSegment = decodeString(decodeStartPtr);
                      if(str === undefined)
                          str = stringSegment;
                      else
                      {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              if(endCharSwap != 0)
                  HEAP[(value + 4 + length * charSize) >> shift] = endCharSwap;
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }

  function _emscripten_get_sbrk_ptr() {
      return 87520;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      var aligned_dest_end = 0;
      var block_aligned_dest_end = 0;
      var dest_end = 0;
      // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
      if ((num|0) >= 8192) {
        _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
        return dest|0;
      }
  
      ret = dest|0;
      dest_end = (dest + num)|0;
      if ((dest&3) == (src&3)) {
        // The initial unaligned < 4-byte front.
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        aligned_dest_end = (dest_end & -4)|0;
        block_aligned_dest_end = (aligned_dest_end - 64)|0;
        while ((dest|0) <= (block_aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
          HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
          HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
          HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
          HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
          HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
          HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
          HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
          HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
          HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
          HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
          HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
          HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
          HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
          HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
          dest = (dest+64)|0;
          src = (src+64)|0;
        }
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      } else {
        // In the unaligned copy case, unroll a bit as well.
        aligned_dest_end = (dest_end - 4)|0;
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
          HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
          HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      }
      // The remaining unaligned < 4 byte tail.
      while ((dest|0) < (dest_end|0)) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
      }
      return ret|0;
    }

  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
      end = (ptr + num)|0;
  
      value = value & 0xff;
      if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
        while ((ptr&3) != 0) {
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
  
        aligned_end = (end & -4)|0;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
  
        block_aligned_end = (aligned_end - 64)|0;
  
        while((ptr|0) <= (block_aligned_end|0)) {
          HEAP32[((ptr)>>2)]=value4;
          HEAP32[(((ptr)+(4))>>2)]=value4;
          HEAP32[(((ptr)+(8))>>2)]=value4;
          HEAP32[(((ptr)+(12))>>2)]=value4;
          HEAP32[(((ptr)+(16))>>2)]=value4;
          HEAP32[(((ptr)+(20))>>2)]=value4;
          HEAP32[(((ptr)+(24))>>2)]=value4;
          HEAP32[(((ptr)+(28))>>2)]=value4;
          HEAP32[(((ptr)+(32))>>2)]=value4;
          HEAP32[(((ptr)+(36))>>2)]=value4;
          HEAP32[(((ptr)+(40))>>2)]=value4;
          HEAP32[(((ptr)+(44))>>2)]=value4;
          HEAP32[(((ptr)+(48))>>2)]=value4;
          HEAP32[(((ptr)+(52))>>2)]=value4;
          HEAP32[(((ptr)+(56))>>2)]=value4;
          HEAP32[(((ptr)+(60))>>2)]=value4;
          ptr = (ptr + 64)|0;
        }
  
        while ((ptr|0) < (aligned_end|0) ) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      // The remaining bytes.
      while ((ptr|0) < (end|0)) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }
      return (end-num)|0;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array

var asmGlobalArg = {};
var asmLibraryArg = { "__handle_stack_overflow": ___handle_stack_overflow, "__lock": ___lock, "__syscall221": ___syscall221, "__syscall5": ___syscall5, "__syscall54": ___syscall54, "__unlock": ___unlock, "_embind_register_bool": __embind_register_bool, "_embind_register_emval": __embind_register_emval, "_embind_register_float": __embind_register_float, "_embind_register_integer": __embind_register_integer, "_embind_register_memory_view": __embind_register_memory_view, "_embind_register_std_string": __embind_register_std_string, "_embind_register_std_wstring": __embind_register_std_wstring, "_embind_register_void": __embind_register_void, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "exit": _exit, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "memory": wasmMemory, "setTempRet0": setTempRet0, "table": wasmTable };
var asm = createWasm();
Module["asm"] = asm;
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["main"].apply(null, arguments)
};

var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

var ___getTypeName = Module["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__getTypeName"].apply(null, arguments)
};

var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__embind_register_native_and_builtin_types"].apply(null, arguments)
};

var ___set_stack_limit = Module["___set_stack_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__set_stack_limit"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};




// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["callMain"] = callMain;
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PROCINFO")) Module["PROCINFO"] = function() { abort("'PROCINFO' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setjmpId")) Module["setjmpId"] = function() { abort("'setjmpId' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS__deps")) Module["DNS__deps"] = function() { abort("'DNS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets__deps")) Module["Sockets__deps"] = function() { abort("'Sockets__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS__deps")) Module["PATH_FS__deps"] = function() { abort("'PATH_FS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS__deps")) Module["SYSCALLS__deps"] = function() { abort("'SYSCALLS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle__deps")) Module["demangle__deps"] = function() { abort("'demangle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64__deps")) Module["writeI53ToI64__deps"] = function() { abort("'writeI53ToI64__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser__deps")) Module["Browser__deps"] = function() { abort("'Browser__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser__postset")) Module["Browser__postset"] = function() { abort("'Browser__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser__postset__deps")) Module["Browser__postset__deps"] = function() { abort("'Browser__postset__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS__deps")) Module["FS__deps"] = function() { abort("'FS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS__postset")) Module["FS__postset"] = function() { abort("'FS__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS__deps")) Module["MEMFS__deps"] = function() { abort("'MEMFS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY__deps")) Module["TTY__deps"] = function() { abort("'TTY__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY__postset")) Module["TTY__postset"] = function() { abort("'TTY__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS__postset")) Module["PIPEFS__postset"] = function() { abort("'PIPEFS__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS__deps")) Module["PIPEFS__deps"] = function() { abort("'PIPEFS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS__postset")) Module["SOCKFS__postset"] = function() { abort("'SOCKFS__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS__deps")) Module["SOCKFS__deps"] = function() { abort("'SOCKFS__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL__postset")) Module["GL__postset"] = function() { abort("'GL__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL__deps")) Module["GL__deps"] = function() { abort("'GL__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet__deps")) Module["emscriptenWebGLGet__deps"] = function() { abort("'emscriptenWebGLGet__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData__deps")) Module["emscriptenWebGLGetTexPixelData__deps"] = function() { abort("'emscriptenWebGLGetTexPixelData__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL__postset__deps")) Module["GL__postset__deps"] = function() { abort("'GL__postset__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform__deps")) Module["emscriptenWebGLGetUniform__deps"] = function() { abort("'emscriptenWebGLGetUniform__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib__deps")) Module["emscriptenWebGLGetVertexAttrib__deps"] = function() { abort("'emscriptenWebGLGetVertexAttrib__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL__deps")) Module["AL__deps"] = function() { abort("'AL__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "WebVR")) Module["WebVR"] = function() { abort("'WebVR' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "WebVR__deps")) Module["WebVR__deps"] = function() { abort("'WebVR__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL__deps")) Module["SDL__deps"] = function() { abort("'SDL__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx__deps")) Module["SDL_gfx__deps"] = function() { abort("'SDL_gfx__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT__deps")) Module["GLUT__deps"] = function() { abort("'GLUT__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL__deps")) Module["EGL__deps"] = function() { abort("'EGL__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW__deps")) Module["GLFW__deps"] = function() { abort("'GLFW__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW__deps")) Module["GLEW__deps"] = function() { abort("'GLEW__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore__deps")) Module["IDBStore__deps"] = function() { abort("'IDBStore__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval__deps")) Module["init_emval__deps"] = function() { abort("'init_emval__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval__postset")) Module["init_emval__postset"] = function() { abort("'init_emval__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles__deps")) Module["count_emval_handles__deps"] = function() { abort("'count_emval_handles__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval__deps")) Module["get_first_emval__deps"] = function() { abort("'get_first_emval__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol__deps")) Module["getStringOrSymbol__deps"] = function() { abort("'getStringOrSymbol__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle__deps")) Module["requireHandle__deps"] = function() { abort("'requireHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator__deps")) Module["craftEmvalAllocator__deps"] = function() { abort("'craftEmvalAllocator__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError__postset")) Module["InternalError__postset"] = function() { abort("'InternalError__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError__deps")) Module["InternalError__deps"] = function() { abort("'InternalError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError__postset")) Module["BindingError__postset"] = function() { abort("'BindingError__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError__deps")) Module["BindingError__deps"] = function() { abort("'BindingError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError__postset")) Module["UnboundTypeError__postset"] = function() { abort("'UnboundTypeError__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError__deps")) Module["UnboundTypeError__deps"] = function() { abort("'UnboundTypeError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError__postset")) Module["PureVirtualError__postset"] = function() { abort("'PureVirtualError__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError__deps")) Module["PureVirtualError__deps"] = function() { abort("'PureVirtualError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind__deps")) Module["init_embind__deps"] = function() { abort("'init_embind__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind__postset")) Module["init_embind__postset"] = function() { abort("'init_embind__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError__deps")) Module["throwInternalError__deps"] = function() { abort("'throwInternalError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError__deps")) Module["throwBindingError__deps"] = function() { abort("'throwBindingError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError__deps")) Module["throwUnboundTypeError__deps"] = function() { abort("'throwUnboundTypeError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable__deps")) Module["ensureOverloadTable__deps"] = function() { abort("'ensureOverloadTable__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol__deps")) Module["exposePublicSymbol__deps"] = function() { abort("'exposePublicSymbol__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol__deps")) Module["replacePublicSymbol__deps"] = function() { abort("'replacePublicSymbol__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError__deps")) Module["extendError__deps"] = function() { abort("'extendError__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction__deps")) Module["createNamedFunction__deps"] = function() { abort("'createNamedFunction__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances__deps")) Module["registeredInstances__deps"] = function() { abort("'registeredInstances__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer__deps")) Module["getBasestPointer__deps"] = function() { abort("'getBasestPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance__deps")) Module["registerInheritedInstance__deps"] = function() { abort("'registerInheritedInstance__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance__deps")) Module["unregisterInheritedInstance__deps"] = function() { abort("'unregisterInheritedInstance__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance__deps")) Module["getInheritedInstance__deps"] = function() { abort("'getInheritedInstance__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount__deps")) Module["getInheritedInstanceCount__deps"] = function() { abort("'getInheritedInstanceCount__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances__deps")) Module["getLiveInheritedInstances__deps"] = function() { abort("'getLiveInheritedInstances__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType__deps")) Module["registerType__deps"] = function() { abort("'registerType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved__deps")) Module["whenDependentTypesAreResolved__deps"] = function() { abort("'whenDependentTypesAreResolved__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes__deps")) Module["embind_charCodes__deps"] = function() { abort("'embind_charCodes__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes__postset")) Module["embind_charCodes__postset"] = function() { abort("'embind_charCodes__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String__deps")) Module["readLatin1String__deps"] = function() { abort("'readLatin1String__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName__deps")) Module["getTypeName__deps"] = function() { abort("'getTypeName__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType__deps")) Module["requireRegisteredType__deps"] = function() { abort("'requireRegisteredType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize__deps")) Module["getShiftFromSize__deps"] = function() { abort("'getShiftFromSize__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer__deps")) Module["integerReadValueFromPointer__deps"] = function() { abort("'integerReadValueFromPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer__deps")) Module["enumReadValueFromPointer__deps"] = function() { abort("'enumReadValueFromPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer__deps")) Module["floatReadValueFromPointer__deps"] = function() { abort("'floatReadValueFromPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new___deps")) Module["new___deps"] = function() { abort("'new___deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction__deps")) Module["craftInvokerFunction__deps"] = function() { abort("'craftInvokerFunction__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction__deps")) Module["embind__requireFunction__deps"] = function() { abort("'embind__requireFunction__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType__deps")) Module["genericPointerToWireType__deps"] = function() { abort("'genericPointerToWireType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType__deps")) Module["constNoSmartPtrRawPointerToWireType__deps"] = function() { abort("'constNoSmartPtrRawPointerToWireType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType__deps")) Module["nonConstNoSmartPtrRawPointerToWireType__deps"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer__deps")) Module["init_RegisteredPointer__deps"] = function() { abort("'init_RegisteredPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer__deps")) Module["RegisteredPointer__deps"] = function() { abort("'RegisteredPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer__postset")) Module["RegisteredPointer__postset"] = function() { abort("'RegisteredPointer__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType__deps")) Module["RegisteredPointer_fromWireType__deps"] = function() { abort("'RegisteredPointer_fromWireType__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle__deps")) Module["releaseClassHandle__deps"] = function() { abort("'releaseClassHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer__deps")) Module["attachFinalizer__deps"] = function() { abort("'attachFinalizer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle__deps")) Module["makeClassHandle__deps"] = function() { abort("'makeClassHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle__deps")) Module["init_ClassHandle__deps"] = function() { abort("'init_ClassHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle__deps")) Module["ClassHandle__deps"] = function() { abort("'ClassHandle__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle__postset")) Module["ClassHandle__postset"] = function() { abort("'ClassHandle__postset' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted__deps")) Module["throwInstanceAlreadyDeleted__deps"] = function() { abort("'throwInstanceAlreadyDeleted__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone__deps")) Module["ClassHandle_clone__deps"] = function() { abort("'ClassHandle_clone__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete__deps")) Module["ClassHandle_delete__deps"] = function() { abort("'ClassHandle_delete__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater__deps")) Module["ClassHandle_deleteLater__deps"] = function() { abort("'ClassHandle_deleteLater__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes__deps")) Module["flushPendingDeletes__deps"] = function() { abort("'flushPendingDeletes__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction__deps")) Module["setDelayFunction__deps"] = function() { abort("'setDelayFunction__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer__deps")) Module["upcastPointer__deps"] = function() { abort("'upcastPointer__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis__deps")) Module["validateThis__deps"] = function() { abort("'validateThis__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName__deps")) Module["makeLegalFunctionName__deps"] = function() { abort("'makeLegalFunctionName__deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
Module["calledRun"] = calledRun;



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    Module['___set_stack_limit'](STACK_MAX);

    var ret = entryFunction(argc, argv);


    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



